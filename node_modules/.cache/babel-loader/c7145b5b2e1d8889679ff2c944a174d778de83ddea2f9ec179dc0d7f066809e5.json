{"ast":null,"code":"import { parseCSV, toNum } from './dataUtils';\n\n// =============================\n// Investor mapping & parsing (KRX style, Korean headers)\n// =============================\nexport const INVESTOR_KEYS = [\"금융투자\", \"보험\", \"투신\", \"사모\", \"은행\", \"기타금융\", \"연기금\", \"기타법인\", \"개인\", \"외국인\", \"기타외국인\", \"기관합계\"];\nexport function normalizeInvestorRow(r) {\n  const get = (k, alts = []) => {\n    const cand = [k, ...alts];\n    for (const key of cand) {\n      if (r[key] !== undefined) return toNum(r[key]);\n    }\n    return 0;\n  };\n  const out = {\n    date: r.date || r.Date || r[\"날짜\"],\n    금융투자: get(\"금융투자\", [\"Securities\", \"FinancialInvestment\"]),\n    보험: get(\"보험\", [\"Insurance\"]),\n    투신: get(\"투신\", [\"InvestmentTrust\"]),\n    사모: get(\"사모\", [\"PrivateEquity\", \"사모펀드\"]),\n    은행: get(\"은행\", [\"Bank\"]),\n    기타금융: get(\"기타금융\", [\"OtherFinance\"]),\n    연기금: get(\"연기금\", [\"Pension\"]),\n    기타법인: get(\"기타법인\", [\"OtherCorporation\"]),\n    개인: get(\"개인\", [\"Individual\"]),\n    외국인: get(\"외국인\", [\"Foreigner\", \"Foreign\"]),\n    기타외국인: get(\"기타외국인\", [\"OtherForeigner\"]),\n    기관합계: get(\"기관합계\", [\"기관\", \"InstitutionTotal\"])\n  };\n  // If 기관합계 not provided or zero, compute from parts (excluding 개인/외국인 계열)\n  if (!out.기관합계) {\n    const parts = [\"금융투자\", \"보험\", \"투신\", \"사모\", \"은행\", \"기타금융\", \"연기금\", \"기타법인\"];\n    out.기관합계 = parts.reduce((s, k) => s + toNum(out[k]), 0);\n  }\n  return out;\n}\nexport function parseInvestorFlowCSV(text) {\n  // 1) 일반 CSV/TSV 시도\n  let raw = parseCSV(text);\n  console.log('Raw CSV parsed:', raw.slice(0, 3)); // 디버깅용\n  let parsed = raw.map(normalizeInvestorRow).filter(r => r.date).sort((a, b) => new Date(a.date) - new Date(b.date));\n  console.log('Parsed investor data:', parsed.slice(0, 3)); // 디버깅용\n\n  // 2) 실패하면: 헤더에 탭/콤마가 없고 공백이 있으면 공백 기준 파싱\n  if (parsed.length === 0) {\n    console.log('CSV parsing failed, trying whitespace parsing...');\n    const lines = text.trim().split(/\\r?\\n/);\n    const head = lines[0] || \"\";\n    const looksWS = !head.includes(\",\") && !head.includes(\"\\t\") && /\\s+/.test(head);\n    if (looksWS) {\n      // 공백으로 구분된 데이터를 직접 파싱\n      const headers = head.trim().split(/\\s+/);\n      console.log('Headers detected:', headers);\n      const rows = lines.slice(1).map(line => {\n        const values = line.trim().split(/\\s+/);\n        const row = {};\n        headers.forEach((h, i) => {\n          row[h] = values[i] || \"\";\n        });\n        return row;\n      });\n      parsed = rows.map(normalizeInvestorRow).filter(r => r.date).sort((a, b) => new Date(a.date) - new Date(b.date));\n      console.log('Whitespace parsed data:', parsed.slice(0, 3));\n    }\n  }\n  return parsed;\n}","map":{"version":3,"names":["parseCSV","toNum","INVESTOR_KEYS","normalizeInvestorRow","r","get","k","alts","cand","key","undefined","out","date","Date","금융투자","보험","투신","사모","은행","기타금융","연기금","기타법인","개인","외국인","기타외국인","기관합계","parts","reduce","s","parseInvestorFlowCSV","text","raw","console","log","slice","parsed","map","filter","sort","a","b","length","lines","trim","split","head","looksWS","includes","test","headers","rows","line","values","row","forEach","h","i"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/investorUtils.js"],"sourcesContent":["import { parseCSV, toNum } from './dataUtils';\n\n// =============================\n// Investor mapping & parsing (KRX style, Korean headers)\n// =============================\nexport const INVESTOR_KEYS = [\n  \"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\"\n];\n\nexport function normalizeInvestorRow(r) {\n  const get = (k, alts=[]) => {\n    const cand = [k, ...alts];\n    for (const key of cand) {\n      if (r[key] !== undefined) return toNum(r[key]);\n    }\n    return 0;\n  };\n  const out = {\n    date: r.date || r.Date || r[\"날짜\"],\n    금융투자: get(\"금융투자\", [\"Securities\",\"FinancialInvestment\"]),\n    보험: get(\"보험\", [\"Insurance\"]),\n    투신: get(\"투신\", [\"InvestmentTrust\"]),\n    사모: get(\"사모\", [\"PrivateEquity\",\"사모펀드\"]),\n    은행: get(\"은행\", [\"Bank\"]),\n    기타금융: get(\"기타금융\", [\"OtherFinance\"]),\n    연기금: get(\"연기금\", [\"Pension\"]),\n    기타법인: get(\"기타법인\", [\"OtherCorporation\"]),\n    개인: get(\"개인\", [\"Individual\"]),\n    외국인: get(\"외국인\", [\"Foreigner\",\"Foreign\"]),\n    기타외국인: get(\"기타외국인\", [\"OtherForeigner\"]),\n    기관합계: get(\"기관합계\", [\"기관\", \"InstitutionTotal\"]),\n  };\n  // If 기관합계 not provided or zero, compute from parts (excluding 개인/외국인 계열)\n  if (!out.기관합계) {\n    const parts = [\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\"];\n    out.기관합계 = parts.reduce((s,k)=>s+toNum(out[k]),0);\n  }\n  return out;\n}\n\nexport function parseInvestorFlowCSV(text) {\n  // 1) 일반 CSV/TSV 시도\n  let raw = parseCSV(text);\n  console.log('Raw CSV parsed:', raw.slice(0, 3)); // 디버깅용\n  let parsed = raw\n    .map(normalizeInvestorRow)\n    .filter((r) => r.date)\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\n  console.log('Parsed investor data:', parsed.slice(0, 3)); // 디버깅용\n\n  // 2) 실패하면: 헤더에 탭/콤마가 없고 공백이 있으면 공백 기준 파싱\n  if (parsed.length === 0) {\n    console.log('CSV parsing failed, trying whitespace parsing...');\n    const lines = text.trim().split(/\\r?\\n/);\n    const head = lines[0] || \"\";\n    const looksWS = !head.includes(\",\") && !head.includes(\"\\t\") && /\\s+/.test(head);\n    if (looksWS) {\n      // 공백으로 구분된 데이터를 직접 파싱\n      const headers = head.trim().split(/\\s+/);\n      console.log('Headers detected:', headers);\n      const rows = lines.slice(1).map(line => {\n        const values = line.trim().split(/\\s+/);\n        const row = {};\n        headers.forEach((h, i) => {\n          row[h] = values[i] || \"\";\n        });\n        return row;\n      });\n      parsed = rows\n        .map(normalizeInvestorRow)\n        .filter((r) => r.date)\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\n      console.log('Whitespace parsed data:', parsed.slice(0, 3));\n    }\n  }\n  return parsed;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}