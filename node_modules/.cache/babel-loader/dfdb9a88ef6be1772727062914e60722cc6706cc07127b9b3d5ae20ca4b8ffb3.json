{"ast":null,"code":"// CSV 파싱 테스트 스크립트\n\nimport { parseCSV } from './utils/dataUtils';\nimport { parseInvestorFlowCSV } from './utils/investorUtils';\n\n// 테스트 데이터 (실제 파일과 동일한 형식)\nconst testFlowCSV = `날짜,금융투자,보험,투신,사모,은행,기타금융,연기금,기타법인,개인,외국인,기타외국인,기관합계,전체\n2020-08-10,-1120696400,-333365000,-229195850,44312800,0,0,8486650,143419300,5094342700,-3617474800,10170600,-1487038500,0\n2020-08-11,615642250,137802200,930901300,28587900,0,0,0,206228400,-1418363250,-476630700,-24168100,1919162050,0`;\n\n// BOM이 포함된 테스트 데이터\nconst testFlowCSVWithBOM = '\\uFEFF' + testFlowCSV;\nexport function testParsing() {\n  console.log('=== CSV 파싱 테스트 시작 ===');\n\n  // 1. 일반 CSV 파싱 테스트\n  console.log('\\n1. 일반 parseCSV 테스트:');\n  const parsed1 = parseCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed1.length);\n  console.log('첫 번째 행:', parsed1[0]);\n\n  // 2. BOM 포함 CSV 파싱 테스트\n  console.log('\\n2. BOM 포함 parseCSV 테스트:');\n  const parsed2 = parseCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed2.length);\n  console.log('첫 번째 행:', parsed2[0]);\n\n  // 3. 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n3. parseInvestorFlowCSV 테스트:');\n  const parsed3 = parseInvestorFlowCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed3.length);\n  console.log('첫 번째 행:', parsed3[0]);\n\n  // 4. BOM 포함 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n4. BOM 포함 parseInvestorFlowCSV 테스트:');\n  const parsed4 = parseInvestorFlowCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed4.length);\n  console.log('첫 번째 행:', parsed4[0]);\n\n  // 5. 실제 파일 테스트\n  console.log('\\n5. 실제 파일 로드 테스트:');\n  fetch('/flows_data.csv').then(res => res.text()).then(text => {\n    console.log('파일 크기:', text.length);\n    console.log('첫 100자:', text.substring(0, 100));\n    const parsed = parseInvestorFlowCSV(text);\n    console.log('파싱된 행 수:', parsed.length);\n    if (parsed.length > 0) {\n      console.log('첫 번째 행:', parsed[0]);\n    }\n  }).catch(err => console.error('파일 로드 실패:', err));\n  console.log('=== 테스트 완료 ===');\n}\n\n// 자동 실행\nif (typeof window !== 'undefined') {\n  window.testCSVParsing = testParsing;\n  console.log('브라우저 콘솔에서 testCSVParsing()을 실행하세요.');\n}","map":{"version":3,"names":["parseCSV","parseInvestorFlowCSV","testFlowCSV","testFlowCSVWithBOM","testParsing","console","log","parsed1","length","parsed2","parsed3","parsed4","fetch","then","res","text","substring","parsed","catch","err","error","window","testCSVParsing"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/testCSVParsing.js"],"sourcesContent":["// CSV 파싱 테스트 스크립트\n\nimport { parseCSV } from './utils/dataUtils';\nimport { parseInvestorFlowCSV } from './utils/investorUtils';\n\n// 테스트 데이터 (실제 파일과 동일한 형식)\nconst testFlowCSV = `날짜,금융투자,보험,투신,사모,은행,기타금융,연기금,기타법인,개인,외국인,기타외국인,기관합계,전체\n2020-08-10,-1120696400,-333365000,-229195850,44312800,0,0,8486650,143419300,5094342700,-3617474800,10170600,-1487038500,0\n2020-08-11,615642250,137802200,930901300,28587900,0,0,0,206228400,-1418363250,-476630700,-24168100,1919162050,0`;\n\n// BOM이 포함된 테스트 데이터\nconst testFlowCSVWithBOM = '\\uFEFF' + testFlowCSV;\n\nexport function testParsing() {\n  console.log('=== CSV 파싱 테스트 시작 ===');\n  \n  // 1. 일반 CSV 파싱 테스트\n  console.log('\\n1. 일반 parseCSV 테스트:');\n  const parsed1 = parseCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed1.length);\n  console.log('첫 번째 행:', parsed1[0]);\n  \n  // 2. BOM 포함 CSV 파싱 테스트\n  console.log('\\n2. BOM 포함 parseCSV 테스트:');\n  const parsed2 = parseCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed2.length);\n  console.log('첫 번째 행:', parsed2[0]);\n  \n  // 3. 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n3. parseInvestorFlowCSV 테스트:');\n  const parsed3 = parseInvestorFlowCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed3.length);\n  console.log('첫 번째 행:', parsed3[0]);\n  \n  // 4. BOM 포함 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n4. BOM 포함 parseInvestorFlowCSV 테스트:');\n  const parsed4 = parseInvestorFlowCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed4.length);\n  console.log('첫 번째 행:', parsed4[0]);\n  \n  // 5. 실제 파일 테스트\n  console.log('\\n5. 실제 파일 로드 테스트:');\n  fetch('/flows_data.csv')\n    .then(res => res.text())\n    .then(text => {\n      console.log('파일 크기:', text.length);\n      console.log('첫 100자:', text.substring(0, 100));\n      \n      const parsed = parseInvestorFlowCSV(text);\n      console.log('파싱된 행 수:', parsed.length);\n      if (parsed.length > 0) {\n        console.log('첫 번째 행:', parsed[0]);\n      }\n    })\n    .catch(err => console.error('파일 로드 실패:', err));\n    \n  console.log('=== 테스트 완료 ===');\n}\n\n// 자동 실행\nif (typeof window !== 'undefined') {\n  window.testCSVParsing = testParsing;\n  console.log('브라우저 콘솔에서 testCSVParsing()을 실행하세요.');\n}"],"mappings":"AAAA;;AAEA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,oBAAoB,QAAQ,uBAAuB;;AAE5D;AACA,MAAMC,WAAW,GAAG;AACpB;AACA,gHAAgH;;AAEhH;AACA,MAAMC,kBAAkB,GAAG,QAAQ,GAAGD,WAAW;AAEjD,OAAO,SAASE,WAAWA,CAAA,EAAG;EAC5BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;EAEpC;EACAD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACpC,MAAMC,OAAO,GAAGP,QAAQ,CAACE,WAAW,CAAC;EACrCG,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,OAAO,CAACC,MAAM,CAAC;EACvCH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAElC;EACAF,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EACxC,MAAMG,OAAO,GAAGT,QAAQ,CAACG,kBAAkB,CAAC;EAC5CE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEG,OAAO,CAACD,MAAM,CAAC;EACvCH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEG,OAAO,CAAC,CAAC,CAAC,CAAC;;EAElC;EACAJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC7C,MAAMI,OAAO,GAAGT,oBAAoB,CAACC,WAAW,CAAC;EACjDG,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEI,OAAO,CAACF,MAAM,CAAC;EACvCH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEI,OAAO,CAAC,CAAC,CAAC,CAAC;;EAElC;EACAL,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;EACpD,MAAMK,OAAO,GAAGV,oBAAoB,CAACE,kBAAkB,CAAC;EACxDE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEK,OAAO,CAACH,MAAM,CAAC;EACvCH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEK,OAAO,CAAC,CAAC,CAAC,CAAC;;EAElC;EACAN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACjCM,KAAK,CAAC,iBAAiB,CAAC,CACrBC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACE,IAAI,IAAI;IACZV,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAES,IAAI,CAACP,MAAM,CAAC;IAClCH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAES,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAE9C,MAAMC,MAAM,GAAGhB,oBAAoB,CAACc,IAAI,CAAC;IACzCV,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEW,MAAM,CAACT,MAAM,CAAC;IACtC,IAAIS,MAAM,CAACT,MAAM,GAAG,CAAC,EAAE;MACrBH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEW,MAAM,CAAC,CAAC,CAAC,CAAC;IACnC;EACF,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAId,OAAO,CAACe,KAAK,CAAC,WAAW,EAAED,GAAG,CAAC,CAAC;EAEhDd,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAC/B;;AAEA;AACA,IAAI,OAAOe,MAAM,KAAK,WAAW,EAAE;EACjCA,MAAM,CAACC,cAAc,GAAGlB,WAAW;EACnCC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;AACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}