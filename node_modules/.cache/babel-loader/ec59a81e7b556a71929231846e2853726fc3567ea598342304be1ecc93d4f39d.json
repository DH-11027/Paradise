{"ast":null,"code":"// =============================\n// Data parsing and formatting utilities\n// =============================\nexport function parseCSV(text){// Minimal CSV parser (comma or tab). Expects header row.\nconst lines=text.trim().split(/\\r?\\n/).filter(Boolean);if(lines.length<2)return[];const sep=lines[0].includes(\"\\t\")?\"\\t\":\",\";const headers=lines[0].split(sep).map(h=>h.trim());return lines.slice(1).map(line=>{const cols=line.split(sep);const row={};headers.forEach((h,i)=>{var _cols$i$trim,_cols$i,_cols$i$trim2;return row[h]=(_cols$i$trim=(_cols$i=cols[i])===null||_cols$i===void 0?void 0:(_cols$i$trim2=_cols$i.trim)===null||_cols$i$trim2===void 0?void 0:_cols$i$trim2.call(_cols$i))!==null&&_cols$i$trim!==void 0?_cols$i$trim:\"\";});return row;});}export function toNum(v){if(typeof v===\"number\")return v;if(v===null||v===undefined)return 0;const s=String(v).trim();if(s===\"\"||s===\"-\")return 0;// Remove commas and KR units; support scientific notation (e.g., -1.1E+09)\nconst clean=s.replace(/,/g,\"\").replace(/원|주|%/g,\"\");const n=Number(clean);return Number.isFinite(n)?n:0;}export function fmtDate(d){if(!d)return\"\";// 문자열인 경우 다양한 형식 처리\nif(typeof d==='string'){// YYYY-MM-DD 또는 YYYY/MM/DD 형식 처리\nconst cleaned=d.trim().replace(/\\//g,'-');// YYYY-M-D 형식을 YYYY-MM-DD로 변환\nconst parts=cleaned.split('-');if(parts.length===3){const year=parts[0];const month=parts[1].padStart(2,'0');const day=parts[2].padStart(2,'0');return\"\".concat(year,\"-\").concat(month,\"-\").concat(day);}}const t=new Date(d);if(Number.isNaN(t.getTime()))return String(d);// keep original if invalid\nreturn t.toISOString().slice(0,10);}","map":{"version":3,"names":["parseCSV","text","lines","trim","split","filter","Boolean","length","sep","includes","headers","map","h","slice","line","cols","row","forEach","i","_cols$i$trim","_cols$i","_cols$i$trim2","call","toNum","v","undefined","s","String","clean","replace","n","Number","isFinite","fmtDate","d","cleaned","parts","year","month","padStart","day","concat","t","Date","isNaN","getTime","toISOString"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/dataUtils.js"],"sourcesContent":["// =============================\n// Data parsing and formatting utilities\n// =============================\n\nexport function parseCSV(text) {\n  // Minimal CSV parser (comma or tab). Expects header row.\n  const lines = text.trim().split(/\\r?\\n/).filter(Boolean);\n  if (lines.length < 2) return [];\n  const sep = lines[0].includes(\"\\t\") ? \"\\t\" : \",\";\n  const headers = lines[0].split(sep).map((h) => h.trim());\n  return lines.slice(1).map((line) => {\n    const cols = line.split(sep);\n    const row = {};\n    headers.forEach((h, i) => (row[h] = cols[i]?.trim?.() ?? \"\"));\n    return row;\n  });\n}\n\nexport function toNum(v) {\n  if (typeof v === \"number\") return v;\n  if (v === null || v === undefined) return 0;\n  const s = String(v).trim();\n  if (s === \"\" || s === \"-\") return 0;\n  // Remove commas and KR units; support scientific notation (e.g., -1.1E+09)\n  const clean = s.replace(/,/g, \"\").replace(/원|주|%/g, \"\");\n  const n = Number(clean);\n  return Number.isFinite(n) ? n : 0;\n}\n\nexport function fmtDate(d) {\n  if (!d) return \"\";\n  \n  // 문자열인 경우 다양한 형식 처리\n  if (typeof d === 'string') {\n    // YYYY-MM-DD 또는 YYYY/MM/DD 형식 처리\n    const cleaned = d.trim().replace(/\\//g, '-');\n    \n    // YYYY-M-D 형식을 YYYY-MM-DD로 변환\n    const parts = cleaned.split('-');\n    if (parts.length === 3) {\n      const year = parts[0];\n      const month = parts[1].padStart(2, '0');\n      const day = parts[2].padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n  }\n  \n  const t = new Date(d);\n  if (Number.isNaN(t.getTime())) return String(d); // keep original if invalid\n  return t.toISOString().slice(0, 10);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}