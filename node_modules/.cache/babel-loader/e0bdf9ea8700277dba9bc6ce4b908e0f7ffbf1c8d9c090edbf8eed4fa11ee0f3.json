{"ast":null,"code":"// 외국인 수급 데이터 디버깅 전용 모듈\n\nexport function debugFlowData(csvText) {\n  console.log('=== FLOW DATA DEBUGGING START ===');\n\n  // 1. Raw CSV 확인\n  console.log('CSV length:', csvText.length);\n  console.log('First 200 chars:', csvText.substring(0, 200));\n\n  // 2. 첫 번째 문자 코드 확인\n  console.log('First char code:', csvText.charCodeAt(0));\n  console.log('Second char code:', csvText.charCodeAt(1));\n  console.log('Third char code:', csvText.charCodeAt(2));\n\n  // 3. BOM 제거\n  let cleanText = csvText;\n  if (cleanText.charCodeAt(0) === 0xFEFF || cleanText.charCodeAt(0) === 65279) {\n    console.log('BOM detected, removing...');\n    cleanText = cleanText.substring(1);\n  }\n\n  // 4. 첫 줄 파싱\n  const lines = cleanText.split(/\\r?\\n/);\n  console.log('Total lines:', lines.length);\n  const firstLine = lines[0];\n  console.log('First line:', firstLine);\n\n  // 5. 헤더 파싱\n  const headers = firstLine.split(',');\n  console.log('Headers count:', headers.length);\n  console.log('Headers:', headers);\n\n  // 각 헤더의 정확한 내용 확인\n  headers.forEach((header, idx) => {\n    console.log(`Header ${idx}: \"${header}\" (length: ${header.length}, charCodes: ${Array.from(header).map(c => c.charCodeAt(0)).join(',')})`);\n  });\n\n  // 6. 외국인 관련 헤더 찾기\n  const foreignIndex = headers.findIndex(h => h.includes('외국인') && !h.includes('기타'));\n  const otherForeignIndex = headers.findIndex(h => h.includes('기타외국인'));\n  console.log('Foreign index:', foreignIndex);\n  console.log('Other foreign index:', otherForeignIndex);\n\n  // 7. 첫 번째 데이터 행 파싱\n  if (lines.length > 1) {\n    const firstDataLine = lines[1];\n    const values = firstDataLine.split(',');\n    console.log('First data line values count:', values.length);\n    if (foreignIndex >= 0) {\n      console.log(`Foreign value at index ${foreignIndex}:`, values[foreignIndex]);\n    }\n    if (otherForeignIndex >= 0) {\n      console.log(`Other foreign value at index ${otherForeignIndex}:`, values[otherForeignIndex]);\n    }\n\n    // 전체 값 매핑\n    const dataRow = {};\n    headers.forEach((header, idx) => {\n      dataRow[header] = values[idx];\n    });\n    console.log('First data row:', dataRow);\n    console.log('외국인 field value:', dataRow['외국인']);\n    console.log('기타외국인 field value:', dataRow['기타외국인']);\n  }\n  console.log('=== FLOW DATA DEBUGGING END ===');\n  return {\n    headers,\n    foreignIndex,\n    otherForeignIndex\n  };\n}\nexport default debugFlowData;","map":{"version":3,"names":["debugFlowData","csvText","console","log","length","substring","charCodeAt","cleanText","lines","split","firstLine","headers","forEach","header","idx","Array","from","map","c","join","foreignIndex","findIndex","h","includes","otherForeignIndex","firstDataLine","values","dataRow"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/debugFlowData.js"],"sourcesContent":["// 외국인 수급 데이터 디버깅 전용 모듈\n\nexport function debugFlowData(csvText) {\n  console.log('=== FLOW DATA DEBUGGING START ===');\n  \n  // 1. Raw CSV 확인\n  console.log('CSV length:', csvText.length);\n  console.log('First 200 chars:', csvText.substring(0, 200));\n  \n  // 2. 첫 번째 문자 코드 확인\n  console.log('First char code:', csvText.charCodeAt(0));\n  console.log('Second char code:', csvText.charCodeAt(1));\n  console.log('Third char code:', csvText.charCodeAt(2));\n  \n  // 3. BOM 제거\n  let cleanText = csvText;\n  if (cleanText.charCodeAt(0) === 0xFEFF || cleanText.charCodeAt(0) === 65279) {\n    console.log('BOM detected, removing...');\n    cleanText = cleanText.substring(1);\n  }\n  \n  // 4. 첫 줄 파싱\n  const lines = cleanText.split(/\\r?\\n/);\n  console.log('Total lines:', lines.length);\n  \n  const firstLine = lines[0];\n  console.log('First line:', firstLine);\n  \n  // 5. 헤더 파싱\n  const headers = firstLine.split(',');\n  console.log('Headers count:', headers.length);\n  console.log('Headers:', headers);\n  \n  // 각 헤더의 정확한 내용 확인\n  headers.forEach((header, idx) => {\n    console.log(`Header ${idx}: \"${header}\" (length: ${header.length}, charCodes: ${Array.from(header).map(c => c.charCodeAt(0)).join(',')})`);\n  });\n  \n  // 6. 외국인 관련 헤더 찾기\n  const foreignIndex = headers.findIndex(h => h.includes('외국인') && !h.includes('기타'));\n  const otherForeignIndex = headers.findIndex(h => h.includes('기타외국인'));\n  \n  console.log('Foreign index:', foreignIndex);\n  console.log('Other foreign index:', otherForeignIndex);\n  \n  // 7. 첫 번째 데이터 행 파싱\n  if (lines.length > 1) {\n    const firstDataLine = lines[1];\n    const values = firstDataLine.split(',');\n    console.log('First data line values count:', values.length);\n    \n    if (foreignIndex >= 0) {\n      console.log(`Foreign value at index ${foreignIndex}:`, values[foreignIndex]);\n    }\n    if (otherForeignIndex >= 0) {\n      console.log(`Other foreign value at index ${otherForeignIndex}:`, values[otherForeignIndex]);\n    }\n    \n    // 전체 값 매핑\n    const dataRow = {};\n    headers.forEach((header, idx) => {\n      dataRow[header] = values[idx];\n    });\n    console.log('First data row:', dataRow);\n    console.log('외국인 field value:', dataRow['외국인']);\n    console.log('기타외국인 field value:', dataRow['기타외국인']);\n  }\n  \n  console.log('=== FLOW DATA DEBUGGING END ===');\n  \n  return {\n    headers,\n    foreignIndex,\n    otherForeignIndex\n  };\n}\n\nexport default debugFlowData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}