{"ast":null,"code":"import{parseCSV,toNum}from'./dataUtils';// =============================\n// Investor mapping & parsing (KRX style, Korean headers)\n// =============================\nexport const INVESTOR_KEYS=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\"];export function normalizeInvestorRow(r){console.log('Normalizing row:',Object.keys(r).slice(0,5));const get=function(k){let alts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const cand=[k,...alts];for(const key of cand){if(r[key]!==undefined){const value=toNum(r[key]);if(value!==0&&k===\"금융투자\"){console.log(\"Found \\uAE08\\uC735\\uD22C\\uC790: \".concat(value));}return value;}}return 0;};// 날짜 찾기 - 다양한 형식 지원\nlet dateValue=r.date||r.Date||r[\"날짜\"]||r[\"﻿날짜\"]||Object.values(r)[0];console.log('Date value found:',dateValue);const out={date:dateValue,금융투자:get(\"금융투자\",[\"Securities\",\"FinancialInvestment\"]),보험:get(\"보험\",[\"Insurance\"]),투신:get(\"투신\",[\"InvestmentTrust\"]),사모:get(\"사모\",[\"PrivateEquity\",\"사모펀드\"]),은행:get(\"은행\",[\"Bank\"]),기타금융:get(\"기타금융\",[\"OtherFinance\"]),연기금:get(\"연기금\",[\"Pension\"]),기타법인:get(\"기타법인\",[\"OtherCorporation\"]),개인:get(\"개인\",[\"Individual\"]),외국인:get(\"외국인\",[\"Foreigner\",\"Foreign\"]),기타외국인:get(\"기타외국인\",[\"OtherForeigner\"]),기관합계:get(\"기관합계\",[\"기관\",\"InstitutionTotal\"])};console.log('Normalized row output:',{date:out.date,금융투자:out.금융투자,개인:out.개인});// If 기관합계 not provided or zero, compute from parts (excluding 개인/외국인 계열)\nif(!out.기관합계){const parts=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\"];out.기관합계=parts.reduce((s,k)=>s+toNum(out[k]),0);}return out;}export function parseInvestorFlowCSV(text){console.log('parseInvestorFlowCSV called, text length:',text===null||text===void 0?void 0:text.length);console.log('First 200 chars of text:',text===null||text===void 0?void 0:text.substring(0,200));// 1) 일반 CSV/TSV 시도\nlet raw=parseCSV(text);console.log('Raw CSV parsed, rows:',raw.length);if(raw.length>0){console.log('First raw row:',raw[0]);}let parsed=raw.map(normalizeInvestorRow).filter(r=>r.date).sort((a,b)=>new Date(a.date)-new Date(b.date));console.log('After normalize and filter, rows:',parsed.length);if(parsed.length>0){console.log('First parsed row:',parsed[0]);}// 2) 실패하면: 헤더에 탭/콤마가 없고 공백이 있으면 공백 기준 파싱\nif(parsed.length===0){const lines=text.trim().split(/\\r?\\n/);const head=lines[0]||\"\";const looksWS=!head.includes(\",\")&&!head.includes(\"\\t\")&&/\\s+/.test(head);if(looksWS){// 공백으로 구분된 데이터를 직접 파싱\nconst headers=head.trim().split(/\\s+/);const rows=lines.slice(1).map(line=>{const values=line.trim().split(/\\s+/);const row={};headers.forEach((h,i)=>{row[h]=values[i]||\"\";});return row;});parsed=rows.map(normalizeInvestorRow).filter(r=>r.date).sort((a,b)=>new Date(a.date)-new Date(b.date));}}return parsed;}","map":{"version":3,"names":["parseCSV","toNum","INVESTOR_KEYS","normalizeInvestorRow","r","console","log","Object","keys","slice","get","k","alts","arguments","length","undefined","cand","key","value","concat","dateValue","date","Date","values","out","금융투자","보험","투신","사모","은행","기타금융","연기금","기타법인","개인","외국인","기타외국인","기관합계","parts","reduce","s","parseInvestorFlowCSV","text","substring","raw","parsed","map","filter","sort","a","b","lines","trim","split","head","looksWS","includes","test","headers","rows","line","row","forEach","h","i"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/investorUtils.js"],"sourcesContent":["import { parseCSV, toNum } from './dataUtils';\n\n// =============================\n// Investor mapping & parsing (KRX style, Korean headers)\n// =============================\nexport const INVESTOR_KEYS = [\n  \"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\"\n];\n\nexport function normalizeInvestorRow(r) {\n  console.log('Normalizing row:', Object.keys(r).slice(0, 5));\n  \n  const get = (k, alts=[]) => {\n    const cand = [k, ...alts];\n    for (const key of cand) {\n      if (r[key] !== undefined) {\n        const value = toNum(r[key]);\n        if (value !== 0 && k === \"금융투자\") {\n          console.log(`Found 금융투자: ${value}`);\n        }\n        return value;\n      }\n    }\n    return 0;\n  };\n  // 날짜 찾기 - 다양한 형식 지원\n  let dateValue = r.date || r.Date || r[\"날짜\"] || r[\"﻿날짜\"] || Object.values(r)[0];\n  console.log('Date value found:', dateValue);\n  \n  const out = {\n    date: dateValue,\n    금융투자: get(\"금융투자\", [\"Securities\",\"FinancialInvestment\"]),\n    보험: get(\"보험\", [\"Insurance\"]),\n    투신: get(\"투신\", [\"InvestmentTrust\"]),\n    사모: get(\"사모\", [\"PrivateEquity\",\"사모펀드\"]),\n    은행: get(\"은행\", [\"Bank\"]),\n    기타금융: get(\"기타금융\", [\"OtherFinance\"]),\n    연기금: get(\"연기금\", [\"Pension\"]),\n    기타법인: get(\"기타법인\", [\"OtherCorporation\"]),\n    개인: get(\"개인\", [\"Individual\"]),\n    외국인: get(\"외국인\", [\"Foreigner\",\"Foreign\"]),\n    기타외국인: get(\"기타외국인\", [\"OtherForeigner\"]),\n    기관합계: get(\"기관합계\", [\"기관\", \"InstitutionTotal\"]),\n  };\n  \n  console.log('Normalized row output:', { date: out.date, 금융투자: out.금융투자, 개인: out.개인 });\n  // If 기관합계 not provided or zero, compute from parts (excluding 개인/외국인 계열)\n  if (!out.기관합계) {\n    const parts = [\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\"];\n    out.기관합계 = parts.reduce((s,k)=>s+toNum(out[k]),0);\n  }\n  return out;\n}\n\nexport function parseInvestorFlowCSV(text) {\n  console.log('parseInvestorFlowCSV called, text length:', text?.length);\n  console.log('First 200 chars of text:', text?.substring(0, 200));\n  \n  // 1) 일반 CSV/TSV 시도\n  let raw = parseCSV(text);\n  console.log('Raw CSV parsed, rows:', raw.length);\n  if (raw.length > 0) {\n    console.log('First raw row:', raw[0]);\n  }\n  \n  let parsed = raw\n    .map(normalizeInvestorRow)\n    .filter((r) => r.date)\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\n  \n  console.log('After normalize and filter, rows:', parsed.length);\n  if (parsed.length > 0) {\n    console.log('First parsed row:', parsed[0]);\n  }\n\n  // 2) 실패하면: 헤더에 탭/콤마가 없고 공백이 있으면 공백 기준 파싱\n  if (parsed.length === 0) {\n    const lines = text.trim().split(/\\r?\\n/);\n    const head = lines[0] || \"\";\n    const looksWS = !head.includes(\",\") && !head.includes(\"\\t\") && /\\s+/.test(head);\n    if (looksWS) {\n      // 공백으로 구분된 데이터를 직접 파싱\n      const headers = head.trim().split(/\\s+/);\n      const rows = lines.slice(1).map(line => {\n        const values = line.trim().split(/\\s+/);\n        const row = {};\n        headers.forEach((h, i) => {\n          row[h] = values[i] || \"\";\n        });\n        return row;\n      });\n      parsed = rows\n        .map(normalizeInvestorRow)\n        .filter((r) => r.date)\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\n    }\n  }\n  return parsed;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}