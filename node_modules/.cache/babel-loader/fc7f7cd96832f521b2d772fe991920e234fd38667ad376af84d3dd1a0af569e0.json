{"ast":null,"code":"import _objectSpread from\"C:/Users/kloud/OneDrive/Desktop/Paradise/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// 수급 데이터 처리 전용 모듈\n// 날짜 매칭 문제를 완전히 해결\nimport{toNum}from'./dataUtils';import{debugFlowData}from'./debugFlowData';// 날짜를 YYYY-MM-DD 형식으로 정규화\nexport function normalizeDate(dateStr){if(!dateStr)return'';const str=String(dateStr).trim();// ISO 형식에서 날짜 부분만 추출\nif(str.includes('T')){return str.split('T')[0];}// YYYY/MM/DD를 YYYY-MM-DD로 변환\nif(str.includes('/')){const parts=str.split('/');if(parts.length===3){return\"\".concat(parts[0],\"-\").concat(parts[1].padStart(2,'0'),\"-\").concat(parts[2].padStart(2,'0'));}}// YYYY-M-D를 YYYY-MM-DD로 변환\nif(str.includes('-')){const parts=str.split('-');if(parts.length===3){return\"\".concat(parts[0],\"-\").concat(parts[1].padStart(2,'0'),\"-\").concat(parts[2].padStart(2,'0'));}}return str;}// CSV 텍스트를 파싱하여 수급 데이터 반환\nexport function parseFlowCSV(csvText){if(!csvText)return[];// BOM 제거 - 매우 철저하게\nlet cleanText=csvText;// UTF-8 BOM (EF BB BF)\nwhile(cleanText.charCodeAt(0)===0xEF&&cleanText.charCodeAt(1)===0xBB&&cleanText.charCodeAt(2)===0xBF){cleanText=cleanText.substring(3);}// UTF-16 BOM (FE FF or FF FE)\nwhile(cleanText.charCodeAt(0)===0xFEFF||cleanText.charCodeAt(0)===0xFFFE||cleanText.charCodeAt(0)===65279){cleanText=cleanText.substring(1);}// 다른 형태의 BOM 제거\ncleanText=cleanText.replace(/^\\uFEFF/,'');cleanText=cleanText.replace(/^\\xEF\\xBB\\xBF/,'');cleanText=cleanText.replace(/^﻿/,'');const lines=cleanText.trim().split(/\\r?\\n/);if(lines.length<2)return[];// 헤더 파싱\nconst firstLine=lines[0];const headers=firstLine.split(',').map((h,idx)=>{// 각 헤더 정리\nlet cleaned=h.trim();// 첫 번째 헤더는 특별히 BOM 제거\nif(idx===0){// 모든 가능한 BOM 제거\ncleaned=cleaned.replace(/^[\\uFEFF\\xEF\\xBB\\xBF]/,'');cleaned=cleaned.replace(/^﻿/,'');// \"날짜\"만 남기기\nif(cleaned.includes('날짜')){cleaned='날짜';}}return cleaned;});console.log('Clean headers:',headers);console.log('Headers includes 외국인?',headers.includes('외국인'));console.log('Headers includes 기타외국인?',headers.includes('기타외국인'));// 데이터 파싱\nconst data=[];for(let i=1;i<lines.length;i++){const values=lines[i].split(',');const row={};headers.forEach((header,idx)=>{var _values$idx;row[header]=((_values$idx=values[idx])===null||_values$idx===void 0?void 0:_values$idx.trim())||'';});data.push(row);}console.log('Parsed',data.length,'rows from CSV');if(data.length>0){console.log('First row keys:',Object.keys(data[0]));console.log('First row 외국인:',data[0]['외국인']);console.log('First row 기타외국인:',data[0]['기타외국인']);console.log('First row 개인:',data[0]['개인']);}return data;}// 수급 데이터를 정규화\nexport function normalizeFlowData(flowRows){if(!flowRows||flowRows.length===0)return[];return flowRows.map((row,idx)=>{// 날짜 찾기\nconst dateValue=row['날짜']||row['date']||row['Date']||Object.values(row)[0];const normalized={date:normalizeDate(dateValue),금융투자:toNum(row['금융투자']||0),보험:toNum(row['보험']||0),투신:toNum(row['투신']||0),사모:toNum(row['사모']||0),은행:toNum(row['은행']||0),기타금융:toNum(row['기타금융']||0),연기금:toNum(row['연기금']||0),기타법인:toNum(row['기타법인']||0),개인:toNum(row['개인']||0),외국인:toNum(row['외국인']||0),기타외국인:toNum(row['기타외국인']||0),기관합계:toNum(row['기관합계']||0)};if(idx===0){console.log('First normalized flow row:',{date:normalized.date,외국인:normalized.외국인,기타외국인:normalized.기타외국인,개인:normalized.개인,기관합계:normalized.기관합계});}// 기관합계가 없으면 계산\nif(!normalized.기관합계){normalized.기관합계=normalized.금융투자+normalized.보험+normalized.투신+normalized.사모+normalized.은행+normalized.기타금융+normalized.연기금+normalized.기타법인;}// 외국인합계 계산\nnormalized.외국인합계=normalized.외국인+normalized.기타외국인;return normalized;});}// 가격 데이터와 수급 데이터 병합\nexport function mergeFlowWithPrice(priceRows,flowRows){if(!priceRows||priceRows.length===0)return priceRows;if(!flowRows||flowRows.length===0)return priceRows;// 수급 데이터를 날짜별 Map으로 변환\nconst flowMap=new Map();flowRows.forEach(row=>{const date=normalizeDate(row.date);if(date){flowMap.set(date,row);}});console.log('Flow map created with',flowMap.size,'entries');console.log('Sample flow dates:',Array.from(flowMap.keys()).slice(0,5));// 누적 계산용 변수\nconst categories=['금융투자','보험','투신','사모','은행','기타금융','연기금','기타법인','개인','외국인','기타외국인','기관합계','외국인합계'];const cumulative={};categories.forEach(cat=>{cumulative[cat]=0;});let cumForeign=0;let cumInst=0;let cumPerson=0;// 가격 데이터에 수급 데이터 병합\nreturn priceRows.map((priceRow,idx)=>{const priceDate=normalizeDate(priceRow.date||priceRow.Date);const flowData=flowMap.get(priceDate);if(idx<5){console.log(\"\\n=== Merging row \".concat(idx,\" ===\"));console.log(\"Price date: \".concat(priceDate));console.log(\"Flow data found: \".concat(!!flowData));if(flowData){console.log('Flow data details:',{금융투자:flowData.금융투자,개인:flowData.개인,외국인:flowData.외국인,기타외국인:flowData.기타외국인,외국인합계:flowData.외국인합계,기관합계:flowData.기관합계});console.log('외국인 type:',typeof flowData.외국인);console.log('외국인합계 type:',typeof flowData.외국인합계);}else{console.log('NO FLOW DATA FOUND FOR THIS DATE!');}}// 수급 데이터가 있으면 사용, 없으면 0\nconst flows=flowData||{금융투자:0,보험:0,투신:0,사모:0,은행:0,기타금융:0,연기금:0,기타법인:0,개인:0,외국인:0,기타외국인:0,기관합계:0,외국인합계:0};// 누적 계산\ncategories.forEach(cat=>{cumulative[cat]+=flows[cat]||0;});cumForeign+=flows.외국인합계||0;cumInst+=flows.기관합계||0;cumPerson+=flows.개인||0;const result=_objectSpread(_objectSpread({},priceRow),{},{_flows:_objectSpread({},flows),_cum:_objectSpread({},cumulative),cumForeign,cumInst,cumPerson,foreign:flows.외국인합계||0,inst:flows.기관합계||0,person:flows.개인||0});if(idx<5){var _result$_flows,_result$_cum;console.log(\"Final merged result for row \".concat(idx,\":\"),{date:result.date,foreign:result.foreign,cumForeign:result.cumForeign,'_flows.외국인합계':(_result$_flows=result._flows)===null||_result$_flows===void 0?void 0:_result$_flows.외국인합계,'_cum.외국인합계':(_result$_cum=result._cum)===null||_result$_cum===void 0?void 0:_result$_cum.외국인합계});}return result;});}// 주식수 단위인지 판단\nexport function isVolumeUnit(flowRows){if(!flowRows||flowRows.length===0)return false;const firstRow=flowRows[0];// 숫자 필드만 추출 (날짜 제외)\nconst numericKeys=['금융투자','보험','투신','사모','은행','기타금융','연기금','기타법인','개인','외국인','기타외국인','기관합계'];const values=[];numericKeys.forEach(key=>{const val=firstRow[key];if(typeof val==='number'&&val!==0){values.push(Math.abs(val));}});if(values.length===0)return false;const maxValue=Math.max(...values);const isVolume=maxValue<1000000;// 100만 미만이면 주식수로 판단\nconsole.log('Volume unit detection:',{maxValue,isVolume,sampleValues:values.slice(0,5),'외국인':firstRow['외국인'],'기타외국인':firstRow['기타외국인']});return isVolume;}// 주식수를 금액으로 변환\nexport function convertVolumeToAmount(flowRows,priceRows){if(!flowRows||flowRows.length===0)return flowRows;if(!priceRows||priceRows.length===0)return flowRows;// 가격 데이터 Map 생성\nconst priceMap=new Map();priceRows.forEach(row=>{const date=normalizeDate(row.date||row.Date);if(date&&row.close){priceMap.set(date,toNum(row.close));}});// 수급 데이터 변환\nreturn flowRows.map((flowRow,idx)=>{const date=normalizeDate(flowRow.date);const price=priceMap.get(date);if(!price){console.log(\"No price found for date \".concat(date));return flowRow;}const converted=_objectSpread({},flowRow);const numericKeys=['금융투자','보험','투신','사모','은행','기타금융','연기금','기타법인','개인','외국인','기타외국인','기관합계'];numericKeys.forEach(key=>{if(typeof converted[key]==='number'){converted[key]=converted[key]*price;}});// 외국인합계 재계산 (변환 후)\nif(converted['외국인']!==undefined&&converted['기타외국인']!==undefined){converted['외국인합계']=(converted['외국인']||0)+(converted['기타외국인']||0);}if(idx===0){console.log('Volume to amount conversion:',{date,price,'외국인_before':flowRow['외국인'],'외국인_after':converted['외국인'],'외국인합계_after':converted['외국인합계']});}return converted;});}// 통합 처리 함수\nexport function processFlowData(flowCSV,priceRows){console.log('processFlowData called');if(!flowCSV||!priceRows){console.log('Missing flow CSV or price rows');return priceRows||[];}// 디버깅: 외국인 데이터 확인\ndebugFlowData(flowCSV);// 1. CSV 파싱\nconst rawFlowData=parseFlowCSV(flowCSV);console.log('Parsed',rawFlowData.length,'flow rows');if(rawFlowData.length===0){console.log('No flow data parsed');return priceRows;}// 2. 데이터 정규화\nlet flowData=normalizeFlowData(rawFlowData);console.log('Normalized',flowData.length,'flow rows');// 3. 주식수 단위 확인 및 변환\nif(isVolumeUnit(flowData)){console.log('Volume unit detected, converting to amount');flowData=convertVolumeToAmount(flowData,priceRows);}// 4. 가격 데이터와 병합\nconst merged=mergeFlowWithPrice(priceRows,flowData);console.log('Merged data created');return merged;}export default{normalizeDate,parseFlowCSV,normalizeFlowData,mergeFlowWithPrice,isVolumeUnit,convertVolumeToAmount,processFlowData};","map":{"version":3,"names":["toNum","debugFlowData","normalizeDate","dateStr","str","String","trim","includes","split","parts","length","concat","padStart","parseFlowCSV","csvText","cleanText","charCodeAt","substring","replace","lines","firstLine","headers","map","h","idx","cleaned","console","log","data","i","values","row","forEach","header","_values$idx","push","Object","keys","normalizeFlowData","flowRows","dateValue","normalized","date","금융투자","보험","투신","사모","은행","기타금융","연기금","기타법인","개인","외국인","기타외국인","기관합계","외국인합계","mergeFlowWithPrice","priceRows","flowMap","Map","set","size","Array","from","slice","categories","cumulative","cat","cumForeign","cumInst","cumPerson","priceRow","priceDate","Date","flowData","get","flows","result","_objectSpread","_flows","_cum","foreign","inst","person","_result$_flows","_result$_cum","isVolumeUnit","firstRow","numericKeys","key","val","Math","abs","maxValue","max","isVolume","sampleValues","convertVolumeToAmount","priceMap","close","flowRow","price","converted","undefined","processFlowData","flowCSV","rawFlowData","merged"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/flowDataProcessor.js"],"sourcesContent":["// 수급 데이터 처리 전용 모듈\n// 날짜 매칭 문제를 완전히 해결\n\nimport { toNum } from './dataUtils';\nimport { debugFlowData } from './debugFlowData';\n\n// 날짜를 YYYY-MM-DD 형식으로 정규화\nexport function normalizeDate(dateStr) {\n  if (!dateStr) return '';\n  \n  const str = String(dateStr).trim();\n  \n  // ISO 형식에서 날짜 부분만 추출\n  if (str.includes('T')) {\n    return str.split('T')[0];\n  }\n  \n  // YYYY/MM/DD를 YYYY-MM-DD로 변환\n  if (str.includes('/')) {\n    const parts = str.split('/');\n    if (parts.length === 3) {\n      return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n    }\n  }\n  \n  // YYYY-M-D를 YYYY-MM-DD로 변환\n  if (str.includes('-')) {\n    const parts = str.split('-');\n    if (parts.length === 3) {\n      return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n    }\n  }\n  \n  return str;\n}\n\n// CSV 텍스트를 파싱하여 수급 데이터 반환\nexport function parseFlowCSV(csvText) {\n  if (!csvText) return [];\n  \n  // BOM 제거 - 매우 철저하게\n  let cleanText = csvText;\n  \n  // UTF-8 BOM (EF BB BF)\n  while (cleanText.charCodeAt(0) === 0xEF && \n         cleanText.charCodeAt(1) === 0xBB && \n         cleanText.charCodeAt(2) === 0xBF) {\n    cleanText = cleanText.substring(3);\n  }\n  \n  // UTF-16 BOM (FE FF or FF FE)\n  while (cleanText.charCodeAt(0) === 0xFEFF || \n         cleanText.charCodeAt(0) === 0xFFFE ||\n         cleanText.charCodeAt(0) === 65279) {\n    cleanText = cleanText.substring(1);\n  }\n  \n  // 다른 형태의 BOM 제거\n  cleanText = cleanText.replace(/^\\uFEFF/, '');\n  cleanText = cleanText.replace(/^\\xEF\\xBB\\xBF/, '');\n  cleanText = cleanText.replace(/^﻿/, '');\n  \n  const lines = cleanText.trim().split(/\\r?\\n/);\n  if (lines.length < 2) return [];\n  \n  // 헤더 파싱\n  const firstLine = lines[0];\n  const headers = firstLine.split(',').map((h, idx) => {\n    // 각 헤더 정리\n    let cleaned = h.trim();\n    \n    // 첫 번째 헤더는 특별히 BOM 제거\n    if (idx === 0) {\n      // 모든 가능한 BOM 제거\n      cleaned = cleaned.replace(/^[\\uFEFF\\xEF\\xBB\\xBF]/, '');\n      cleaned = cleaned.replace(/^﻿/, '');\n      // \"날짜\"만 남기기\n      if (cleaned.includes('날짜')) {\n        cleaned = '날짜';\n      }\n    }\n    \n    return cleaned;\n  });\n  \n  console.log('Clean headers:', headers);\n  console.log('Headers includes 외국인?', headers.includes('외국인'));\n  console.log('Headers includes 기타외국인?', headers.includes('기타외국인'));\n  \n  // 데이터 파싱\n  const data = [];\n  for (let i = 1; i < lines.length; i++) {\n    const values = lines[i].split(',');\n    const row = {};\n    \n    headers.forEach((header, idx) => {\n      row[header] = values[idx]?.trim() || '';\n    });\n    \n    data.push(row);\n  }\n  \n  console.log('Parsed', data.length, 'rows from CSV');\n  if (data.length > 0) {\n    console.log('First row keys:', Object.keys(data[0]));\n    console.log('First row 외국인:', data[0]['외국인']);\n    console.log('First row 기타외국인:', data[0]['기타외국인']);\n    console.log('First row 개인:', data[0]['개인']);\n  }\n  \n  return data;\n}\n\n// 수급 데이터를 정규화\nexport function normalizeFlowData(flowRows) {\n  if (!flowRows || flowRows.length === 0) return [];\n  \n  return flowRows.map((row, idx) => {\n    // 날짜 찾기\n    const dateValue = row['날짜'] || row['date'] || row['Date'] || Object.values(row)[0];\n    \n    const normalized = {\n      date: normalizeDate(dateValue),\n      금융투자: toNum(row['금융투자'] || 0),\n      보험: toNum(row['보험'] || 0),\n      투신: toNum(row['투신'] || 0),\n      사모: toNum(row['사모'] || 0),\n      은행: toNum(row['은행'] || 0),\n      기타금융: toNum(row['기타금융'] || 0),\n      연기금: toNum(row['연기금'] || 0),\n      기타법인: toNum(row['기타법인'] || 0),\n      개인: toNum(row['개인'] || 0),\n      외국인: toNum(row['외국인'] || 0),\n      기타외국인: toNum(row['기타외국인'] || 0),\n      기관합계: toNum(row['기관합계'] || 0)\n    };\n    \n    if (idx === 0) {\n      console.log('First normalized flow row:', {\n        date: normalized.date,\n        외국인: normalized.외국인,\n        기타외국인: normalized.기타외국인,\n        개인: normalized.개인,\n        기관합계: normalized.기관합계\n      });\n    }\n    \n    // 기관합계가 없으면 계산\n    if (!normalized.기관합계) {\n      normalized.기관합계 = \n        normalized.금융투자 + normalized.보험 + normalized.투신 + \n        normalized.사모 + normalized.은행 + normalized.기타금융 + \n        normalized.연기금 + normalized.기타법인;\n    }\n    \n    // 외국인합계 계산\n    normalized.외국인합계 = normalized.외국인 + normalized.기타외국인;\n    \n    return normalized;\n  });\n}\n\n// 가격 데이터와 수급 데이터 병합\nexport function mergeFlowWithPrice(priceRows, flowRows) {\n  if (!priceRows || priceRows.length === 0) return priceRows;\n  if (!flowRows || flowRows.length === 0) return priceRows;\n  \n  // 수급 데이터를 날짜별 Map으로 변환\n  const flowMap = new Map();\n  flowRows.forEach(row => {\n    const date = normalizeDate(row.date);\n    if (date) {\n      flowMap.set(date, row);\n    }\n  });\n  \n  console.log('Flow map created with', flowMap.size, 'entries');\n  console.log('Sample flow dates:', Array.from(flowMap.keys()).slice(0, 5));\n  \n  // 누적 계산용 변수\n  const categories = ['금융투자', '보험', '투신', '사모', '은행', '기타금융', '연기금', '기타법인', '개인', '외국인', '기타외국인', '기관합계', '외국인합계'];\n  const cumulative = {};\n  categories.forEach(cat => { cumulative[cat] = 0; });\n  \n  let cumForeign = 0;\n  let cumInst = 0;\n  let cumPerson = 0;\n  \n  // 가격 데이터에 수급 데이터 병합\n  return priceRows.map((priceRow, idx) => {\n    const priceDate = normalizeDate(priceRow.date || priceRow.Date);\n    const flowData = flowMap.get(priceDate);\n    \n    if (idx < 5) {\n      console.log(`\\n=== Merging row ${idx} ===`);\n      console.log(`Price date: ${priceDate}`);\n      console.log(`Flow data found: ${!!flowData}`);\n      if (flowData) {\n        console.log('Flow data details:', { \n          금융투자: flowData.금융투자, \n          개인: flowData.개인,\n          외국인: flowData.외국인,\n          기타외국인: flowData.기타외국인,\n          외국인합계: flowData.외국인합계,\n          기관합계: flowData.기관합계\n        });\n        console.log('외국인 type:', typeof flowData.외국인);\n        console.log('외국인합계 type:', typeof flowData.외국인합계);\n      } else {\n        console.log('NO FLOW DATA FOUND FOR THIS DATE!');\n      }\n    }\n    \n    // 수급 데이터가 있으면 사용, 없으면 0\n    const flows = flowData || {\n      금융투자: 0, 보험: 0, 투신: 0, 사모: 0, 은행: 0,\n      기타금융: 0, 연기금: 0, 기타법인: 0, 개인: 0,\n      외국인: 0, 기타외국인: 0, 기관합계: 0, 외국인합계: 0\n    };\n    \n    // 누적 계산\n    categories.forEach(cat => {\n      cumulative[cat] += flows[cat] || 0;\n    });\n    \n    cumForeign += flows.외국인합계 || 0;\n    cumInst += flows.기관합계 || 0;\n    cumPerson += flows.개인 || 0;\n    \n    const result = {\n      ...priceRow,\n      _flows: { ...flows },\n      _cum: { ...cumulative },\n      cumForeign,\n      cumInst,\n      cumPerson,\n      foreign: flows.외국인합계 || 0,\n      inst: flows.기관합계 || 0,\n      person: flows.개인 || 0\n    };\n    \n    if (idx < 5) {\n      console.log(`Final merged result for row ${idx}:`, {\n        date: result.date,\n        foreign: result.foreign,\n        cumForeign: result.cumForeign,\n        '_flows.외국인합계': result._flows?.외국인합계,\n        '_cum.외국인합계': result._cum?.외국인합계\n      });\n    }\n    \n    return result;\n  });\n}\n\n// 주식수 단위인지 판단\nexport function isVolumeUnit(flowRows) {\n  if (!flowRows || flowRows.length === 0) return false;\n  \n  const firstRow = flowRows[0];\n  // 숫자 필드만 추출 (날짜 제외)\n  const numericKeys = ['금융투자', '보험', '투신', '사모', '은행', '기타금융', '연기금', '기타법인', '개인', '외국인', '기타외국인', '기관합계'];\n  \n  const values = [];\n  numericKeys.forEach(key => {\n    const val = firstRow[key];\n    if (typeof val === 'number' && val !== 0) {\n      values.push(Math.abs(val));\n    }\n  });\n  \n  if (values.length === 0) return false;\n  \n  const maxValue = Math.max(...values);\n  const isVolume = maxValue < 1000000; // 100만 미만이면 주식수로 판단\n  \n  console.log('Volume unit detection:', {\n    maxValue,\n    isVolume,\n    sampleValues: values.slice(0, 5),\n    '외국인': firstRow['외국인'],\n    '기타외국인': firstRow['기타외국인']\n  });\n  \n  return isVolume;\n}\n\n// 주식수를 금액으로 변환\nexport function convertVolumeToAmount(flowRows, priceRows) {\n  if (!flowRows || flowRows.length === 0) return flowRows;\n  if (!priceRows || priceRows.length === 0) return flowRows;\n  \n  // 가격 데이터 Map 생성\n  const priceMap = new Map();\n  priceRows.forEach(row => {\n    const date = normalizeDate(row.date || row.Date);\n    if (date && row.close) {\n      priceMap.set(date, toNum(row.close));\n    }\n  });\n  \n  // 수급 데이터 변환\n  return flowRows.map((flowRow, idx) => {\n    const date = normalizeDate(flowRow.date);\n    const price = priceMap.get(date);\n    \n    if (!price) {\n      console.log(`No price found for date ${date}`);\n      return flowRow;\n    }\n    \n    const converted = { ...flowRow };\n    const numericKeys = ['금융투자', '보험', '투신', '사모', '은행', '기타금융', '연기금', '기타법인', '개인', '외국인', '기타외국인', '기관합계'];\n    \n    numericKeys.forEach(key => {\n      if (typeof converted[key] === 'number') {\n        converted[key] = converted[key] * price;\n      }\n    });\n    \n    // 외국인합계 재계산 (변환 후)\n    if (converted['외국인'] !== undefined && converted['기타외국인'] !== undefined) {\n      converted['외국인합계'] = (converted['외국인'] || 0) + (converted['기타외국인'] || 0);\n    }\n    \n    if (idx === 0) {\n      console.log('Volume to amount conversion:', {\n        date,\n        price,\n        '외국인_before': flowRow['외국인'],\n        '외국인_after': converted['외국인'],\n        '외국인합계_after': converted['외국인합계']\n      });\n    }\n    \n    return converted;\n  });\n}\n\n// 통합 처리 함수\nexport function processFlowData(flowCSV, priceRows) {\n  console.log('processFlowData called');\n  \n  if (!flowCSV || !priceRows) {\n    console.log('Missing flow CSV or price rows');\n    return priceRows || [];\n  }\n  \n  // 디버깅: 외국인 데이터 확인\n  debugFlowData(flowCSV);\n  \n  // 1. CSV 파싱\n  const rawFlowData = parseFlowCSV(flowCSV);\n  console.log('Parsed', rawFlowData.length, 'flow rows');\n  \n  if (rawFlowData.length === 0) {\n    console.log('No flow data parsed');\n    return priceRows;\n  }\n  \n  // 2. 데이터 정규화\n  let flowData = normalizeFlowData(rawFlowData);\n  console.log('Normalized', flowData.length, 'flow rows');\n  \n  // 3. 주식수 단위 확인 및 변환\n  if (isVolumeUnit(flowData)) {\n    console.log('Volume unit detected, converting to amount');\n    flowData = convertVolumeToAmount(flowData, priceRows);\n  }\n  \n  // 4. 가격 데이터와 병합\n  const merged = mergeFlowWithPrice(priceRows, flowData);\n  console.log('Merged data created');\n  \n  return merged;\n}\n\nexport default {\n  normalizeDate,\n  parseFlowCSV,\n  normalizeFlowData,\n  mergeFlowWithPrice,\n  isVolumeUnit,\n  convertVolumeToAmount,\n  processFlowData\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}