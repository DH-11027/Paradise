{"ast":null,"code":"// 외국인 수급 데이터 디버깅 전용 모듈\nexport function debugFlowData(csvText){console.log('=== FLOW DATA DEBUGGING START ===');// 1. Raw CSV 확인\nconsole.log('CSV length:',csvText.length);console.log('First 200 chars:',csvText.substring(0,200));// 2. 첫 번째 문자 코드 확인\nconsole.log('First char code:',csvText.charCodeAt(0));console.log('Second char code:',csvText.charCodeAt(1));console.log('Third char code:',csvText.charCodeAt(2));// 3. BOM 제거\nlet cleanText=csvText;if(cleanText.charCodeAt(0)===0xFEFF||cleanText.charCodeAt(0)===65279){console.log('BOM detected, removing...');cleanText=cleanText.substring(1);}// 4. 첫 줄 파싱\nconst lines=cleanText.split(/\\r?\\n/);console.log('Total lines:',lines.length);const firstLine=lines[0];console.log('First line:',firstLine);// 5. 헤더 파싱\nconst headers=firstLine.split(',');console.log('Headers count:',headers.length);console.log('Headers:',headers);// 각 헤더의 정확한 내용 확인\nheaders.forEach((header,idx)=>{console.log(\"Header \".concat(idx,\": \\\"\").concat(header,\"\\\" (length: \").concat(header.length,\", charCodes: \").concat(Array.from(header).map(c=>c.charCodeAt(0)).join(','),\")\"));});// 6. 외국인 관련 헤더 찾기\nconst foreignIndex=headers.findIndex(h=>h.includes('외국인')&&!h.includes('기타'));const otherForeignIndex=headers.findIndex(h=>h.includes('기타외국인'));console.log('Foreign index:',foreignIndex);console.log('Other foreign index:',otherForeignIndex);// 7. 첫 번째 데이터 행 파싱\nif(lines.length>1){const firstDataLine=lines[1];const values=firstDataLine.split(',');console.log('First data line values count:',values.length);if(foreignIndex>=0){console.log(\"Foreign value at index \".concat(foreignIndex,\":\"),values[foreignIndex]);}if(otherForeignIndex>=0){console.log(\"Other foreign value at index \".concat(otherForeignIndex,\":\"),values[otherForeignIndex]);}// 전체 값 매핑\nconst dataRow={};headers.forEach((header,idx)=>{dataRow[header]=values[idx];});console.log('First data row:',dataRow);console.log('외국인 field value:',dataRow['외국인']);console.log('기타외국인 field value:',dataRow['기타외국인']);}console.log('=== FLOW DATA DEBUGGING END ===');return{headers,foreignIndex,otherForeignIndex};}export default debugFlowData;","map":{"version":3,"names":["debugFlowData","csvText","console","log","length","substring","charCodeAt","cleanText","lines","split","firstLine","headers","forEach","header","idx","concat","Array","from","map","c","join","foreignIndex","findIndex","h","includes","otherForeignIndex","firstDataLine","values","dataRow"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/debugFlowData.js"],"sourcesContent":["// 외국인 수급 데이터 디버깅 전용 모듈\n\nexport function debugFlowData(csvText) {\n  console.log('=== FLOW DATA DEBUGGING START ===');\n  \n  // 1. Raw CSV 확인\n  console.log('CSV length:', csvText.length);\n  console.log('First 200 chars:', csvText.substring(0, 200));\n  \n  // 2. 첫 번째 문자 코드 확인\n  console.log('First char code:', csvText.charCodeAt(0));\n  console.log('Second char code:', csvText.charCodeAt(1));\n  console.log('Third char code:', csvText.charCodeAt(2));\n  \n  // 3. BOM 제거\n  let cleanText = csvText;\n  if (cleanText.charCodeAt(0) === 0xFEFF || cleanText.charCodeAt(0) === 65279) {\n    console.log('BOM detected, removing...');\n    cleanText = cleanText.substring(1);\n  }\n  \n  // 4. 첫 줄 파싱\n  const lines = cleanText.split(/\\r?\\n/);\n  console.log('Total lines:', lines.length);\n  \n  const firstLine = lines[0];\n  console.log('First line:', firstLine);\n  \n  // 5. 헤더 파싱\n  const headers = firstLine.split(',');\n  console.log('Headers count:', headers.length);\n  console.log('Headers:', headers);\n  \n  // 각 헤더의 정확한 내용 확인\n  headers.forEach((header, idx) => {\n    console.log(`Header ${idx}: \"${header}\" (length: ${header.length}, charCodes: ${Array.from(header).map(c => c.charCodeAt(0)).join(',')})`);\n  });\n  \n  // 6. 외국인 관련 헤더 찾기\n  const foreignIndex = headers.findIndex(h => h.includes('외국인') && !h.includes('기타'));\n  const otherForeignIndex = headers.findIndex(h => h.includes('기타외국인'));\n  \n  console.log('Foreign index:', foreignIndex);\n  console.log('Other foreign index:', otherForeignIndex);\n  \n  // 7. 첫 번째 데이터 행 파싱\n  if (lines.length > 1) {\n    const firstDataLine = lines[1];\n    const values = firstDataLine.split(',');\n    console.log('First data line values count:', values.length);\n    \n    if (foreignIndex >= 0) {\n      console.log(`Foreign value at index ${foreignIndex}:`, values[foreignIndex]);\n    }\n    if (otherForeignIndex >= 0) {\n      console.log(`Other foreign value at index ${otherForeignIndex}:`, values[otherForeignIndex]);\n    }\n    \n    // 전체 값 매핑\n    const dataRow = {};\n    headers.forEach((header, idx) => {\n      dataRow[header] = values[idx];\n    });\n    console.log('First data row:', dataRow);\n    console.log('외국인 field value:', dataRow['외국인']);\n    console.log('기타외국인 field value:', dataRow['기타외국인']);\n  }\n  \n  console.log('=== FLOW DATA DEBUGGING END ===');\n  \n  return {\n    headers,\n    foreignIndex,\n    otherForeignIndex\n  };\n}\n\nexport default debugFlowData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}