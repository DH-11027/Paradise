{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { parseCSV, toNum } from \"../utils/dataUtils\";\nimport { parseInvestorFlowCSV } from \"../utils/investorUtils\";\nimport { computeIndicators, mergeInvestorFlows } from \"../utils/indicatorUtils\";\nimport { sampleOHLCV, sampleFlowBreakdown } from \"../constants/sampleData\";\nexport function useSelfTest() {\n  _s();\n  const [testLog, setTestLog] = useState([]);\n  const runSelfTests = useCallback(() => {\n    const logs = [];\n    try {\n      // Test 1: parseCSV basic\n      const t1 = parseCSV(\"Date,Open,High,Low,Close,Volume\\n2025-01-01,1,2,0.5,1.5,100\");\n      if (t1.length !== 1) throw new Error(\"parseCSV length mismatch\");\n      logs.push(\"✓ parseCSV loads 1 row\");\n\n      // Test 2: indicators range (MFI 0~100)\n      const {\n        data: ind\n      } = computeIndicators(sampleOHLCV, 0);\n      const mfiVals = ind.map(d => d.mfi14).filter(v => v != null);\n      if (mfiVals.some(v => v < 0 || v > 100)) throw new Error(\"MFI out of range\");\n      logs.push(\"✓ MFI(14) within 0-100\");\n\n      // Test 3: mergeInvestorFlows cumulative consistency (simple dataset)\n      const mergedTest = mergeInvestorFlows(sampleOHLCV, sampleFlowBreakdown);\n      const last = mergedTest[mergedTest.length - 1];\n      const sumForeign = sampleFlowBreakdown.reduce((a, b) => a + toNum(b.외국인 || 0) + toNum(b.기타외국인 || 0), 0);\n      const sumInst = sampleFlowBreakdown.reduce((a, b) => a + toNum(b.기관합계 || 0), 0);\n      if (last.cumForeign !== sumForeign || last.cumInst !== sumInst) throw new Error(\"Cumulative flow mismatch\");\n      logs.push(\"✓ Cumulative totals (외국인합계/기관합계) match\");\n\n      // Test 4: KRX-style row with scientific notation + 기관합계 auto-sum\n      const krxLine = \"날짜\\t금융투자\\t보험\\t투신\\t사모\\t은행\\t기타금융\\t연기금\\t기타법인\\t개인\\t외국인\\t기타외국인\\t기관합계\\n2020-08-10\\t-1.1E+09\\t-3.3E+08\\t-2.3E+08\\t44312800\\t0\\t0\\t8486650\\t143419300\\t5094342700\\t-3.6E+09\\t10170600\\t\";\n      const parsedKRX = parseInvestorFlowCSV(krxLine);\n      if (parsedKRX.length !== 1) throw new Error(\"KRX parse failed\");\n      const row = parsedKRX[0];\n      const parts = row.금융투자 + row.보험 + row.투신 + row.사모 + row.은행 + row.기타금융 + row.연기금 + row.기타법인;\n      if (Math.abs(row.기관합계 - parts) > 1) throw new Error(\"기관합계 autosum mismatch\");\n      logs.push(\"✓ KRX row parse + autosum OK\");\n\n      // Test: space-delimited KRX sample (user's format)\n      const spaceHeader = \"날짜 금융투자 보험 투신 사모 은행 기타금융 연기금 기타법인 개인 외국인 기타외국인 기관합계\";\n      const spaceRow = \"2020-08-10 -1120696400 -333365000 -229195850 44312800 0 0 8486650 143419300 5094342700 -3617474800 10170600 -1487038500\";\n      const parsedSpace = parseInvestorFlowCSV(`${spaceHeader}\\n${spaceRow}`);\n      if (parsedSpace.length !== 1 || typeof parsedSpace[0].기관합계 !== \"number\") {\n        throw new Error(\"Space-delimited parse failed\");\n      }\n      logs.push(\"✓ Space-delimited KRX CSV parsed (기관합계 recognized)\");\n      setTestLog(logs);\n    } catch (err) {\n      logs.push(`✗ Test failed: ${err.message}`);\n      setTestLog(logs);\n    }\n  }, []);\n  return {\n    testLog,\n    runSelfTests\n  };\n}\n_s(useSelfTest, \"yFDJB7mFaWMn+Hmzyr1urapiGNI=\");","map":{"version":3,"names":["useState","useCallback","parseCSV","toNum","parseInvestorFlowCSV","computeIndicators","mergeInvestorFlows","sampleOHLCV","sampleFlowBreakdown","useSelfTest","_s","testLog","setTestLog","runSelfTests","logs","t1","length","Error","push","data","ind","mfiVals","map","d","mfi14","filter","v","some","mergedTest","last","sumForeign","reduce","a","b","외국인","기타외국인","sumInst","기관합계","cumForeign","cumInst","krxLine","parsedKRX","row","parts","금융투자","보험","투신","사모","은행","기타금융","연기금","기타법인","Math","abs","spaceHeader","spaceRow","parsedSpace","err","message"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/hooks/useSelfTest.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { parseCSV, toNum } from \"../utils/dataUtils\";\nimport { parseInvestorFlowCSV } from \"../utils/investorUtils\";\nimport { computeIndicators, mergeInvestorFlows } from \"../utils/indicatorUtils\";\nimport { sampleOHLCV, sampleFlowBreakdown } from \"../constants/sampleData\";\n\nexport function useSelfTest() {\n  const [testLog, setTestLog] = useState([]);\n\n  const runSelfTests = useCallback(() => {\n    const logs = [];\n    try {\n      // Test 1: parseCSV basic\n      const t1 = parseCSV(\"Date,Open,High,Low,Close,Volume\\n2025-01-01,1,2,0.5,1.5,100\");\n      if (t1.length !== 1) throw new Error(\"parseCSV length mismatch\");\n      logs.push(\"✓ parseCSV loads 1 row\");\n\n      // Test 2: indicators range (MFI 0~100)\n      const { data: ind } = computeIndicators(sampleOHLCV, 0);\n      const mfiVals = ind.map((d) => d.mfi14).filter((v) => v != null);\n      if (mfiVals.some((v) => v < 0 || v > 100)) throw new Error(\"MFI out of range\");\n      logs.push(\"✓ MFI(14) within 0-100\");\n\n      // Test 3: mergeInvestorFlows cumulative consistency (simple dataset)\n      const mergedTest = mergeInvestorFlows(sampleOHLCV, sampleFlowBreakdown);\n      const last = mergedTest[mergedTest.length - 1];\n      const sumForeign = sampleFlowBreakdown.reduce((a, b) => a + toNum(b.외국인 || 0) + toNum(b.기타외국인 || 0), 0);\n      const sumInst = sampleFlowBreakdown.reduce((a, b) => a + toNum(b.기관합계 || 0), 0);\n      if (last.cumForeign !== sumForeign || last.cumInst !== sumInst) throw new Error(\"Cumulative flow mismatch\");\n      logs.push(\"✓ Cumulative totals (외국인합계/기관합계) match\");\n\n      // Test 4: KRX-style row with scientific notation + 기관합계 auto-sum\n      const krxLine = \"날짜\\t금융투자\\t보험\\t투신\\t사모\\t은행\\t기타금융\\t연기금\\t기타법인\\t개인\\t외국인\\t기타외국인\\t기관합계\\n2020-08-10\\t-1.1E+09\\t-3.3E+08\\t-2.3E+08\\t44312800\\t0\\t0\\t8486650\\t143419300\\t5094342700\\t-3.6E+09\\t10170600\\t\";\n      const parsedKRX = parseInvestorFlowCSV(krxLine);\n      if (parsedKRX.length !== 1) throw new Error(\"KRX parse failed\");\n      const row = parsedKRX[0];\n      const parts = row.금융투자 + row.보험 + row.투신 + row.사모 + row.은행 + row.기타금융 + row.연기금 + row.기타법인;\n      if (Math.abs(row.기관합계 - parts) > 1) throw new Error(\"기관합계 autosum mismatch\");\n      logs.push(\"✓ KRX row parse + autosum OK\");\n\n      // Test: space-delimited KRX sample (user's format)\n      const spaceHeader = \"날짜 금융투자 보험 투신 사모 은행 기타금융 연기금 기타법인 개인 외국인 기타외국인 기관합계\";\n      const spaceRow = \"2020-08-10 -1120696400 -333365000 -229195850 44312800 0 0 8486650 143419300 5094342700 -3617474800 10170600 -1487038500\";\n      const parsedSpace = parseInvestorFlowCSV(`${spaceHeader}\\n${spaceRow}`);\n      if (parsedSpace.length !== 1 || typeof parsedSpace[0].기관합계 !== \"number\") {\n        throw new Error(\"Space-delimited parse failed\");\n      }\n      logs.push(\"✓ Space-delimited KRX CSV parsed (기관합계 recognized)\");\n\n      setTestLog(logs);\n    } catch (err) {\n      logs.push(`✗ Test failed: ${err.message}`);\n      setTestLog(logs);\n    }\n  }, []);\n\n  return { testLog, runSelfTests };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}