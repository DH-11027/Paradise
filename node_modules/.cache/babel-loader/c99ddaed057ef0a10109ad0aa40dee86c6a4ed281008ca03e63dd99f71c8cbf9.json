{"ast":null,"code":"import _objectSpread from\"C:/Users/kloud/OneDrive/Desktop/Paradise/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{toNum,fmtDate}from'./dataUtils';// Compute Indicators: OBV, MFI(14), ATR(14), Anchored VWAP\nexport function computeIndicators(rows,anchorIndex){if(!rows||rows.length===0)return{data:[],obvMax:0};const data=rows.map(r=>_objectSpread({},r));let obv=0;let prevClose=null;let prevTp=null;const posMF=Array(data.length).fill(0);const negMF=Array(data.length).fill(0);const trArr=Array(data.length).fill(0);for(let i=0;i<data.length;i++){const h=toNum(data[i].high);const l=toNum(data[i].low);const c=toNum(data[i].close);const v=toNum(data[i].volume);// OBV\nif(prevClose!==null){if(c>prevClose)obv+=v;else if(c<prevClose)obv-=v;}data[i].obv=obv;// Typical price & money flow (MFI)\nconst tp=(h+l+c)/3;if(prevTp!==null){const mf=tp*v;if(tp>prevTp)posMF[i]=mf;else if(tp<prevTp)negMF[i]=mf;}data[i].tp=tp;// True Range (for ATR)\nif(prevClose!==null){const tr=Math.max(h-l,Math.abs(h-prevClose),Math.abs(l-prevClose));trArr[i]=tr;}else{trArr[i]=h-l;}prevClose=c;prevTp=tp;}// Rolling ATR (SMA 14)\nconst period=14;for(let i=0;i<data.length;i++){if(i<period){data[i].atr14=null;}else{let sum=0;for(let k=i-period+1;k<=i;k++)sum+=trArr[k];data[i].atr14=sum/period;}}// Rolling MFI(14)\nfor(let i=0;i<data.length;i++){if(i<period){data[i].mfi14=null;}else{let pos=0,neg=0;for(let k=i-period+1;k<=i;k++){pos+=posMF[k];neg+=negMF[k];}const mr=neg===0?100:pos/neg;data[i].mfi14=100-100/(1+mr);}}// Anchored VWAP from selected anchorIndex (default = first index)\nconst start=Math.max(0,Math.min(anchorIndex!==null&&anchorIndex!==void 0?anchorIndex:0,data.length-1));let cumPV=0,cumV=0;for(let i=0;i<data.length;i++){if(i<start){data[i].avwap=null;continue;}const v=toNum(data[i].volume);const p=data[i].tp;cumPV+=p*v;cumV+=v;data[i].avwap=cumV?cumPV/cumV:null;}const obvMax=Math.max(...data.map(d=>Math.abs(d.obv||0)));return{data,obvMax};}// 주식수 단위인지 판단 (값이 너무 작으면 주식수로 간주)\nfunction detectVolumeUnit(flowRows){if(!flowRows||flowRows.length===0)return false;// 첫 번째 데이터의 값들을 확인\nconst firstRow=flowRows[0];const numericKeys=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\"];const values=numericKeys.map(k=>toNum(firstRow[k])).filter(v=>v!==0);if(values.length===0)return false;const maxAbsValue=Math.max(...values.map(Math.abs));// 최대 절대값이 1,000,000 미만이면 주식수 단위로 판단\nconst isVolume=maxAbsValue<1000000;return isVolume;}export function mergeInvestorFlows(priceRows,flowRows){console.log('mergeInvestorFlows called');console.log('- priceRows:',priceRows===null||priceRows===void 0?void 0:priceRows.length);console.log('- flowRows:',flowRows===null||flowRows===void 0?void 0:flowRows.length);if(!flowRows||flowRows.length===0){console.log('No flow rows, returning price rows only');return priceRows;}// 주식수 단위인지 판단\nconst isVolumeUnit=detectVolumeUnit(flowRows);// 주식수 단위면 가격을 곱해서 금액으로 변환\nlet processedFlowRows=flowRows;if(isVolumeUnit){processedFlowRows=flowRows.map(fr=>{const dateKey=fmtDate(fr.date||fr.Date||fr[\"날짜\"]);const priceRow=priceRows.find(p=>fmtDate(p.date||p.Date||p[\"날짜\"])===dateKey);if(!priceRow||!priceRow.close)return fr;const multiplier=toNum(priceRow.close);const converted=_objectSpread({},fr);// 숫자 필드만 변환\nconst numericKeys=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\"];numericKeys.forEach(key=>{if(fr[key]!==undefined){converted[key]=toNum(fr[key])*multiplier;}});return converted;});}// 날짜별 Map 생성\nconst byDate=new Map();processedFlowRows.forEach((r,idx)=>{const dateKey=fmtDate(r.date||r.Date||r[\"날짜\"]);byDate.set(dateKey,r);if(idx<3){console.log(\"Flow row \".concat(idx,\" - date: \").concat(r.date||r.Date||r[\"날짜\"],\" -> key: \").concat(dateKey));}});console.log('byDate Map size:',byDate.size);console.log('byDate keys sample:',Array.from(byDate.keys()).slice(0,3));// Prepare cumulative map for detailed categories\nconst cats=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\",\"외국인합계\"];const cumMap=Object.fromEntries(cats.map(k=>[k,0]));let cumF=0,cumI=0,cumP=0;return priceRows.map((p,idx)=>{var _flowData$foreign,_flowData$institution;const priceDate=p.date||p.Date||p[\"날짜\"];const key=fmtDate(priceDate);const fr=byDate.get(key);if(idx<3){console.log(\"Price row \".concat(idx,\" - date: \").concat(priceDate,\" -> key: \").concat(key,\" -> matched: \").concat(!!fr));if(fr){console.log('Matched flow data:',{금융투자:fr[\"금융투자\"],개인:fr[\"개인\"]});}}const flowData=fr||{};// Compose details\nconst details={금융투자:toNum(flowData[\"금융투자\"])||0,보험:toNum(flowData[\"보험\"])||0,투신:toNum(flowData[\"투신\"])||0,사모:toNum(flowData[\"사모\"])||0,은행:toNum(flowData[\"은행\"])||0,기타금융:toNum(flowData[\"기타금융\"])||0,연기금:toNum(flowData[\"연기금\"])||0,기타법인:toNum(flowData[\"기타법인\"])||0,개인:toNum(flowData[\"개인\"])||0,외국인:toNum(flowData[\"외국인\"])||0,기타외국인:toNum(flowData[\"기타외국인\"])||0,기관합계:toNum(flowData[\"기관합계\"])||0};if(!details.기관합계){details.기관합계=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\"].reduce((s,k)=>s+toNum(details[k]),0);}details[\"외국인합계\"]=details.외국인+details.기타외국인;// For backward-compatibility (existing charts): foreign/institution totals\nconst f=toNum((_flowData$foreign=flowData.foreign)!==null&&_flowData$foreign!==void 0?_flowData$foreign:details[\"외국인합계\"])||0;const i=toNum((_flowData$institution=flowData.institution)!==null&&_flowData$institution!==void 0?_flowData$institution:details[\"기관합계\"])||0;const person=details.개인||0;if(idx<3){console.log(\"Row \".concat(idx,\" details:\"),{금융투자:details.금융투자,개인:details.개인,기관합계:details.기관합계,외국인합계:details.외국인합계});}cumF+=f;cumI+=i;cumP+=person;cats.forEach(k=>cumMap[k]+=toNum(details[k]||0));return _objectSpread(_objectSpread({},p),{},{foreign:f,inst:i,person,cumForeign:cumF,cumInst:cumI,cumPerson:cumP,_flows:details,_cum:_objectSpread({},cumMap)});});}","map":{"version":3,"names":["toNum","fmtDate","computeIndicators","rows","anchorIndex","length","data","obvMax","map","r","_objectSpread","obv","prevClose","prevTp","posMF","Array","fill","negMF","trArr","i","h","high","l","low","c","close","v","volume","tp","mf","tr","Math","max","abs","period","atr14","sum","k","mfi14","pos","neg","mr","start","min","cumPV","cumV","avwap","p","d","detectVolumeUnit","flowRows","firstRow","numericKeys","values","filter","maxAbsValue","isVolume","mergeInvestorFlows","priceRows","console","log","isVolumeUnit","processedFlowRows","fr","dateKey","date","Date","priceRow","find","multiplier","converted","forEach","key","undefined","byDate","Map","idx","set","concat","size","from","keys","slice","cats","cumMap","Object","fromEntries","cumF","cumI","cumP","_flowData$foreign","_flowData$institution","priceDate","get","금융투자","개인","flowData","details","보험","투신","사모","은행","기타금융","연기금","기타법인","외국인","기타외국인","기관합계","reduce","s","f","foreign","institution","person","외국인합계","inst","cumForeign","cumInst","cumPerson","_flows","_cum"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/indicatorUtils.js"],"sourcesContent":["import { toNum, fmtDate } from './dataUtils';\n\n// Compute Indicators: OBV, MFI(14), ATR(14), Anchored VWAP\nexport function computeIndicators(rows, anchorIndex) {\n  if (!rows || rows.length === 0) return { data: [], obvMax: 0 };\n  const data = rows.map((r) => ({ ...r }));\n  let obv = 0;\n  let prevClose = null;\n  let prevTp = null;\n  const posMF = Array(data.length).fill(0);\n  const negMF = Array(data.length).fill(0);\n  const trArr = Array(data.length).fill(0);\n\n  for (let i = 0; i < data.length; i++) {\n    const h = toNum(data[i].high);\n    const l = toNum(data[i].low);\n    const c = toNum(data[i].close);\n    const v = toNum(data[i].volume);\n\n    // OBV\n    if (prevClose !== null) {\n      if (c > prevClose) obv += v;\n      else if (c < prevClose) obv -= v;\n    }\n    data[i].obv = obv;\n\n    // Typical price & money flow (MFI)\n    const tp = (h + l + c) / 3;\n    if (prevTp !== null) {\n      const mf = tp * v;\n      if (tp > prevTp) posMF[i] = mf; else if (tp < prevTp) negMF[i] = mf;\n    }\n    data[i].tp = tp;\n\n    // True Range (for ATR)\n    if (prevClose !== null) {\n      const tr = Math.max(h - l, Math.abs(h - prevClose), Math.abs(l - prevClose));\n      trArr[i] = tr;\n    } else {\n      trArr[i] = h - l;\n    }\n\n    prevClose = c;\n    prevTp = tp;\n  }\n\n  // Rolling ATR (SMA 14)\n  const period = 14;\n  for (let i = 0; i < data.length; i++) {\n    if (i < period) {\n      data[i].atr14 = null;\n    } else {\n      let sum = 0;\n      for (let k = i - period + 1; k <= i; k++) sum += trArr[k];\n      data[i].atr14 = sum / period;\n    }\n  }\n\n  // Rolling MFI(14)\n  for (let i = 0; i < data.length; i++) {\n    if (i < period) {\n      data[i].mfi14 = null;\n    } else {\n      let pos = 0, neg = 0;\n      for (let k = i - period + 1; k <= i; k++) { pos += posMF[k]; neg += negMF[k]; }\n      const mr = neg === 0 ? 100 : pos / neg;\n      data[i].mfi14 = 100 - 100 / (1 + mr);\n    }\n  }\n\n  // Anchored VWAP from selected anchorIndex (default = first index)\n  const start = Math.max(0, Math.min(anchorIndex ?? 0, data.length - 1));\n  let cumPV = 0, cumV = 0;\n  for (let i = 0; i < data.length; i++) {\n    if (i < start) { data[i].avwap = null; continue; }\n    const v = toNum(data[i].volume);\n    const p = data[i].tp;\n    cumPV += p * v;\n    cumV += v;\n    data[i].avwap = cumV ? cumPV / cumV : null;\n  }\n\n  const obvMax = Math.max(...data.map((d) => Math.abs(d.obv || 0)));\n  return { data, obvMax };\n}\n\n// 주식수 단위인지 판단 (값이 너무 작으면 주식수로 간주)\nfunction detectVolumeUnit(flowRows) {\n  if (!flowRows || flowRows.length === 0) return false;\n  \n  // 첫 번째 데이터의 값들을 확인\n  const firstRow = flowRows[0];\n  const numericKeys = [\"금융투자\", \"보험\", \"투신\", \"사모\", \"은행\", \"기타금융\", \"연기금\", \"기타법인\", \"개인\", \"외국인\", \"기타외국인\"];\n  const values = numericKeys.map(k => toNum(firstRow[k])).filter(v => v !== 0);\n  \n  if (values.length === 0) return false;\n  \n  const maxAbsValue = Math.max(...values.map(Math.abs));\n  \n  // 최대 절대값이 1,000,000 미만이면 주식수 단위로 판단\n  const isVolume = maxAbsValue < 1000000;\n  return isVolume;\n}\n\nexport function mergeInvestorFlows(priceRows, flowRows) {\n  console.log('mergeInvestorFlows called');\n  console.log('- priceRows:', priceRows?.length);\n  console.log('- flowRows:', flowRows?.length);\n  \n  if (!flowRows || flowRows.length === 0) {\n    console.log('No flow rows, returning price rows only');\n    return priceRows;\n  }\n  \n  // 주식수 단위인지 판단\n  const isVolumeUnit = detectVolumeUnit(flowRows);\n  \n  // 주식수 단위면 가격을 곱해서 금액으로 변환\n  let processedFlowRows = flowRows;\n  if (isVolumeUnit) {\n    processedFlowRows = flowRows.map(fr => {\n      const dateKey = fmtDate(fr.date || fr.Date || fr[\"날짜\"]);\n      const priceRow = priceRows.find(p => fmtDate(p.date || p.Date || p[\"날짜\"]) === dateKey);\n      \n      if (!priceRow || !priceRow.close) return fr;\n      \n      const multiplier = toNum(priceRow.close);\n      const converted = { ...fr };\n      \n      // 숫자 필드만 변환\n      const numericKeys = [\"금융투자\", \"보험\", \"투신\", \"사모\", \"은행\", \"기타금융\", \"연기금\", \"기타법인\", \"개인\", \"외국인\", \"기타외국인\", \"기관합계\"];\n      numericKeys.forEach(key => {\n        if (fr[key] !== undefined) {\n          converted[key] = toNum(fr[key]) * multiplier;\n        }\n      });\n      \n      return converted;\n    });\n  }\n  \n  // 날짜별 Map 생성\n  const byDate = new Map();\n  processedFlowRows.forEach((r, idx) => {\n    const dateKey = fmtDate(r.date || r.Date || r[\"날짜\"]);\n    byDate.set(dateKey, r);\n    if (idx < 3) {\n      console.log(`Flow row ${idx} - date: ${r.date || r.Date || r[\"날짜\"]} -> key: ${dateKey}`);\n    }\n  });\n  \n  console.log('byDate Map size:', byDate.size);\n  console.log('byDate keys sample:', Array.from(byDate.keys()).slice(0, 3));\n\n  // Prepare cumulative map for detailed categories\n  const cats = [\n    \"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\",\"외국인합계\"\n  ];\n  const cumMap = Object.fromEntries(cats.map((k) => [k, 0]));\n\n  let cumF = 0, cumI = 0, cumP = 0;\n\n  return priceRows.map((p, idx) => {\n    const priceDate = p.date || p.Date || p[\"날짜\"];\n    const key = fmtDate(priceDate);\n    const fr = byDate.get(key);\n    \n    if (idx < 3) {\n      console.log(`Price row ${idx} - date: ${priceDate} -> key: ${key} -> matched: ${!!fr}`);\n      if (fr) {\n        console.log('Matched flow data:', { 금융투자: fr[\"금융투자\"], 개인: fr[\"개인\"] });\n      }\n    }\n    \n    const flowData = fr || {};\n\n    // Compose details\n    const details = {\n      금융투자: toNum(flowData[\"금융투자\"]) || 0,\n      보험: toNum(flowData[\"보험\"]) || 0,\n      투신: toNum(flowData[\"투신\"]) || 0,\n      사모: toNum(flowData[\"사모\"]) || 0,\n      은행: toNum(flowData[\"은행\"]) || 0,\n      기타금융: toNum(flowData[\"기타금융\"]) || 0,\n      연기금: toNum(flowData[\"연기금\"]) || 0,\n      기타법인: toNum(flowData[\"기타법인\"]) || 0,\n      개인: toNum(flowData[\"개인\"]) || 0,\n      외국인: toNum(flowData[\"외국인\"]) || 0,\n      기타외국인: toNum(flowData[\"기타외국인\"]) || 0,\n      기관합계: toNum(flowData[\"기관합계\"]) || 0,\n    };\n    if (!details.기관합계) {\n      details.기관합계 = [\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\"].reduce((s,k)=>s+toNum(details[k]),0);\n    }\n    details[\"외국인합계\"] = details.외국인 + details.기타외국인;\n\n    // For backward-compatibility (existing charts): foreign/institution totals\n    const f = toNum(flowData.foreign ?? details[\"외국인합계\"]) || 0;\n    const i = toNum(flowData.institution ?? details[\"기관합계\"]) || 0;\n    const person = details.개인 || 0;\n    \n    if (idx < 3) {\n      console.log(`Row ${idx} details:`, { \n        금융투자: details.금융투자, \n        개인: details.개인,\n        기관합계: details.기관합계,\n        외국인합계: details.외국인합계\n      });\n    }\n\n    cumF += f; cumI += i; cumP += person;\n    cats.forEach((k) => (cumMap[k] += toNum(details[k] || 0)));\n\n    return {\n      ...p,\n      foreign: f,\n      inst: i,\n      person,\n      cumForeign: cumF,\n      cumInst: cumI,\n      cumPerson: cumP,\n      _flows: details,\n      _cum: { ...cumMap },\n    };\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}