{"ast":null,"code":"// =============================\n// Institutional-Grade Analytics Module  \n// Advanced Quantitative Trading Algorithms\n// Real Money Making System v2.0\n// =============================\n\nimport { toNum } from './dataUtils';\n\n// Market Regime Detection\nexport function detectMarketRegime(data, index) {\n  if (!data || index < 20) return 'UNKNOWN';\n  const prev20 = data.slice(Math.max(0, index - 20), index + 1);\n  const prev60 = data.slice(Math.max(0, index - 60), index + 1);\n\n  // 1. Trend Analysis\n  const ma20 = prev20.reduce((sum, d) => sum + d.close, 0) / prev20.length;\n  const ma60 = prev60.reduce((sum, d) => sum + d.close, 0) / prev60.length;\n  const currentPrice = data[index].close;\n  const trendStrength = (currentPrice - ma60) / ma60;\n  const momentum = (ma20 - ma60) / ma60;\n\n  // 2. Volatility Regime\n  const returns20 = [];\n  for (let i = 1; i < prev20.length; i++) {\n    returns20.push((prev20[i].close - prev20[i - 1].close) / prev20[i - 1].close);\n  }\n  const vol20 = Math.sqrt(returns20.reduce((sum, r) => sum + r * r, 0) / returns20.length) * Math.sqrt(252);\n\n  // 3. Volume Regime\n  const avgVol20 = prev20.reduce((sum, d) => sum + d.volume, 0) / prev20.length;\n  const avgVol60 = prev60.reduce((sum, d) => sum + d.volume, 0) / prev60.length;\n  const volumeTrend = (avgVol20 - avgVol60) / avgVol60;\n\n  // Regime Classification\n  if (trendStrength > 0.1 && momentum > 0.05 && vol20 < 0.3) {\n    return 'BULL_TRENDING';\n  } else if (trendStrength < -0.1 && momentum < -0.05) {\n    return 'BEAR_TRENDING';\n  } else if (vol20 > 0.4) {\n    return 'HIGH_VOLATILITY';\n  } else if (Math.abs(trendStrength) < 0.05 && vol20 < 0.2) {\n    return 'RANGE_BOUND';\n  } else if (volumeTrend > 0.5 && Math.abs(trendStrength) > 0.05) {\n    return 'BREAKOUT_POTENTIAL';\n  } else {\n    return 'TRANSITIONING';\n  }\n}\n\n// Advanced Order Flow Analysis\nfunction analyzeOrderFlowImbalance(data, index) {\n  if (!data || index < 5) return 0;\n  const recent5 = data.slice(Math.max(0, index - 4), index + 1);\n  let buyPressure = 0;\n  let sellPressure = 0;\n  recent5.forEach(d => {\n    // VWAP 대비 종가 위치로 매수/매도 압력 추정\n    const vwap = (d.high + d.low + d.close) / 3;\n    const pressure = (d.close - vwap) / vwap;\n    if (pressure > 0) {\n      buyPressure += pressure * d.volume;\n    } else {\n      sellPressure += Math.abs(pressure) * d.volume;\n    }\n  });\n  const totalPressure = buyPressure + sellPressure;\n  if (totalPressure === 0) return 0;\n  return (buyPressure - sellPressure) / totalPressure;\n}\n\n// Institutional Accumulation/Distribution Detection\nfunction detectInstitutionalActivity(data, index) {\n  var _current$_flows, _current$_flows2;\n  if (!data || index < 20) return {\n    phase: 'UNKNOWN',\n    strength: 0\n  };\n  const current = data[index];\n  const prev20 = data.slice(Math.max(0, index - 20), index);\n\n  // Volume-Price Analysis\n  const avgVolume = prev20.reduce((sum, d) => sum + d.volume, 0) / prev20.length;\n  const volumeRatio = current.volume / avgVolume;\n\n  // Price Movement Analysis\n  const priceChange = (current.close - prev20[0].close) / prev20[0].close;\n  const dailyRange = (current.high - current.low) / current.close;\n\n  // Flow Analysis\n  const foreignFlow = toNum(((_current$_flows = current._flows) === null || _current$_flows === void 0 ? void 0 : _current$_flows.외국인합계) || 0);\n  const instFlow = toNum(((_current$_flows2 = current._flows) === null || _current$_flows2 === void 0 ? void 0 : _current$_flows2.기관합계) || 0);\n  const smartMoney = foreignFlow + instFlow;\n\n  // Pattern Recognition\n  if (volumeRatio > 2 && smartMoney > 0 && dailyRange < 0.02) {\n    return {\n      phase: 'ACCUMULATION',\n      strength: Math.min(100, volumeRatio * 25)\n    };\n  } else if (volumeRatio > 1.5 && smartMoney < 0 && priceChange < -0.01) {\n    return {\n      phase: 'DISTRIBUTION',\n      strength: Math.min(100, volumeRatio * 20)\n    };\n  } else if (volumeRatio < 0.5 && Math.abs(priceChange) < 0.01) {\n    return {\n      phase: 'CONSOLIDATION',\n      strength: 30\n    };\n  } else if (smartMoney > 0 && priceChange > 0) {\n    return {\n      phase: 'MARKUP',\n      strength: 50\n    };\n  } else if (smartMoney < 0 && priceChange < 0) {\n    return {\n      phase: 'MARKDOWN',\n      strength: 50\n    };\n  }\n  return {\n    phase: 'NEUTRAL',\n    strength: 0\n  };\n}\n\n// 기관급 스마트머니 점수 계산 (0-100 스케일)\nexport function calculateInstitutionalSmartMoneyScore(data, index) {\n  var _current$_flows3, _current$_flows4, _current$_flows5;\n  // 최소 20일 데이터만 있으면 작동\n  if (!data || index < 20 || index >= data.length) return {\n    score: 50,\n    breakdown: {},\n    interpretation: \"데이터 부족\"\n  };\n  const current = data[index];\n  const prev20 = data.slice(Math.max(0, index - 20), index);\n  const prev60 = data.slice(Math.max(0, index - Math.min(60, index)), index); // 데이터가 60일 미만이면 있는 만큼만 사용\n\n  let breakdown = {};\n  let totalScore = 0;\n\n  // Market Regime Adjustment\n  const marketRegime = detectMarketRegime(data, index);\n  let regimeMultiplier = 1;\n  switch (marketRegime) {\n    case 'BULL_TRENDING':\n      regimeMultiplier = 1.2;\n      break;\n    case 'BEAR_TRENDING':\n      regimeMultiplier = 0.8;\n      break;\n    case 'HIGH_VOLATILITY':\n      regimeMultiplier = 0.7;\n      break;\n    case 'BREAKOUT_POTENTIAL':\n      regimeMultiplier = 1.3;\n      break;\n    default:\n      regimeMultiplier = 1;\n  }\n  breakdown.marketRegime = marketRegime;\n\n  // 1. Enhanced Flow Analysis with Order Flow Imbalance (30점)\n  const foreignFlow = toNum(((_current$_flows3 = current._flows) === null || _current$_flows3 === void 0 ? void 0 : _current$_flows3.외국인합계) || 0);\n  const instFlow = toNum(((_current$_flows4 = current._flows) === null || _current$_flows4 === void 0 ? void 0 : _current$_flows4.기관합계) || 0);\n  const retailFlow = toNum(((_current$_flows5 = current._flows) === null || _current$_flows5 === void 0 ? void 0 : _current$_flows5.개인) || 0);\n  const totalAbsFlow = Math.abs(foreignFlow) + Math.abs(instFlow) + Math.abs(retailFlow);\n  if (totalAbsFlow > 0) {\n    const smartMoneyNet = foreignFlow + instFlow;\n    const flowIntensity = smartMoneyNet / totalAbsFlow * 20;\n\n    // Order Flow Imbalance 추가\n    const orderFlowImbalance = analyzeOrderFlowImbalance(data, index);\n    const enhancedFlow = flowIntensity + orderFlowImbalance * 10;\n    breakdown.flowIntensity = Math.max(-30, Math.min(30, enhancedFlow));\n    totalScore += breakdown.flowIntensity;\n  }\n\n  // 2. Multi-Timeframe Flow Persistence (25점)\n  const recent5Days = data.slice(Math.max(0, index - 4), index + 1);\n  const recent10Days = data.slice(Math.max(0, index - 9), index + 1);\n\n  // Short-term persistence\n  let shortTermScore = 0;\n  let consecutiveDays = 0;\n  let lastDirection = 0;\n  recent5Days.forEach(d => {\n    var _d$_flows, _d$_flows2;\n    const daySmartMoney = toNum(((_d$_flows = d._flows) === null || _d$_flows === void 0 ? void 0 : _d$_flows.외국인합계) || 0) + toNum(((_d$_flows2 = d._flows) === null || _d$_flows2 === void 0 ? void 0 : _d$_flows2.기관합계) || 0);\n    const direction = daySmartMoney > 0 ? 1 : daySmartMoney < 0 ? -1 : 0;\n    if (direction === lastDirection && direction !== 0) {\n      consecutiveDays++;\n    } else {\n      consecutiveDays = direction !== 0 ? 1 : 0;\n    }\n    lastDirection = direction;\n  });\n  shortTermScore = Math.min(15, consecutiveDays * 3 * lastDirection);\n\n  // Long-term consistency\n  const positiveDays = recent10Days.filter(d => {\n    var _d$_flows3, _d$_flows4;\n    const flow = toNum(((_d$_flows3 = d._flows) === null || _d$_flows3 === void 0 ? void 0 : _d$_flows3.외국인합계) || 0) + toNum(((_d$_flows4 = d._flows) === null || _d$_flows4 === void 0 ? void 0 : _d$_flows4.기관합계) || 0);\n    return flow > 0;\n  }).length;\n  const longTermScore = (positiveDays / recent10Days.length - 0.5) * 20;\n  breakdown.persistence = shortTermScore + longTermScore;\n  totalScore += breakdown.persistence;\n\n  // 3. 개인 역행 지표 (15점)\n  // 스마트머니와 개인의 반대 포지션 = 긍정 신호\n  const smartTotal = foreignFlow + instFlow;\n  if (smartTotal > 0 && retailFlow < 0) {\n    breakdown.retailDivergence = 15;\n  } else if (smartTotal < 0 && retailFlow > 0) {\n    breakdown.retailDivergence = -15;\n  } else {\n    breakdown.retailDivergence = 0;\n  }\n  totalScore += breakdown.retailDivergence;\n\n  // 4. 누적 수급 모멘텀 (15점)\n  // 20일 vs 60일 누적 수급 비교\n  const cum20 = prev20.reduce((sum, d) => {\n    var _d$_flows5, _d$_flows6;\n    return sum + toNum(((_d$_flows5 = d._flows) === null || _d$_flows5 === void 0 ? void 0 : _d$_flows5.외국인합계) || 0) + toNum(((_d$_flows6 = d._flows) === null || _d$_flows6 === void 0 ? void 0 : _d$_flows6.기관합계) || 0);\n  }, 0);\n  const cum60 = prev60.reduce((sum, d) => {\n    var _d$_flows7, _d$_flows8;\n    return sum + toNum(((_d$_flows7 = d._flows) === null || _d$_flows7 === void 0 ? void 0 : _d$_flows7.외국인합계) || 0) + toNum(((_d$_flows8 = d._flows) === null || _d$_flows8 === void 0 ? void 0 : _d$_flows8.기관합계) || 0);\n  }, 0);\n  if (prev60.length > 0) {\n    const avg20 = cum20 / prev20.length;\n    const avg60 = cum60 / prev60.length;\n    const momentum = avg20 > avg60 ? 15 : avg20 < avg60 * 0.5 ? -15 : 0;\n    breakdown.momentum = momentum;\n    totalScore += momentum;\n  }\n\n  // 5. 대량 거래 감지 (10점)\n  // 평균 대비 3배 이상 거래량에서의 수급\n  const avgVolume = prev20.reduce((sum, d) => sum + toNum(d.volume || 0), 0) / prev20.length;\n  const isHighVolume = current.volume > avgVolume * 2.5;\n  if (isHighVolume) {\n    if (smartTotal > 0) {\n      breakdown.volumeSignal = 10;\n    } else if (smartTotal < 0) {\n      breakdown.volumeSignal = -10;\n    }\n  } else {\n    breakdown.volumeSignal = 0;\n  }\n  totalScore += breakdown.volumeSignal;\n\n  // 6. Institutional Activity Pattern (20점)\n  const instActivity = detectInstitutionalActivity(data, index);\n  let instScore = 0;\n  if (instActivity.phase === 'ACCUMULATION') {\n    instScore = instActivity.strength * 0.2;\n  } else if (instActivity.phase === 'DISTRIBUTION') {\n    instScore = -instActivity.strength * 0.2;\n  } else if (instActivity.phase === 'MARKUP' && foreignFlow > 0) {\n    instScore = 15;\n  } else if (instActivity.phase === 'MARKDOWN' && foreignFlow < 0) {\n    instScore = -15;\n  }\n\n  // Foreign Leadership Premium\n  if (foreignFlow > 0 && instFlow <= 0) {\n    instScore += 5; // 외국인 단독 매수\n  } else if (foreignFlow > 0 && instFlow > 0 && foreignFlow > instFlow * 1.5) {\n    instScore += 10; // 외국인 주도 매수\n  } else if (foreignFlow < 0 && instFlow >= 0) {\n    instScore -= 5; // 외국인 단독 매도\n  } else if (foreignFlow < 0 && instFlow < 0 && foreignFlow < instFlow * 1.5) {\n    instScore -= 10; // 외국인 주도 매도\n  }\n  breakdown.institutionalPattern = Math.max(-20, Math.min(20, instScore));\n  totalScore += breakdown.institutionalPattern;\n\n  // Apply Market Regime Multiplier\n  totalScore *= regimeMultiplier;\n\n  // 정규화 (0-100 스케일)\n  const normalizedScore = Math.max(0, Math.min(100, totalScore + 50));\n  return {\n    score: normalizedScore,\n    breakdown,\n    interpretation: getSmartMoneyInterpretation(normalizedScore)\n  };\n}\n\n// Dynamic Risk-Adjusted Position Sizing\nexport function calculateOptimalPositionSize(data, index, portfolioValue = 100000000) {\n  if (!data || index < 20) return {\n    size: 0,\n    leverage: 1,\n    reasoning: ['최소 20일 데이터 필요']\n  };\n  const prev20 = data.slice(Math.max(0, index - 20), index);\n  const returns = [];\n  for (let i = 1; i < prev20.length; i++) {\n    returns.push((prev20[i].close - prev20[i - 1].close) / prev20[i - 1].close);\n  }\n\n  // Kelly Criterion Modified\n  const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const winRate = returns.filter(r => r > 0).length / returns.length;\n  const avgWin = returns.filter(r => r > 0).reduce((a, b) => a + b, 0) / Math.max(1, returns.filter(r => r > 0).length);\n  const avgLoss = Math.abs(returns.filter(r => r < 0).reduce((a, b) => a + b, 0) / Math.max(1, returns.filter(r => r < 0).length));\n  if (avgLoss === 0) return {\n    size: 0,\n    leverage: 1,\n    reasoning: ['Insufficient loss data']\n  };\n  const kellyFraction = (winRate * avgWin - (1 - winRate) * avgLoss) / avgWin;\n  const safeKelly = Math.max(0, Math.min(0.25, kellyFraction * 0.25)); // 1/4 Kelly for safety\n\n  // Volatility Adjustment\n  const vol = Math.sqrt(returns.reduce((sum, r) => sum + r * r, 0) / returns.length) * Math.sqrt(252);\n  const volAdjustment = Math.max(0.5, Math.min(1, 0.2 / vol)); // Lower position for high vol\n\n  // Liquidity Constraint\n  const avgVolume = prev20.reduce((sum, d) => sum + d.volume * d.close, 0) / prev20.length;\n  const maxPosition = avgVolume * 0.01; // Max 1% of daily volume\n\n  const optimalSize = Math.min(portfolioValue * safeKelly * volAdjustment, maxPosition);\n  const reasoning = [`Kelly Fraction: ${(kellyFraction * 100).toFixed(2)}%`, `Volatility Adjustment: ${(volAdjustment * 100).toFixed(0)}%`, `Win Rate: ${(winRate * 100).toFixed(1)}%`, `Risk-Adjusted Size: ${(safeKelly * 100).toFixed(2)}% of portfolio`];\n  return {\n    size: Math.round(optimalSize),\n    leverage: safeKelly > 0.15 ? 1.5 : 1,\n    reasoning\n  };\n}\n\n// Advanced Technical Signal Composite\nfunction calculateAdvancedTechnicalSignal(data, index) {\n  var _data, _data2;\n  if (!data || index < 60) return 0;\n  const current = data[index];\n  let signal = 0;\n\n  // 1. Momentum Quality (not just strength)\n  const rsi = current.rsi14 || 50;\n  const rsiPrev = ((_data = data[index - 1]) === null || _data === void 0 ? void 0 : _data.rsi14) || 50;\n  const rsiSlope = rsi - rsiPrev;\n  if (rsi < 30 && rsiSlope > 0) signal += 20; // Oversold reversal\n  else if (rsi > 70 && rsiSlope < 0) signal -= 20; // Overbought reversal\n  else if (rsi > 50 && rsi < 70 && rsiSlope > 0) signal += 10; // Healthy momentum\n  else if (rsi < 50 && rsi > 30 && rsiSlope < 0) signal -= 10; // Weakening\n\n  // 2. MACD Histogram Acceleration\n  if (current.macdHistogram && (_data2 = data[index - 1]) !== null && _data2 !== void 0 && _data2.macdHistogram) {\n    const histAccel = current.macdHistogram - data[index - 1].macdHistogram;\n    signal += Math.max(-15, Math.min(15, histAccel * 100));\n  }\n\n  // 3. Volume-Price Confirmation\n  const volMA = data.slice(index - 10, index).reduce((sum, d) => sum + d.volume, 0) / 10;\n  const priceChange = (current.close - data[index - 1].close) / data[index - 1].close;\n  const volRatio = current.volume / volMA;\n  if (priceChange > 0 && volRatio > 1.5) signal += 15; // Volume confirms upside\n  else if (priceChange < 0 && volRatio > 1.5) signal -= 15; // Volume confirms downside\n  else if (Math.abs(priceChange) > 0.02 && volRatio < 0.7) signal -= 10; // No volume support\n\n  // 4. Support/Resistance Proximity\n  const recent20High = Math.max(...data.slice(index - 20, index).map(d => d.high));\n  const recent20Low = Math.min(...data.slice(index - 20, index).map(d => d.low));\n  const range = recent20High - recent20Low;\n  const positionInRange = (current.close - recent20Low) / range;\n  if (positionInRange < 0.2) signal += 10; // Near support\n  else if (positionInRange > 0.8) signal -= 10; // Near resistance\n\n  return signal;\n}\n\n// 기관급 종합 매매 신호 계산\nexport function calculateInstitutionalTradingSignal(data, index) {\n  // 최소 20일 데이터만 있으면 작동\n  if (!data || index < 20 || index >= data.length) return {\n    signal: 0,\n    factors: [],\n    positionSize: {},\n    recommendation: {\n      action: \"WAIT\",\n      description: \"데이터 수집 중\"\n    }\n  };\n  const current = data[index];\n  const factors = [];\n  let totalSignal = 0;\n\n  // Market Regime Context\n  const marketRegime = detectMarketRegime(data, index);\n  factors.push({\n    name: \"시장 레짐\",\n    value: marketRegime,\n    weight: 0.0,\n    description: marketRegime\n  });\n\n  // 1. Advanced Trend Analysis with Multiple Timeframes\n  const adx = calculateADX(data, index, 14);\n  const trendDirection = current.close > current.ma20 ? 1 : -1;\n  let trendScore = 0;\n  if (adx > 40) {\n    trendScore = trendDirection * 30; // Strong trend\n  } else if (adx > 25) {\n    trendScore = trendDirection * 20; // Moderate trend\n  } else if (adx < 20) {\n    trendScore = 0; // No trend\n  }\n\n  // Multi-timeframe confirmation\n  if (current.ma5 > current.ma20 && current.ma20 > current.ma60) {\n    trendScore = Math.max(trendScore, 25); // Perfect alignment\n  } else if (current.ma5 < current.ma20 && current.ma20 < current.ma60) {\n    trendScore = Math.min(trendScore, -25); // Perfect downtrend\n  }\n  factors.push({\n    name: \"멀티타임프레임 추세\",\n    value: trendScore,\n    weight: 0.20\n  });\n  totalSignal += trendScore * 0.20;\n\n  // 2. Enhanced Technical Composite\n  const technicalSignal = calculateAdvancedTechnicalSignal(data, index);\n  factors.push({\n    name: \"고급 기술적 신호\",\n    value: technicalSignal,\n    weight: 0.25\n  });\n  totalSignal += technicalSignal * 0.25;\n\n  // 3. 변동성 조정 수익률 (Volatility-Adjusted Return)\n  const volAdjReturn = calculateVolatilityAdjustedReturn(data, index);\n  factors.push({\n    name: \"변동성 조정 수익률\",\n    value: volAdjReturn * 100,\n    weight: 0.15\n  });\n  totalSignal += volAdjReturn * 15;\n\n  // 4. 시장 미시구조 (Market Microstructure)\n  const microstructure = analyzeMarketMicrostructure(data, index);\n  factors.push({\n    name: \"시장 미시구조\",\n    value: microstructure * 100,\n    weight: 0.20\n  });\n  totalSignal += microstructure * 20;\n\n  // 5. Enhanced Smart Money Flow with Institutional Patterns\n  const smartMoneyScore = calculateInstitutionalSmartMoneyScore(data, index);\n  const instActivity = detectInstitutionalActivity(data, index);\n  let smartMoneySignal = (smartMoneyScore.score - 50) / 50;\n\n  // Boost signal based on institutional phase\n  if (instActivity.phase === 'ACCUMULATION') {\n    smartMoneySignal = Math.min(1, smartMoneySignal * 1.5);\n  } else if (instActivity.phase === 'DISTRIBUTION') {\n    smartMoneySignal = Math.max(-1, smartMoneySignal * 1.5);\n  }\n  factors.push({\n    name: \"기관 스마트머니\",\n    value: smartMoneySignal * 100,\n    weight: 0.30,\n    phase: instActivity.phase\n  });\n  totalSignal += smartMoneySignal * 30;\n\n  // 6. Order Flow Analysis\n  const orderFlowImbalance = analyzeOrderFlowImbalance(data, index);\n  factors.push({\n    name: \"주문 흐름 불균형\",\n    value: orderFlowImbalance * 100,\n    weight: 0.15\n  });\n  totalSignal += orderFlowImbalance * 15;\n\n  // Dynamic Risk Adjustment based on Market Regime\n  let riskMultiplier = 1;\n  switch (marketRegime) {\n    case 'HIGH_VOLATILITY':\n      riskMultiplier = 0.6;\n      break;\n    case 'BEAR_TRENDING':\n      riskMultiplier = 0.7;\n      break;\n    case 'BULL_TRENDING':\n      riskMultiplier = 1.2;\n      break;\n    case 'BREAKOUT_POTENTIAL':\n      riskMultiplier = 1.1;\n      break;\n    default:\n      riskMultiplier = calculateRiskAdjustment(data, index);\n  }\n  totalSignal *= riskMultiplier;\n\n  // Calculate Position Sizing\n  const positionSize = calculateOptimalPositionSize(data, index);\n  return {\n    signal: Math.max(-100, Math.min(100, totalSignal)),\n    factors,\n    recommendation: getTradingRecommendation(totalSignal),\n    confidence: calculateSignalConfidence(factors),\n    positionSize,\n    marketRegime,\n    riskMultiplier\n  };\n}\n\n// ADX (Average Directional Index) 계산\nfunction calculateADX(data, index, period = 14) {\n  if (index < period * 2) return 0;\n  let plusDM = 0,\n    minusDM = 0,\n    tr = 0;\n  for (let i = index - period + 1; i <= index; i++) {\n    const curr = data[i];\n    const prev = data[i - 1];\n    const highDiff = curr.high - prev.high;\n    const lowDiff = prev.low - curr.low;\n    if (highDiff > lowDiff && highDiff > 0) plusDM += highDiff;\n    if (lowDiff > highDiff && lowDiff > 0) minusDM += lowDiff;\n    const trueRange = Math.max(curr.high - curr.low, Math.abs(curr.high - prev.close), Math.abs(curr.low - prev.close));\n    tr += trueRange;\n  }\n  const plusDI = plusDM / tr * 100;\n  const minusDI = minusDM / tr * 100;\n  const dx = Math.abs(plusDI - minusDI) / (plusDI + minusDI) * 100;\n  return dx;\n}\n\n// Stochastic 오실레이터 계산\nfunction calculateStochastic(data, index, period = 14) {\n  if (index < period) return 50;\n  const slice = data.slice(index - period + 1, index + 1);\n  const highs = slice.map(d => d.high);\n  const lows = slice.map(d => d.low);\n  const highest = Math.max(...highs);\n  const lowest = Math.min(...lows);\n  const current = data[index].close;\n  if (highest === lowest) return 50;\n  return (current - lowest) / (highest - lowest) * 100;\n}\n\n// 복합 오실레이터 점수\nfunction calculateOscillatorComposite(rsi, mfi, stochastic) {\n  let score = 0;\n\n  // RSI 신호\n  if (rsi < 30) score += 30;else if (rsi < 40) score += 15;else if (rsi > 70) score -= 30;else if (rsi > 60) score -= 15;\n\n  // MFI 신호\n  if (mfi < 20) score += 25;else if (mfi < 35) score += 10;else if (mfi > 80) score -= 25;else if (mfi > 65) score -= 10;\n\n  // Stochastic 신호\n  if (stochastic < 20) score += 20;else if (stochastic < 35) score += 10;else if (stochastic > 80) score -= 20;else if (stochastic > 65) score -= 10;\n\n  // 다이버전스 보너스\n  if (rsi < 40 && mfi < 40 && stochastic < 40) score *= 1.5;\n  if (rsi > 60 && mfi > 60 && stochastic > 60) score *= 1.5;\n  return Math.max(-100, Math.min(100, score));\n}\n\n// 변동성 조정 수익률\nfunction calculateVolatilityAdjustedReturn(data, index, lookback = 20) {\n  if (index < lookback) return 0;\n  const returns = [];\n  for (let i = index - lookback + 1; i <= index; i++) {\n    const ret = (data[i].close - data[i - 1].close) / data[i - 1].close;\n    returns.push(ret);\n  }\n  const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n  const volatility = Math.sqrt(variance);\n  if (volatility === 0) return 0;\n\n  // Sharpe Ratio 스타일 계산\n  return avgReturn / volatility;\n}\n\n// 시장 미시구조 분석\nfunction analyzeMarketMicrostructure(data, index) {\n  if (index < 20) return 0;\n  const current = data[index];\n  const prev20 = data.slice(index - 20, index);\n  let score = 0;\n\n  // 1. 가격 효율성 (얼마나 부드럽게 움직이는가)\n  const priceEfficiency = calculatePriceEfficiency(prev20);\n  score += priceEfficiency * 0.3;\n\n  // 2. 거래량 프로파일 (정상 분포 vs 이상 패턴)\n  const volumeProfile = analyzeVolumeProfile(prev20, current);\n  score += volumeProfile * 0.3;\n\n  // 3. 스프레드 추정 (고저 차이 기반)\n  const spreadQuality = estimateSpreadQuality(current, prev20);\n  score += spreadQuality * 0.4;\n  return score;\n}\n\n// 가격 효율성 계산\nfunction calculatePriceEfficiency(data) {\n  if (data.length < 2) return 0;\n  let totalMove = 0;\n  let netMove = Math.abs(data[data.length - 1].close - data[0].close);\n  for (let i = 1; i < data.length; i++) {\n    totalMove += Math.abs(data[i].close - data[i - 1].close);\n  }\n  if (totalMove === 0) return 0;\n\n  // 효율성이 높을수록 좋음 (1에 가까울수록 직선 움직임)\n  const efficiency = netMove / totalMove;\n  return efficiency > 0.7 ? 1 : efficiency > 0.3 ? 0.5 : -0.5;\n}\n\n// 거래량 프로파일 분석\nfunction analyzeVolumeProfile(historical, current) {\n  const avgVolume = historical.reduce((sum, d) => sum + d.volume, 0) / historical.length;\n  const volumeRatio = current.volume / avgVolume;\n\n  // 적정 거래량 (평균의 0.8 ~ 2배)\n  if (volumeRatio >= 0.8 && volumeRatio <= 2) {\n    return 0.5;\n  } else if (volumeRatio > 3) {\n    // 이상 거래량\n    return current.close > historical[historical.length - 1].close ? 1 : -1;\n  } else if (volumeRatio < 0.5) {\n    // 거래량 부족\n    return -0.5;\n  }\n  return 0;\n}\n\n// 스프레드 품질 추정\nfunction estimateSpreadQuality(current, historical) {\n  const avgRange = historical.reduce((sum, d) => sum + (d.high - d.low), 0) / historical.length;\n  const currentRange = current.high - current.low;\n\n  // 스프레드가 평균보다 좁으면 유동성 좋음\n  if (currentRange < avgRange * 0.7) return 1;\n  if (currentRange < avgRange) return 0.5;\n  if (currentRange > avgRange * 1.5) return -1;\n  return 0;\n}\n\n// 위험 조정 계수\nfunction calculateRiskAdjustment(data, index) {\n  if (index < 60) return 1;\n  const recent20 = data.slice(index - 20, index);\n  const volatility = calculateVolatility(recent20);\n\n  // 변동성에 따른 조정 (높은 변동성 = 낮은 신뢰도)\n  if (volatility > 0.03) return 0.7; // 일 3% 이상 변동성\n  if (volatility > 0.02) return 0.85;\n  if (volatility < 0.01) return 1.1; // 낮은 변동성 = 높은 신뢰도\n\n  return 1;\n}\n\n// 변동성 계산\nfunction calculateVolatility(data) {\n  if (data.length < 2) return 0;\n  const returns = [];\n  for (let i = 1; i < data.length; i++) {\n    returns.push((data[i].close - data[i - 1].close) / data[i - 1].close);\n  }\n  const avg = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avg, 2), 0) / returns.length;\n  return Math.sqrt(variance);\n}\n\n// 신호 신뢰도 계산\nfunction calculateSignalConfidence(factors) {\n  // 모든 팩터가 같은 방향을 가리키면 높은 신뢰도\n  const positiveFactors = factors.filter(f => f.value > 0).length;\n  const negativeFactors = factors.filter(f => f.value < 0).length;\n  const unanimity = Math.max(positiveFactors, negativeFactors) / factors.length;\n  const avgStrength = factors.reduce((sum, f) => sum + Math.abs(f.value), 0) / factors.length;\n  return Math.round((unanimity * 0.6 + avgStrength / 100 * 0.4) * 100);\n}\n\n// 스마트머니 해석 (투자자 친화적)\nfunction getSmartMoneyInterpretation(score) {\n  if (score >= 80) return \"💰 기관/외인 대량 매집 중 → 강력 매수 시그널\";\n  if (score >= 65) return \"📈 스마트머니 순매수 → 매수 고려\";\n  if (score >= 50) return \"⚖️ 수급 균형 → 관망 추천\";\n  if (score >= 35) return \"📉 스마트머니 이탈 시작 → 주의 필요\";\n  return \"🚨 기관/외인 대량 매도 → 매도 고려\";\n}\n\n// Enhanced Trading Recommendation with Risk Management\nfunction getTradingRecommendation(signal) {\n  const urgency = Math.abs(signal) > 70 ? \"즉시\" : \"단계적\";\n  const confidence = Math.min(100, Math.abs(signal) * 1.2);\n  if (signal >= 70) {\n    return {\n      action: \"STRONG BUY\",\n      description: `${urgency} 매수 포지션 구축`,\n      targetAllocation: \"15-20%\",\n      stopLoss: \"진입가 -3%\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= 40) {\n    return {\n      action: \"BUY\",\n      description: \"분할 매수 진행\",\n      targetAllocation: \"10-15%\",\n      stopLoss: \"진입가 -5%\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= 15) {\n    return {\n      action: \"ACCUMULATE\",\n      description: \"저가 분할매수 검토\",\n      targetAllocation: \"5-10%\",\n      stopLoss: \"진입가 -7%\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= -15) {\n    return {\n      action: \"HOLD\",\n      description: \"현 포지션 유지\",\n      targetAllocation: \"현재 유지\",\n      stopLoss: \"동적 조정\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= -40) {\n    return {\n      action: \"REDUCE\",\n      description: \"단계적 비중 축소\",\n      targetAllocation: \"50% 감소\",\n      stopLoss: \"즉시 실행\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= -70) {\n    return {\n      action: \"SELL\",\n      description: \"포지션 청산 진행\",\n      targetAllocation: \"20% 이하\",\n      stopLoss: \"N/A\",\n      confidence: `${confidence}%`\n    };\n  }\n  return {\n    action: \"EXIT\",\n    description: `${urgency} 전량 청산`,\n    targetAllocation: \"0%\",\n    stopLoss: \"N/A\",\n    confidence: `${confidence}%`\n  };\n}\n\n// Enhanced VWAP 계산 (다중 앵커 지원)\nexport function calculateEnhancedVWAP(data, anchorIndices = []) {\n  if (!data || data.length === 0) return data;\n\n  // 기본 앵커: 시작점, 최근 고점, 최근 저점\n  if (anchorIndices.length === 0) {\n    anchorIndices = [0]; // 기본값\n\n    // 최근 60일 고점/저점 찾기\n    if (data.length > 60) {\n      const recent60 = data.slice(-60);\n      let highIndex = 0,\n        lowIndex = 0;\n      let highPrice = 0,\n        lowPrice = Infinity;\n      recent60.forEach((d, i) => {\n        const globalIndex = data.length - 60 + i;\n        if (d.high > highPrice) {\n          highPrice = d.high;\n          highIndex = globalIndex;\n        }\n        if (d.low < lowPrice) {\n          lowPrice = d.low;\n          lowIndex = globalIndex;\n        }\n      });\n      anchorIndices.push(highIndex, lowIndex);\n    }\n  }\n\n  // 각 앵커별 VWAP 계산\n  const result = data.map(d => ({\n    ...d\n  }));\n  anchorIndices.forEach((anchorIndex, anchorNum) => {\n    let cumPV = 0;\n    let cumV = 0;\n    for (let i = 0; i < result.length; i++) {\n      if (i < anchorIndex) {\n        result[i][`vwap${anchorNum}`] = null;\n        continue;\n      }\n      const typicalPrice = (result[i].high + result[i].low + result[i].close) / 3;\n      const volume = result[i].volume || 0;\n      cumPV += typicalPrice * volume;\n      cumV += volume;\n      result[i][`vwap${anchorNum}`] = cumV > 0 ? cumPV / cumV : typicalPrice;\n    }\n  });\n\n  // 기본 VWAP (첫 번째 앵커)\n  result.forEach(d => {\n    d.avwap = d.vwap0;\n  });\n  return result;\n}\n\n// ============================\n// PATTERN RECOGNITION ENGINE\n// ============================\n\n// 1. 세력 매집 패턴 감지\nexport function detectAccumulationPattern(data, index) {\n  if (!data || index < 20) return {\n    detected: false,\n    confidence: 0\n  };\n  const recent20 = data.slice(Math.max(0, index - 19), index + 1);\n  let signals = 0;\n\n  // Signal 1: 가격 횡보 + 기관 지속 매수\n  const priceRange = Math.max(...recent20.map(d => d.high)) - Math.min(...recent20.map(d => d.low));\n  const avgPrice = recent20.reduce((sum, d) => sum + d.close, 0) / recent20.length;\n  const priceStable = priceRange / avgPrice < 0.1; // 10% 이내 변동\n\n  const instBuying = recent20.filter(d => {\n    var _d$_flows9;\n    return (((_d$_flows9 = d._flows) === null || _d$_flows9 === void 0 ? void 0 : _d$_flows9.기관합계) || 0) > 0;\n  }).length;\n  if (priceStable && instBuying > 12) signals += 30;\n\n  // Signal 2: 거래량 감소 + 기관 매수\n  const volTrend = recent20.slice(-5).reduce((sum, d) => sum + d.volume, 0) / recent20.slice(0, 5).reduce((sum, d) => sum + d.volume, 0);\n  if (volTrend < 0.7 && instBuying > 10) signals += 25;\n\n  // Signal 3: 개인 매도 + 기관/외인 매수 (스마트머니 교체)\n  const smartMoneyBuy = recent20.filter(d => {\n    var _d$_flows0, _d$_flows1, _d$_flows10;\n    return (((_d$_flows0 = d._flows) === null || _d$_flows0 === void 0 ? void 0 : _d$_flows0.기관합계) || 0) + (((_d$_flows1 = d._flows) === null || _d$_flows1 === void 0 ? void 0 : _d$_flows1.외국인합계) || 0) > 0 && (((_d$_flows10 = d._flows) === null || _d$_flows10 === void 0 ? void 0 : _d$_flows10.개인) || 0) < 0;\n  }).length;\n  if (smartMoneyBuy > 12) signals += 25;\n\n  // Signal 4: 하단 지지선 반복 테스트\n  const lows = recent20.map(d => d.low);\n  const minLow = Math.min(...lows);\n  const supportTests = lows.filter(low => Math.abs(low - minLow) / minLow < 0.01).length;\n  if (supportTests > 3) signals += 20;\n  return {\n    detected: signals >= 60,\n    confidence: Math.min(100, signals),\n    type: '매집',\n    description: signals >= 60 ? '세력 매집 진행 중' : null\n  };\n}\n\n// 2. 상승 돌파 패턴\nexport function detectBreakoutPattern(data, index) {\n  var _current$_flows6, _current$_flows7;\n  if (!data || index < 20) return {\n    detected: false,\n    confidence: 0\n  };\n  const current = data[index];\n  const recent20 = data.slice(Math.max(0, index - 19), index + 1);\n  // 60일 데이터가 없으면 있는 만큼만 사용\n  const lookback = Math.min(60, index + 1);\n  const recent60 = data.slice(Math.max(0, index - lookback + 1), index + 1);\n  let signals = 0;\n\n  // 60일 최고가 돌파\n  const high60 = Math.max(...recent60.slice(0, -1).map(d => d.high));\n  if (current.close > high60) signals += 40;\n\n  // 거래량 폭발 (평균 대비 200% 이상)\n  const avgVol = recent20.slice(0, -1).reduce((sum, d) => sum + d.volume, 0) / 19;\n  if (current.volume > avgVol * 2) signals += 30;\n\n  // 스마트머니 대량 매수\n  const smartMoney = (((_current$_flows6 = current._flows) === null || _current$_flows6 === void 0 ? void 0 : _current$_flows6.기관합계) || 0) + (((_current$_flows7 = current._flows) === null || _current$_flows7 === void 0 ? void 0 : _current$_flows7.외국인합계) || 0);\n  const avgSmartMoney = recent20.slice(0, -1).reduce((sum, d) => {\n    var _d$_flows11, _d$_flows12;\n    return sum + (((_d$_flows11 = d._flows) === null || _d$_flows11 === void 0 ? void 0 : _d$_flows11.기관합계) || 0) + (((_d$_flows12 = d._flows) === null || _d$_flows12 === void 0 ? void 0 : _d$_flows12.외국인합계) || 0);\n  }, 0) / 19;\n  if (smartMoney > avgSmartMoney * 3) signals += 30;\n  return {\n    detected: signals >= 70,\n    confidence: Math.min(100, signals),\n    type: '돌파',\n    description: signals >= 70 ? '상승 돌파 신호' : null\n  };\n}\n\n// 3. 급락 후 반등 패턴 (Dead Cat Bounce vs Real Reversal)\nexport function detectReversalPattern(data, index) {\n  if (!data || index < 10) return {\n    detected: false,\n    confidence: 0\n  };\n  const recent10 = data.slice(index - 9, index + 1);\n  const current = data[index];\n\n  // 최근 급락 확인 (-10% 이상)\n  const highPoint = Math.max(...recent10.slice(0, 5).map(d => d.high));\n  const lowPoint = Math.min(...recent10.slice(5).map(d => d.low));\n  const dropRate = (lowPoint - highPoint) / highPoint;\n  if (dropRate < -0.1) {\n    var _current$_flows8, _data$_flows;\n    let signals = 0;\n\n    // 오늘 반등\n    if (current.close > data[index - 1].close * 1.03) signals += 30;\n\n    // 기관 매수 전환\n    if ((((_current$_flows8 = current._flows) === null || _current$_flows8 === void 0 ? void 0 : _current$_flows8.기관합계) || 0) > 0 && (((_data$_flows = data[index - 1]._flows) === null || _data$_flows === void 0 ? void 0 : _data$_flows.기관합계) || 0) <= 0) signals += 40;\n\n    // 거래량 증가\n    if (current.volume > data[index - 1].volume * 1.5) signals += 30;\n    return {\n      detected: signals >= 60,\n      confidence: Math.min(100, signals),\n      type: '반등',\n      description: signals >= 60 ? '급락 후 반등 시작' : null,\n      warning: signals < 80 ? '데드캣 바운스 주의' : null\n    };\n  }\n  return {\n    detected: false,\n    confidence: 0\n  };\n}\n\n// 4. 매도 타이밍 패턴\nexport function detectDistributionPattern(data, index) {\n  var _current$_flows9, _current$_flows0, _current$_flows1;\n  if (!data || index < 20) return {\n    detected: false,\n    confidence: 0\n  };\n  const recent20 = data.slice(index - 19, index + 1);\n  const current = data[index];\n  let signals = 0;\n\n  // 고점 부근에서 기관 매도\n  const high20 = Math.max(...recent20.map(d => d.high));\n  const nearHigh = current.close > high20 * 0.95;\n  const instSelling = (((_current$_flows9 = current._flows) === null || _current$_flows9 === void 0 ? void 0 : _current$_flows9.기관합계) || 0) < 0;\n  if (nearHigh && instSelling) signals += 40;\n\n  // 거래량 증가 + 가격 정체\n  const priceChange = (current.close - recent20[0].close) / recent20[0].close;\n  const volIncrease = current.volume > recent20[0].volume * 1.5;\n  if (Math.abs(priceChange) < 0.02 && volIncrease && instSelling) signals += 30;\n\n  // 개인 매수 폭증 (물량 떠넘기기)\n  const retailBuying = (((_current$_flows0 = current._flows) === null || _current$_flows0 === void 0 ? void 0 : _current$_flows0.개인) || 0) > 0;\n  const retailAmount = Math.abs(((_current$_flows1 = current._flows) === null || _current$_flows1 === void 0 ? void 0 : _current$_flows1.개인) || 0);\n  const avgRetail = recent20.slice(0, -1).reduce((sum, d) => {\n    var _d$_flows13;\n    return sum + Math.abs(((_d$_flows13 = d._flows) === null || _d$_flows13 === void 0 ? void 0 : _d$_flows13.개인) || 0);\n  }, 0) / 19;\n  if (retailBuying && retailAmount > avgRetail * 2 && instSelling) signals += 30;\n  return {\n    detected: signals >= 60,\n    confidence: Math.min(100, signals),\n    type: '분산',\n    description: signals >= 60 ? '고점 분산 매도 진행' : null\n  };\n}\n\n// ============================\n// ENTRY/EXIT SIGNAL SYSTEM\n// ============================\n\nexport function generateTradingSignals(data, index) {\n  if (!data || index < 20) return null;\n  const current = data[index];\n  const signals = [];\n\n  // 패턴 체크\n  const accumulation = detectAccumulationPattern(data, index);\n  const breakout = detectBreakoutPattern(data, index);\n  const reversal = detectReversalPattern(data, index);\n  const distribution = detectDistributionPattern(data, index);\n\n  // 기술적 지표\n  const tradingSignal = calculateInstitutionalTradingSignal(data, index);\n  const smartMoney = calculateInstitutionalSmartMoneyScore(data, index);\n\n  // BUY SIGNALS\n  if (accumulation.detected && smartMoney.score > 55) {\n    signals.push({\n      type: 'BUY',\n      strength: 'STRONG',\n      entry: current.close,\n      stopLoss: current.close * 0.95,\n      target1: current.close * 1.05,\n      target2: current.close * 1.10,\n      target3: current.close * 1.20,\n      reason: '세력 매집 완료 + 스마트머니 유입',\n      confidence: (accumulation.confidence + smartMoney.score) / 2,\n      riskReward: 2.0\n    });\n  }\n  if (breakout.detected && tradingSignal.signal > 50) {\n    signals.push({\n      type: 'BUY',\n      strength: 'STRONG',\n      entry: current.close,\n      stopLoss: current.close * 0.97,\n      target1: current.close * 1.08,\n      target2: current.close * 1.15,\n      target3: current.close * 1.30,\n      reason: '돌파 매수 신호',\n      confidence: breakout.confidence,\n      riskReward: 3.5\n    });\n  }\n  if (reversal.detected && !reversal.warning) {\n    signals.push({\n      type: 'BUY',\n      strength: 'MODERATE',\n      entry: current.close,\n      stopLoss: current.close * 0.93,\n      target1: current.close * 1.07,\n      target2: current.close * 1.12,\n      reason: '급락 후 반등',\n      confidence: reversal.confidence,\n      riskReward: 1.7,\n      warning: '분할 매수 권장'\n    });\n  }\n\n  // SELL SIGNALS\n  if (distribution.detected) {\n    signals.push({\n      type: 'SELL',\n      strength: 'STRONG',\n      exit: current.close,\n      reason: '기관 분산 매도',\n      confidence: distribution.confidence,\n      action: '전량 매도 또는 50% 이상 비중 축소'\n    });\n  }\n  if (tradingSignal.signal < -50 && smartMoney.score < 40) {\n    signals.push({\n      type: 'SELL',\n      strength: 'STRONG',\n      exit: current.close,\n      reason: '종합 매도 신호 + 스마트머니 이탈',\n      confidence: 85,\n      action: '즉시 청산'\n    });\n  }\n\n  // Default weak signals based on trend\n  if (signals.length === 0) {\n    // 기본 트렌드 신호 추가\n    if (smartMoney.score > 50) {\n      signals.push({\n        type: 'BUY',\n        strength: 'WEAK',\n        entry: current.close,\n        stopLoss: current.close * 0.97,\n        target1: current.close * 1.03,\n        target2: current.close * 1.05,\n        reason: '스마트머니 점수 양호',\n        confidence: smartMoney.score,\n        riskReward: 1.0\n      });\n    } else if (smartMoney.score < 50) {\n      signals.push({\n        type: 'SELL',\n        strength: 'WEAK',\n        exit: current.close,\n        reason: '스마트머니 점수 부진',\n        confidence: 100 - smartMoney.score,\n        action: '부분 익절 고려'\n      });\n    }\n  }\n\n  // Risk Management\n  const volatility = calculateVolatility(data.slice(index - 19, index + 1));\n  const positionSize = calculateOptimalPositionSize(data, index);\n  return {\n    signals,\n    bestSignal: signals.sort((a, b) => b.confidence - a.confidence)[0],\n    riskLevel: volatility > 0.03 ? 'HIGH' : volatility > 0.02 ? 'MEDIUM' : 'LOW',\n    suggestedPosition: positionSize,\n    summary: signals.length > 0 ? `${signals.filter(s => s.type === 'BUY').length}개 매수, ${signals.filter(s => s.type === 'SELL').length}개 매도 신호` : '관망'\n  };\n}\n\n// Advanced Backtesting with Realistic Execution\nexport function backtestSignalPerformance(data, lookback = 60) {\n  if (!data || data.length < Math.max(20, lookback)) return null;\n\n  // 데이터가 적으면 lookback 조정\n  const adjustedLookback = Math.min(lookback, Math.max(20, data.length - 20));\n  const trades = [];\n  let capital = 100000000; // 1억원 시작\n  let position = 0;\n  let entryPrice = 0;\n  for (let i = adjustedLookback; i < data.length - 1; i++) {\n    const signals = generateTradingSignals(data, i);\n    if (!signals || !signals.bestSignal) continue;\n    const signal = signals.bestSignal;\n    const current = data[i];\n    const next = data[i + 1];\n\n    // BUY 실행\n    if (signal.type === 'BUY' && position === 0) {\n      const shares = Math.floor(capital * 0.3 / next.open); // 30% 포지션\n      position = shares;\n      entryPrice = next.open;\n      capital -= shares * next.open * 1.003; // 수수료 0.3%\n\n      trades.push({\n        date: next.date,\n        type: 'BUY',\n        price: next.open,\n        shares,\n        reason: signal.reason\n      });\n    }\n\n    // SELL 실행 또는 손절/익절\n    if (position > 0) {\n      const currentPrice = next.close;\n      const profitRate = (currentPrice - entryPrice) / entryPrice;\n\n      // 익절 체크 (10% 수익)\n      if (profitRate > 0.10) {\n        capital += position * currentPrice * 0.997; // 수수료 차감\n        trades.push({\n          date: next.date,\n          type: 'SELL',\n          price: currentPrice,\n          shares: position,\n          profit: profitRate * 100,\n          reason: '목표가 도달 (익절)'\n        });\n        position = 0;\n      }\n      // 손절 체크 (-5% 손실)\n      else if (profitRate < -0.05) {\n        capital += position * currentPrice * 0.997;\n        trades.push({\n          date: next.date,\n          type: 'SELL',\n          price: currentPrice,\n          shares: position,\n          profit: profitRate * 100,\n          reason: '손절'\n        });\n        position = 0;\n      }\n      // 매도 신호\n      else if (signal.type === 'SELL' && signal.strength === 'STRONG') {\n        capital += position * currentPrice * 0.997;\n        trades.push({\n          date: next.date,\n          type: 'SELL',\n          price: currentPrice,\n          shares: position,\n          profit: profitRate * 100,\n          reason: signal.reason\n        });\n        position = 0;\n      }\n    }\n  }\n\n  // 최종 정산\n  if (position > 0) {\n    const lastPrice = data[data.length - 1].close;\n    capital += position * lastPrice * 0.997;\n  }\n\n  // 성과 계산\n  const totalReturn = (capital - 100000000) / 100000000 * 100;\n  const winTrades = trades.filter(t => t.type === 'SELL' && t.profit > 0);\n  const loseTrades = trades.filter(t => t.type === 'SELL' && t.profit <= 0);\n  const winRate = winTrades.length / (winTrades.length + loseTrades.length) * 100;\n  const avgWin = winTrades.length > 0 ? winTrades.reduce((sum, t) => sum + t.profit, 0) / winTrades.length : 0;\n  const avgLoss = loseTrades.length > 0 ? Math.abs(loseTrades.reduce((sum, t) => sum + t.profit, 0) / loseTrades.length) : 0;\n\n  // 최대 낙폭 계산\n  let maxCapital = 100000000;\n  let maxDrawdown = 0;\n  let runningCapital = 100000000;\n  trades.forEach(trade => {\n    if (trade.type === 'SELL') {\n      runningCapital *= 1 + trade.profit / 100;\n      maxCapital = Math.max(maxCapital, runningCapital);\n      const drawdown = (maxCapital - runningCapital) / maxCapital;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n  });\n  return {\n    totalReturn: totalReturn.toFixed(2),\n    totalTrades: trades.length,\n    winRate: winRate.toFixed(1),\n    avgWin: avgWin.toFixed(2),\n    avgLoss: avgLoss.toFixed(2),\n    profitFactor: avgLoss > 0 ? (avgWin / avgLoss).toFixed(2) : 'N/A',\n    maxDrawdown: (maxDrawdown * 100).toFixed(2),\n    sharpeRatio: calculateSharpeRatio(trades),\n    trades: trades.slice(-10),\n    // 최근 10개 거래\n    finalCapital: capital\n  };\n}\n\n// Sharpe Ratio 계산\nfunction calculateSharpeRatio(trades) {\n  if (trades.length < 2) return 0;\n  const returns = trades.filter(t => t.type === 'SELL').map(t => t.profit / 100);\n  if (returns.length === 0) return 0;\n  const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\n  const stdDev = Math.sqrt(variance);\n  return stdDev > 0 ? (avgReturn / stdDev * Math.sqrt(252)).toFixed(2) : 0;\n}\nconst institutionalAnalytics = {\n  calculateInstitutionalSmartMoneyScore,\n  calculateInstitutionalTradingSignal,\n  calculateEnhancedVWAP,\n  detectMarketRegime,\n  calculateOptimalPositionSize,\n  backtestSignalPerformance,\n  generateTradingSignals,\n  detectAccumulationPattern,\n  detectBreakoutPattern,\n  detectReversalPattern,\n  detectDistributionPattern\n};\nexport default institutionalAnalytics;","map":{"version":3,"names":["toNum","detectMarketRegime","data","index","prev20","slice","Math","max","prev60","ma20","reduce","sum","d","close","length","ma60","currentPrice","trendStrength","momentum","returns20","i","push","vol20","sqrt","r","avgVol20","volume","avgVol60","volumeTrend","abs","analyzeOrderFlowImbalance","recent5","buyPressure","sellPressure","forEach","vwap","high","low","pressure","totalPressure","detectInstitutionalActivity","_current$_flows","_current$_flows2","phase","strength","current","avgVolume","volumeRatio","priceChange","dailyRange","foreignFlow","_flows","외국인합계","instFlow","기관합계","smartMoney","min","calculateInstitutionalSmartMoneyScore","_current$_flows3","_current$_flows4","_current$_flows5","score","breakdown","interpretation","totalScore","marketRegime","regimeMultiplier","retailFlow","개인","totalAbsFlow","smartMoneyNet","flowIntensity","orderFlowImbalance","enhancedFlow","recent5Days","recent10Days","shortTermScore","consecutiveDays","lastDirection","_d$_flows","_d$_flows2","daySmartMoney","direction","positiveDays","filter","_d$_flows3","_d$_flows4","flow","longTermScore","persistence","smartTotal","retailDivergence","cum20","_d$_flows5","_d$_flows6","cum60","_d$_flows7","_d$_flows8","avg20","avg60","isHighVolume","volumeSignal","instActivity","instScore","institutionalPattern","normalizedScore","getSmartMoneyInterpretation","calculateOptimalPositionSize","portfolioValue","size","leverage","reasoning","returns","avgReturn","a","b","winRate","avgWin","avgLoss","kellyFraction","safeKelly","vol","volAdjustment","maxPosition","optimalSize","toFixed","round","calculateAdvancedTechnicalSignal","_data","_data2","signal","rsi","rsi14","rsiPrev","rsiSlope","macdHistogram","histAccel","volMA","volRatio","recent20High","map","recent20Low","range","positionInRange","calculateInstitutionalTradingSignal","factors","positionSize","recommendation","action","description","totalSignal","name","value","weight","adx","calculateADX","trendDirection","trendScore","ma5","technicalSignal","volAdjReturn","calculateVolatilityAdjustedReturn","microstructure","analyzeMarketMicrostructure","smartMoneyScore","smartMoneySignal","riskMultiplier","calculateRiskAdjustment","getTradingRecommendation","confidence","calculateSignalConfidence","period","plusDM","minusDM","tr","curr","prev","highDiff","lowDiff","trueRange","plusDI","minusDI","dx","calculateStochastic","highs","lows","highest","lowest","calculateOscillatorComposite","mfi","stochastic","lookback","ret","variance","pow","volatility","priceEfficiency","calculatePriceEfficiency","volumeProfile","analyzeVolumeProfile","spreadQuality","estimateSpreadQuality","totalMove","netMove","efficiency","historical","avgRange","currentRange","recent20","calculateVolatility","avg","positiveFactors","f","negativeFactors","unanimity","avgStrength","urgency","targetAllocation","stopLoss","calculateEnhancedVWAP","anchorIndices","recent60","highIndex","lowIndex","highPrice","lowPrice","Infinity","globalIndex","result","anchorIndex","anchorNum","cumPV","cumV","typicalPrice","avwap","vwap0","detectAccumulationPattern","detected","signals","priceRange","avgPrice","priceStable","instBuying","_d$_flows9","volTrend","smartMoneyBuy","_d$_flows0","_d$_flows1","_d$_flows10","minLow","supportTests","type","detectBreakoutPattern","_current$_flows6","_current$_flows7","high60","avgVol","avgSmartMoney","_d$_flows11","_d$_flows12","detectReversalPattern","recent10","highPoint","lowPoint","dropRate","_current$_flows8","_data$_flows","warning","detectDistributionPattern","_current$_flows9","_current$_flows0","_current$_flows1","high20","nearHigh","instSelling","volIncrease","retailBuying","retailAmount","avgRetail","_d$_flows13","generateTradingSignals","accumulation","breakout","reversal","distribution","tradingSignal","entry","target1","target2","target3","reason","riskReward","exit","bestSignal","sort","riskLevel","suggestedPosition","summary","s","backtestSignalPerformance","adjustedLookback","trades","capital","position","entryPrice","next","shares","floor","open","date","price","profitRate","profit","lastPrice","totalReturn","winTrades","t","loseTrades","maxCapital","maxDrawdown","runningCapital","trade","drawdown","totalTrades","profitFactor","sharpeRatio","calculateSharpeRatio","finalCapital","stdDev","institutionalAnalytics"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/institutionalAnalytics.js"],"sourcesContent":["// =============================\n// Institutional-Grade Analytics Module  \n// Advanced Quantitative Trading Algorithms\n// Real Money Making System v2.0\n// =============================\n\nimport { toNum } from './dataUtils';\n\n// Market Regime Detection\nexport function detectMarketRegime(data, index) {\n  if (!data || index < 20) return 'UNKNOWN';\n  \n  const prev20 = data.slice(Math.max(0, index - 20), index + 1);\n  const prev60 = data.slice(Math.max(0, index - 60), index + 1);\n  \n  // 1. Trend Analysis\n  const ma20 = prev20.reduce((sum, d) => sum + d.close, 0) / prev20.length;\n  const ma60 = prev60.reduce((sum, d) => sum + d.close, 0) / prev60.length;\n  const currentPrice = data[index].close;\n  \n  const trendStrength = (currentPrice - ma60) / ma60;\n  const momentum = (ma20 - ma60) / ma60;\n  \n  // 2. Volatility Regime\n  const returns20 = [];\n  for (let i = 1; i < prev20.length; i++) {\n    returns20.push((prev20[i].close - prev20[i-1].close) / prev20[i-1].close);\n  }\n  const vol20 = Math.sqrt(returns20.reduce((sum, r) => sum + r*r, 0) / returns20.length) * Math.sqrt(252);\n  \n  // 3. Volume Regime\n  const avgVol20 = prev20.reduce((sum, d) => sum + d.volume, 0) / prev20.length;\n  const avgVol60 = prev60.reduce((sum, d) => sum + d.volume, 0) / prev60.length;\n  const volumeTrend = (avgVol20 - avgVol60) / avgVol60;\n  \n  // Regime Classification\n  if (trendStrength > 0.1 && momentum > 0.05 && vol20 < 0.3) {\n    return 'BULL_TRENDING';\n  } else if (trendStrength < -0.1 && momentum < -0.05) {\n    return 'BEAR_TRENDING';\n  } else if (vol20 > 0.4) {\n    return 'HIGH_VOLATILITY';\n  } else if (Math.abs(trendStrength) < 0.05 && vol20 < 0.2) {\n    return 'RANGE_BOUND';\n  } else if (volumeTrend > 0.5 && Math.abs(trendStrength) > 0.05) {\n    return 'BREAKOUT_POTENTIAL';\n  } else {\n    return 'TRANSITIONING';\n  }\n}\n\n// Advanced Order Flow Analysis\nfunction analyzeOrderFlowImbalance(data, index) {\n  if (!data || index < 5) return 0;\n  \n  const recent5 = data.slice(Math.max(0, index - 4), index + 1);\n  let buyPressure = 0;\n  let sellPressure = 0;\n  \n  recent5.forEach(d => {\n    // VWAP 대비 종가 위치로 매수/매도 압력 추정\n    const vwap = (d.high + d.low + d.close) / 3;\n    const pressure = (d.close - vwap) / vwap;\n    \n    if (pressure > 0) {\n      buyPressure += pressure * d.volume;\n    } else {\n      sellPressure += Math.abs(pressure) * d.volume;\n    }\n  });\n  \n  const totalPressure = buyPressure + sellPressure;\n  if (totalPressure === 0) return 0;\n  \n  return (buyPressure - sellPressure) / totalPressure;\n}\n\n// Institutional Accumulation/Distribution Detection\nfunction detectInstitutionalActivity(data, index) {\n  if (!data || index < 20) return { phase: 'UNKNOWN', strength: 0 };\n  \n  const current = data[index];\n  const prev20 = data.slice(Math.max(0, index - 20), index);\n  \n  // Volume-Price Analysis\n  const avgVolume = prev20.reduce((sum, d) => sum + d.volume, 0) / prev20.length;\n  const volumeRatio = current.volume / avgVolume;\n  \n  // Price Movement Analysis\n  const priceChange = (current.close - prev20[0].close) / prev20[0].close;\n  const dailyRange = (current.high - current.low) / current.close;\n  \n  // Flow Analysis\n  const foreignFlow = toNum(current._flows?.외국인합계 || 0);\n  const instFlow = toNum(current._flows?.기관합계 || 0);\n  const smartMoney = foreignFlow + instFlow;\n  \n  // Pattern Recognition\n  if (volumeRatio > 2 && smartMoney > 0 && dailyRange < 0.02) {\n    return { phase: 'ACCUMULATION', strength: Math.min(100, volumeRatio * 25) };\n  } else if (volumeRatio > 1.5 && smartMoney < 0 && priceChange < -0.01) {\n    return { phase: 'DISTRIBUTION', strength: Math.min(100, volumeRatio * 20) };\n  } else if (volumeRatio < 0.5 && Math.abs(priceChange) < 0.01) {\n    return { phase: 'CONSOLIDATION', strength: 30 };\n  } else if (smartMoney > 0 && priceChange > 0) {\n    return { phase: 'MARKUP', strength: 50 };\n  } else if (smartMoney < 0 && priceChange < 0) {\n    return { phase: 'MARKDOWN', strength: 50 };\n  }\n  \n  return { phase: 'NEUTRAL', strength: 0 };\n}\n\n// 기관급 스마트머니 점수 계산 (0-100 스케일)\nexport function calculateInstitutionalSmartMoneyScore(data, index) {\n  // 최소 20일 데이터만 있으면 작동\n  if (!data || index < 20 || index >= data.length) return { score: 50, breakdown: {}, interpretation: \"데이터 부족\" };\n  \n  const current = data[index];\n  const prev20 = data.slice(Math.max(0, index - 20), index);\n  const prev60 = data.slice(Math.max(0, index - Math.min(60, index)), index); // 데이터가 60일 미만이면 있는 만큼만 사용\n  \n  let breakdown = {};\n  let totalScore = 0;\n  \n  // Market Regime Adjustment\n  const marketRegime = detectMarketRegime(data, index);\n  let regimeMultiplier = 1;\n  switch(marketRegime) {\n    case 'BULL_TRENDING': regimeMultiplier = 1.2; break;\n    case 'BEAR_TRENDING': regimeMultiplier = 0.8; break;\n    case 'HIGH_VOLATILITY': regimeMultiplier = 0.7; break;\n    case 'BREAKOUT_POTENTIAL': regimeMultiplier = 1.3; break;\n    default: regimeMultiplier = 1;\n  }\n  breakdown.marketRegime = marketRegime;\n  \n  // 1. Enhanced Flow Analysis with Order Flow Imbalance (30점)\n  const foreignFlow = toNum(current._flows?.외국인합계 || 0);\n  const instFlow = toNum(current._flows?.기관합계 || 0);\n  const retailFlow = toNum(current._flows?.개인 || 0);\n  const totalAbsFlow = Math.abs(foreignFlow) + Math.abs(instFlow) + Math.abs(retailFlow);\n  \n  if (totalAbsFlow > 0) {\n    const smartMoneyNet = foreignFlow + instFlow;\n    const flowIntensity = (smartMoneyNet / totalAbsFlow) * 20;\n    \n    // Order Flow Imbalance 추가\n    const orderFlowImbalance = analyzeOrderFlowImbalance(data, index);\n    const enhancedFlow = flowIntensity + (orderFlowImbalance * 10);\n    \n    breakdown.flowIntensity = Math.max(-30, Math.min(30, enhancedFlow));\n    totalScore += breakdown.flowIntensity;\n  }\n  \n  // 2. Multi-Timeframe Flow Persistence (25점)\n  const recent5Days = data.slice(Math.max(0, index - 4), index + 1);\n  const recent10Days = data.slice(Math.max(0, index - 9), index + 1);\n  \n  // Short-term persistence\n  let shortTermScore = 0;\n  let consecutiveDays = 0;\n  let lastDirection = 0;\n  \n  recent5Days.forEach(d => {\n    const daySmartMoney = toNum(d._flows?.외국인합계 || 0) + toNum(d._flows?.기관합계 || 0);\n    const direction = daySmartMoney > 0 ? 1 : (daySmartMoney < 0 ? -1 : 0);\n    \n    if (direction === lastDirection && direction !== 0) {\n      consecutiveDays++;\n    } else {\n      consecutiveDays = direction !== 0 ? 1 : 0;\n    }\n    lastDirection = direction;\n  });\n  \n  shortTermScore = Math.min(15, consecutiveDays * 3 * lastDirection);\n  \n  // Long-term consistency\n  const positiveDays = recent10Days.filter(d => {\n    const flow = toNum(d._flows?.외국인합계 || 0) + toNum(d._flows?.기관합계 || 0);\n    return flow > 0;\n  }).length;\n  \n  const longTermScore = (positiveDays / recent10Days.length - 0.5) * 20;\n  \n  breakdown.persistence = shortTermScore + longTermScore;\n  totalScore += breakdown.persistence;\n  \n  // 3. 개인 역행 지표 (15점)\n  // 스마트머니와 개인의 반대 포지션 = 긍정 신호\n  const smartTotal = foreignFlow + instFlow;\n  if (smartTotal > 0 && retailFlow < 0) {\n    breakdown.retailDivergence = 15;\n  } else if (smartTotal < 0 && retailFlow > 0) {\n    breakdown.retailDivergence = -15;\n  } else {\n    breakdown.retailDivergence = 0;\n  }\n  totalScore += breakdown.retailDivergence;\n  \n  // 4. 누적 수급 모멘텀 (15점)\n  // 20일 vs 60일 누적 수급 비교\n  const cum20 = prev20.reduce((sum, d) => {\n    return sum + toNum(d._flows?.외국인합계 || 0) + toNum(d._flows?.기관합계 || 0);\n  }, 0);\n  \n  const cum60 = prev60.reduce((sum, d) => {\n    return sum + toNum(d._flows?.외국인합계 || 0) + toNum(d._flows?.기관합계 || 0);\n  }, 0);\n  \n  if (prev60.length > 0) {\n    const avg20 = cum20 / prev20.length;\n    const avg60 = cum60 / prev60.length;\n    const momentum = avg20 > avg60 ? 15 : (avg20 < avg60 * 0.5 ? -15 : 0);\n    breakdown.momentum = momentum;\n    totalScore += momentum;\n  }\n  \n  // 5. 대량 거래 감지 (10점)\n  // 평균 대비 3배 이상 거래량에서의 수급\n  const avgVolume = prev20.reduce((sum, d) => sum + toNum(d.volume || 0), 0) / prev20.length;\n  const isHighVolume = current.volume > avgVolume * 2.5;\n  \n  if (isHighVolume) {\n    if (smartTotal > 0) {\n      breakdown.volumeSignal = 10;\n    } else if (smartTotal < 0) {\n      breakdown.volumeSignal = -10;\n    }\n  } else {\n    breakdown.volumeSignal = 0;\n  }\n  totalScore += breakdown.volumeSignal;\n  \n  // 6. Institutional Activity Pattern (20점)\n  const instActivity = detectInstitutionalActivity(data, index);\n  let instScore = 0;\n  \n  if (instActivity.phase === 'ACCUMULATION') {\n    instScore = instActivity.strength * 0.2;\n  } else if (instActivity.phase === 'DISTRIBUTION') {\n    instScore = -instActivity.strength * 0.2;\n  } else if (instActivity.phase === 'MARKUP' && foreignFlow > 0) {\n    instScore = 15;\n  } else if (instActivity.phase === 'MARKDOWN' && foreignFlow < 0) {\n    instScore = -15;\n  }\n  \n  // Foreign Leadership Premium\n  if (foreignFlow > 0 && instFlow <= 0) {\n    instScore += 5; // 외국인 단독 매수\n  } else if (foreignFlow > 0 && instFlow > 0 && foreignFlow > instFlow * 1.5) {\n    instScore += 10; // 외국인 주도 매수\n  } else if (foreignFlow < 0 && instFlow >= 0) {\n    instScore -= 5; // 외국인 단독 매도\n  } else if (foreignFlow < 0 && instFlow < 0 && foreignFlow < instFlow * 1.5) {\n    instScore -= 10; // 외국인 주도 매도\n  }\n  \n  breakdown.institutionalPattern = Math.max(-20, Math.min(20, instScore));\n  totalScore += breakdown.institutionalPattern;\n  \n  // Apply Market Regime Multiplier\n  totalScore *= regimeMultiplier;\n  \n  // 정규화 (0-100 스케일)\n  const normalizedScore = Math.max(0, Math.min(100, totalScore + 50));\n  \n  return {\n    score: normalizedScore,\n    breakdown,\n    interpretation: getSmartMoneyInterpretation(normalizedScore)\n  };\n}\n\n// Dynamic Risk-Adjusted Position Sizing\nexport function calculateOptimalPositionSize(data, index, portfolioValue = 100000000) {\n  if (!data || index < 20) return { size: 0, leverage: 1, reasoning: ['최소 20일 데이터 필요'] };\n  \n  const prev20 = data.slice(Math.max(0, index - 20), index);\n  const returns = [];\n  \n  for (let i = 1; i < prev20.length; i++) {\n    returns.push((prev20[i].close - prev20[i-1].close) / prev20[i-1].close);\n  }\n  \n  // Kelly Criterion Modified\n  const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const winRate = returns.filter(r => r > 0).length / returns.length;\n  const avgWin = returns.filter(r => r > 0).reduce((a, b) => a + b, 0) / Math.max(1, returns.filter(r => r > 0).length);\n  const avgLoss = Math.abs(returns.filter(r => r < 0).reduce((a, b) => a + b, 0) / Math.max(1, returns.filter(r => r < 0).length));\n  \n  if (avgLoss === 0) return { size: 0, leverage: 1, reasoning: ['Insufficient loss data'] };\n  \n  const kellyFraction = (winRate * avgWin - (1 - winRate) * avgLoss) / avgWin;\n  const safeKelly = Math.max(0, Math.min(0.25, kellyFraction * 0.25)); // 1/4 Kelly for safety\n  \n  // Volatility Adjustment\n  const vol = Math.sqrt(returns.reduce((sum, r) => sum + r*r, 0) / returns.length) * Math.sqrt(252);\n  const volAdjustment = Math.max(0.5, Math.min(1, 0.2 / vol)); // Lower position for high vol\n  \n  // Liquidity Constraint\n  const avgVolume = prev20.reduce((sum, d) => sum + d.volume * d.close, 0) / prev20.length;\n  const maxPosition = avgVolume * 0.01; // Max 1% of daily volume\n  \n  const optimalSize = Math.min(\n    portfolioValue * safeKelly * volAdjustment,\n    maxPosition\n  );\n  \n  const reasoning = [\n    `Kelly Fraction: ${(kellyFraction * 100).toFixed(2)}%`,\n    `Volatility Adjustment: ${(volAdjustment * 100).toFixed(0)}%`,\n    `Win Rate: ${(winRate * 100).toFixed(1)}%`,\n    `Risk-Adjusted Size: ${(safeKelly * 100).toFixed(2)}% of portfolio`\n  ];\n  \n  return {\n    size: Math.round(optimalSize),\n    leverage: safeKelly > 0.15 ? 1.5 : 1,\n    reasoning\n  };\n}\n\n// Advanced Technical Signal Composite\nfunction calculateAdvancedTechnicalSignal(data, index) {\n  if (!data || index < 60) return 0;\n  \n  const current = data[index];\n  let signal = 0;\n  \n  // 1. Momentum Quality (not just strength)\n  const rsi = current.rsi14 || 50;\n  const rsiPrev = data[index - 1]?.rsi14 || 50;\n  const rsiSlope = rsi - rsiPrev;\n  \n  if (rsi < 30 && rsiSlope > 0) signal += 20; // Oversold reversal\n  else if (rsi > 70 && rsiSlope < 0) signal -= 20; // Overbought reversal\n  else if (rsi > 50 && rsi < 70 && rsiSlope > 0) signal += 10; // Healthy momentum\n  else if (rsi < 50 && rsi > 30 && rsiSlope < 0) signal -= 10; // Weakening\n  \n  // 2. MACD Histogram Acceleration\n  if (current.macdHistogram && data[index - 1]?.macdHistogram) {\n    const histAccel = current.macdHistogram - data[index - 1].macdHistogram;\n    signal += Math.max(-15, Math.min(15, histAccel * 100));\n  }\n  \n  // 3. Volume-Price Confirmation\n  const volMA = data.slice(index - 10, index).reduce((sum, d) => sum + d.volume, 0) / 10;\n  const priceChange = (current.close - data[index - 1].close) / data[index - 1].close;\n  const volRatio = current.volume / volMA;\n  \n  if (priceChange > 0 && volRatio > 1.5) signal += 15; // Volume confirms upside\n  else if (priceChange < 0 && volRatio > 1.5) signal -= 15; // Volume confirms downside\n  else if (Math.abs(priceChange) > 0.02 && volRatio < 0.7) signal -= 10; // No volume support\n  \n  // 4. Support/Resistance Proximity\n  const recent20High = Math.max(...data.slice(index - 20, index).map(d => d.high));\n  const recent20Low = Math.min(...data.slice(index - 20, index).map(d => d.low));\n  const range = recent20High - recent20Low;\n  const positionInRange = (current.close - recent20Low) / range;\n  \n  if (positionInRange < 0.2) signal += 10; // Near support\n  else if (positionInRange > 0.8) signal -= 10; // Near resistance\n  \n  return signal;\n}\n\n// 기관급 종합 매매 신호 계산\nexport function calculateInstitutionalTradingSignal(data, index) {\n  // 최소 20일 데이터만 있으면 작동\n  if (!data || index < 20 || index >= data.length) return { signal: 0, factors: [], positionSize: {}, recommendation: { action: \"WAIT\", description: \"데이터 수집 중\" } };\n  \n  const current = data[index];\n  const factors = [];\n  let totalSignal = 0;\n  \n  // Market Regime Context\n  const marketRegime = detectMarketRegime(data, index);\n  factors.push({\n    name: \"시장 레짐\",\n    value: marketRegime,\n    weight: 0.0,\n    description: marketRegime\n  });\n  \n  // 1. Advanced Trend Analysis with Multiple Timeframes\n  const adx = calculateADX(data, index, 14);\n  const trendDirection = current.close > current.ma20 ? 1 : -1;\n  let trendScore = 0;\n  \n  if (adx > 40) {\n    trendScore = trendDirection * 30; // Strong trend\n  } else if (adx > 25) {\n    trendScore = trendDirection * 20; // Moderate trend\n  } else if (adx < 20) {\n    trendScore = 0; // No trend\n  }\n  \n  // Multi-timeframe confirmation\n  if (current.ma5 > current.ma20 && current.ma20 > current.ma60) {\n    trendScore = Math.max(trendScore, 25); // Perfect alignment\n  } else if (current.ma5 < current.ma20 && current.ma20 < current.ma60) {\n    trendScore = Math.min(trendScore, -25); // Perfect downtrend\n  }\n  \n  factors.push({\n    name: \"멀티타임프레임 추세\",\n    value: trendScore,\n    weight: 0.20\n  });\n  totalSignal += trendScore * 0.20;\n  \n  // 2. Enhanced Technical Composite\n  const technicalSignal = calculateAdvancedTechnicalSignal(data, index);\n  factors.push({\n    name: \"고급 기술적 신호\",\n    value: technicalSignal,\n    weight: 0.25\n  });\n  totalSignal += technicalSignal * 0.25;\n  \n  // 3. 변동성 조정 수익률 (Volatility-Adjusted Return)\n  const volAdjReturn = calculateVolatilityAdjustedReturn(data, index);\n  factors.push({\n    name: \"변동성 조정 수익률\",\n    value: volAdjReturn * 100,\n    weight: 0.15\n  });\n  totalSignal += volAdjReturn * 15;\n  \n  // 4. 시장 미시구조 (Market Microstructure)\n  const microstructure = analyzeMarketMicrostructure(data, index);\n  factors.push({\n    name: \"시장 미시구조\",\n    value: microstructure * 100,\n    weight: 0.20\n  });\n  totalSignal += microstructure * 20;\n  \n  // 5. Enhanced Smart Money Flow with Institutional Patterns\n  const smartMoneyScore = calculateInstitutionalSmartMoneyScore(data, index);\n  const instActivity = detectInstitutionalActivity(data, index);\n  \n  let smartMoneySignal = (smartMoneyScore.score - 50) / 50;\n  \n  // Boost signal based on institutional phase\n  if (instActivity.phase === 'ACCUMULATION') {\n    smartMoneySignal = Math.min(1, smartMoneySignal * 1.5);\n  } else if (instActivity.phase === 'DISTRIBUTION') {\n    smartMoneySignal = Math.max(-1, smartMoneySignal * 1.5);\n  }\n  \n  factors.push({\n    name: \"기관 스마트머니\",\n    value: smartMoneySignal * 100,\n    weight: 0.30,\n    phase: instActivity.phase\n  });\n  totalSignal += smartMoneySignal * 30;\n  \n  // 6. Order Flow Analysis\n  const orderFlowImbalance = analyzeOrderFlowImbalance(data, index);\n  factors.push({\n    name: \"주문 흐름 불균형\",\n    value: orderFlowImbalance * 100,\n    weight: 0.15\n  });\n  totalSignal += orderFlowImbalance * 15;\n  \n  // Dynamic Risk Adjustment based on Market Regime\n  let riskMultiplier = 1;\n  switch(marketRegime) {\n    case 'HIGH_VOLATILITY':\n      riskMultiplier = 0.6;\n      break;\n    case 'BEAR_TRENDING':\n      riskMultiplier = 0.7;\n      break;\n    case 'BULL_TRENDING':\n      riskMultiplier = 1.2;\n      break;\n    case 'BREAKOUT_POTENTIAL':\n      riskMultiplier = 1.1;\n      break;\n    default:\n      riskMultiplier = calculateRiskAdjustment(data, index);\n  }\n  \n  totalSignal *= riskMultiplier;\n  \n  // Calculate Position Sizing\n  const positionSize = calculateOptimalPositionSize(data, index);\n  \n  return {\n    signal: Math.max(-100, Math.min(100, totalSignal)),\n    factors,\n    recommendation: getTradingRecommendation(totalSignal),\n    confidence: calculateSignalConfidence(factors),\n    positionSize,\n    marketRegime,\n    riskMultiplier\n  };\n}\n\n// ADX (Average Directional Index) 계산\nfunction calculateADX(data, index, period = 14) {\n  if (index < period * 2) return 0;\n  \n  let plusDM = 0, minusDM = 0, tr = 0;\n  \n  for (let i = index - period + 1; i <= index; i++) {\n    const curr = data[i];\n    const prev = data[i - 1];\n    \n    const highDiff = curr.high - prev.high;\n    const lowDiff = prev.low - curr.low;\n    \n    if (highDiff > lowDiff && highDiff > 0) plusDM += highDiff;\n    if (lowDiff > highDiff && lowDiff > 0) minusDM += lowDiff;\n    \n    const trueRange = Math.max(\n      curr.high - curr.low,\n      Math.abs(curr.high - prev.close),\n      Math.abs(curr.low - prev.close)\n    );\n    tr += trueRange;\n  }\n  \n  const plusDI = (plusDM / tr) * 100;\n  const minusDI = (minusDM / tr) * 100;\n  const dx = Math.abs(plusDI - minusDI) / (plusDI + minusDI) * 100;\n  \n  return dx;\n}\n\n// Stochastic 오실레이터 계산\nfunction calculateStochastic(data, index, period = 14) {\n  if (index < period) return 50;\n  \n  const slice = data.slice(index - period + 1, index + 1);\n  const highs = slice.map(d => d.high);\n  const lows = slice.map(d => d.low);\n  \n  const highest = Math.max(...highs);\n  const lowest = Math.min(...lows);\n  const current = data[index].close;\n  \n  if (highest === lowest) return 50;\n  \n  return ((current - lowest) / (highest - lowest)) * 100;\n}\n\n// 복합 오실레이터 점수\nfunction calculateOscillatorComposite(rsi, mfi, stochastic) {\n  let score = 0;\n  \n  // RSI 신호\n  if (rsi < 30) score += 30;\n  else if (rsi < 40) score += 15;\n  else if (rsi > 70) score -= 30;\n  else if (rsi > 60) score -= 15;\n  \n  // MFI 신호\n  if (mfi < 20) score += 25;\n  else if (mfi < 35) score += 10;\n  else if (mfi > 80) score -= 25;\n  else if (mfi > 65) score -= 10;\n  \n  // Stochastic 신호\n  if (stochastic < 20) score += 20;\n  else if (stochastic < 35) score += 10;\n  else if (stochastic > 80) score -= 20;\n  else if (stochastic > 65) score -= 10;\n  \n  // 다이버전스 보너스\n  if (rsi < 40 && mfi < 40 && stochastic < 40) score *= 1.5;\n  if (rsi > 60 && mfi > 60 && stochastic > 60) score *= 1.5;\n  \n  return Math.max(-100, Math.min(100, score));\n}\n\n// 변동성 조정 수익률\nfunction calculateVolatilityAdjustedReturn(data, index, lookback = 20) {\n  if (index < lookback) return 0;\n  \n  const returns = [];\n  for (let i = index - lookback + 1; i <= index; i++) {\n    const ret = (data[i].close - data[i - 1].close) / data[i - 1].close;\n    returns.push(ret);\n  }\n  \n  const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n  const volatility = Math.sqrt(variance);\n  \n  if (volatility === 0) return 0;\n  \n  // Sharpe Ratio 스타일 계산\n  return avgReturn / volatility;\n}\n\n// 시장 미시구조 분석\nfunction analyzeMarketMicrostructure(data, index) {\n  if (index < 20) return 0;\n  \n  const current = data[index];\n  const prev20 = data.slice(index - 20, index);\n  \n  let score = 0;\n  \n  // 1. 가격 효율성 (얼마나 부드럽게 움직이는가)\n  const priceEfficiency = calculatePriceEfficiency(prev20);\n  score += priceEfficiency * 0.3;\n  \n  // 2. 거래량 프로파일 (정상 분포 vs 이상 패턴)\n  const volumeProfile = analyzeVolumeProfile(prev20, current);\n  score += volumeProfile * 0.3;\n  \n  // 3. 스프레드 추정 (고저 차이 기반)\n  const spreadQuality = estimateSpreadQuality(current, prev20);\n  score += spreadQuality * 0.4;\n  \n  return score;\n}\n\n// 가격 효율성 계산\nfunction calculatePriceEfficiency(data) {\n  if (data.length < 2) return 0;\n  \n  let totalMove = 0;\n  let netMove = Math.abs(data[data.length - 1].close - data[0].close);\n  \n  for (let i = 1; i < data.length; i++) {\n    totalMove += Math.abs(data[i].close - data[i - 1].close);\n  }\n  \n  if (totalMove === 0) return 0;\n  \n  // 효율성이 높을수록 좋음 (1에 가까울수록 직선 움직임)\n  const efficiency = netMove / totalMove;\n  return efficiency > 0.7 ? 1 : (efficiency > 0.3 ? 0.5 : -0.5);\n}\n\n// 거래량 프로파일 분석\nfunction analyzeVolumeProfile(historical, current) {\n  const avgVolume = historical.reduce((sum, d) => sum + d.volume, 0) / historical.length;\n  const volumeRatio = current.volume / avgVolume;\n  \n  // 적정 거래량 (평균의 0.8 ~ 2배)\n  if (volumeRatio >= 0.8 && volumeRatio <= 2) {\n    return 0.5;\n  } else if (volumeRatio > 3) {\n    // 이상 거래량\n    return current.close > historical[historical.length - 1].close ? 1 : -1;\n  } else if (volumeRatio < 0.5) {\n    // 거래량 부족\n    return -0.5;\n  }\n  \n  return 0;\n}\n\n// 스프레드 품질 추정\nfunction estimateSpreadQuality(current, historical) {\n  const avgRange = historical.reduce((sum, d) => sum + (d.high - d.low), 0) / historical.length;\n  const currentRange = current.high - current.low;\n  \n  // 스프레드가 평균보다 좁으면 유동성 좋음\n  if (currentRange < avgRange * 0.7) return 1;\n  if (currentRange < avgRange) return 0.5;\n  if (currentRange > avgRange * 1.5) return -1;\n  \n  return 0;\n}\n\n// 위험 조정 계수\nfunction calculateRiskAdjustment(data, index) {\n  if (index < 60) return 1;\n  \n  const recent20 = data.slice(index - 20, index);\n  const volatility = calculateVolatility(recent20);\n  \n  // 변동성에 따른 조정 (높은 변동성 = 낮은 신뢰도)\n  if (volatility > 0.03) return 0.7;  // 일 3% 이상 변동성\n  if (volatility > 0.02) return 0.85;\n  if (volatility < 0.01) return 1.1;  // 낮은 변동성 = 높은 신뢰도\n  \n  return 1;\n}\n\n// 변동성 계산\nfunction calculateVolatility(data) {\n  if (data.length < 2) return 0;\n  \n  const returns = [];\n  for (let i = 1; i < data.length; i++) {\n    returns.push((data[i].close - data[i - 1].close) / data[i - 1].close);\n  }\n  \n  const avg = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avg, 2), 0) / returns.length;\n  \n  return Math.sqrt(variance);\n}\n\n// 신호 신뢰도 계산\nfunction calculateSignalConfidence(factors) {\n  // 모든 팩터가 같은 방향을 가리키면 높은 신뢰도\n  const positiveFactors = factors.filter(f => f.value > 0).length;\n  const negativeFactors = factors.filter(f => f.value < 0).length;\n  \n  const unanimity = Math.max(positiveFactors, negativeFactors) / factors.length;\n  const avgStrength = factors.reduce((sum, f) => sum + Math.abs(f.value), 0) / factors.length;\n  \n  return Math.round((unanimity * 0.6 + avgStrength / 100 * 0.4) * 100);\n}\n\n// 스마트머니 해석 (투자자 친화적)\nfunction getSmartMoneyInterpretation(score) {\n  if (score >= 80) return \"💰 기관/외인 대량 매집 중 → 강력 매수 시그널\";\n  if (score >= 65) return \"📈 스마트머니 순매수 → 매수 고려\";\n  if (score >= 50) return \"⚖️ 수급 균형 → 관망 추천\";\n  if (score >= 35) return \"📉 스마트머니 이탈 시작 → 주의 필요\";\n  return \"🚨 기관/외인 대량 매도 → 매도 고려\";\n}\n\n// Enhanced Trading Recommendation with Risk Management\nfunction getTradingRecommendation(signal) {\n  const urgency = Math.abs(signal) > 70 ? \"즉시\" : \"단계적\";\n  const confidence = Math.min(100, Math.abs(signal) * 1.2);\n  \n  if (signal >= 70) {\n    return {\n      action: \"STRONG BUY\",\n      description: `${urgency} 매수 포지션 구축`,\n      targetAllocation: \"15-20%\",\n      stopLoss: \"진입가 -3%\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= 40) {\n    return {\n      action: \"BUY\",\n      description: \"분할 매수 진행\",\n      targetAllocation: \"10-15%\",\n      stopLoss: \"진입가 -5%\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= 15) {\n    return {\n      action: \"ACCUMULATE\",\n      description: \"저가 분할매수 검토\",\n      targetAllocation: \"5-10%\",\n      stopLoss: \"진입가 -7%\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= -15) {\n    return {\n      action: \"HOLD\",\n      description: \"현 포지션 유지\",\n      targetAllocation: \"현재 유지\",\n      stopLoss: \"동적 조정\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= -40) {\n    return {\n      action: \"REDUCE\",\n      description: \"단계적 비중 축소\",\n      targetAllocation: \"50% 감소\",\n      stopLoss: \"즉시 실행\",\n      confidence: `${confidence}%`\n    };\n  } else if (signal >= -70) {\n    return {\n      action: \"SELL\",\n      description: \"포지션 청산 진행\",\n      targetAllocation: \"20% 이하\",\n      stopLoss: \"N/A\",\n      confidence: `${confidence}%`\n    };\n  }\n  return {\n    action: \"EXIT\",\n    description: `${urgency} 전량 청산`,\n    targetAllocation: \"0%\",\n    stopLoss: \"N/A\",\n    confidence: `${confidence}%`\n  };\n}\n\n// Enhanced VWAP 계산 (다중 앵커 지원)\nexport function calculateEnhancedVWAP(data, anchorIndices = []) {\n  if (!data || data.length === 0) return data;\n  \n  // 기본 앵커: 시작점, 최근 고점, 최근 저점\n  if (anchorIndices.length === 0) {\n    anchorIndices = [0]; // 기본값\n    \n    // 최근 60일 고점/저점 찾기\n    if (data.length > 60) {\n      const recent60 = data.slice(-60);\n      let highIndex = 0, lowIndex = 0;\n      let highPrice = 0, lowPrice = Infinity;\n      \n      recent60.forEach((d, i) => {\n        const globalIndex = data.length - 60 + i;\n        if (d.high > highPrice) {\n          highPrice = d.high;\n          highIndex = globalIndex;\n        }\n        if (d.low < lowPrice) {\n          lowPrice = d.low;\n          lowIndex = globalIndex;\n        }\n      });\n      \n      anchorIndices.push(highIndex, lowIndex);\n    }\n  }\n  \n  // 각 앵커별 VWAP 계산\n  const result = data.map(d => ({ ...d }));\n  \n  anchorIndices.forEach((anchorIndex, anchorNum) => {\n    let cumPV = 0;\n    let cumV = 0;\n    \n    for (let i = 0; i < result.length; i++) {\n      if (i < anchorIndex) {\n        result[i][`vwap${anchorNum}`] = null;\n        continue;\n      }\n      \n      const typicalPrice = (result[i].high + result[i].low + result[i].close) / 3;\n      const volume = result[i].volume || 0;\n      \n      cumPV += typicalPrice * volume;\n      cumV += volume;\n      \n      result[i][`vwap${anchorNum}`] = cumV > 0 ? cumPV / cumV : typicalPrice;\n    }\n  });\n  \n  // 기본 VWAP (첫 번째 앵커)\n  result.forEach(d => {\n    d.avwap = d.vwap0;\n  });\n  \n  return result;\n}\n\n// ============================\n// PATTERN RECOGNITION ENGINE\n// ============================\n\n// 1. 세력 매집 패턴 감지\nexport function detectAccumulationPattern(data, index) {\n  if (!data || index < 20) return { detected: false, confidence: 0 };\n  \n  const recent20 = data.slice(Math.max(0, index - 19), index + 1);\n  let signals = 0;\n  \n  // Signal 1: 가격 횡보 + 기관 지속 매수\n  const priceRange = Math.max(...recent20.map(d => d.high)) - Math.min(...recent20.map(d => d.low));\n  const avgPrice = recent20.reduce((sum, d) => sum + d.close, 0) / recent20.length;\n  const priceStable = (priceRange / avgPrice) < 0.1; // 10% 이내 변동\n  \n  const instBuying = recent20.filter(d => (d._flows?.기관합계 || 0) > 0).length;\n  if (priceStable && instBuying > 12) signals += 30;\n  \n  // Signal 2: 거래량 감소 + 기관 매수\n  const volTrend = recent20.slice(-5).reduce((sum, d) => sum + d.volume, 0) / \n                   recent20.slice(0, 5).reduce((sum, d) => sum + d.volume, 0);\n  if (volTrend < 0.7 && instBuying > 10) signals += 25;\n  \n  // Signal 3: 개인 매도 + 기관/외인 매수 (스마트머니 교체)\n  const smartMoneyBuy = recent20.filter(d => \n    (d._flows?.기관합계 || 0) + (d._flows?.외국인합계 || 0) > 0 &&\n    (d._flows?.개인 || 0) < 0\n  ).length;\n  if (smartMoneyBuy > 12) signals += 25;\n  \n  // Signal 4: 하단 지지선 반복 테스트\n  const lows = recent20.map(d => d.low);\n  const minLow = Math.min(...lows);\n  const supportTests = lows.filter(low => Math.abs(low - minLow) / minLow < 0.01).length;\n  if (supportTests > 3) signals += 20;\n  \n  return {\n    detected: signals >= 60,\n    confidence: Math.min(100, signals),\n    type: '매집',\n    description: signals >= 60 ? '세력 매집 진행 중' : null\n  };\n}\n\n// 2. 상승 돌파 패턴\nexport function detectBreakoutPattern(data, index) {\n  if (!data || index < 20) return { detected: false, confidence: 0 };\n  \n  const current = data[index];\n  const recent20 = data.slice(Math.max(0, index - 19), index + 1);\n  // 60일 데이터가 없으면 있는 만큼만 사용\n  const lookback = Math.min(60, index + 1);\n  const recent60 = data.slice(Math.max(0, index - lookback + 1), index + 1);\n  \n  let signals = 0;\n  \n  // 60일 최고가 돌파\n  const high60 = Math.max(...recent60.slice(0, -1).map(d => d.high));\n  if (current.close > high60) signals += 40;\n  \n  // 거래량 폭발 (평균 대비 200% 이상)\n  const avgVol = recent20.slice(0, -1).reduce((sum, d) => sum + d.volume, 0) / 19;\n  if (current.volume > avgVol * 2) signals += 30;\n  \n  // 스마트머니 대량 매수\n  const smartMoney = (current._flows?.기관합계 || 0) + (current._flows?.외국인합계 || 0);\n  const avgSmartMoney = recent20.slice(0, -1).reduce((sum, d) => \n    sum + (d._flows?.기관합계 || 0) + (d._flows?.외국인합계 || 0), 0) / 19;\n  if (smartMoney > avgSmartMoney * 3) signals += 30;\n  \n  return {\n    detected: signals >= 70,\n    confidence: Math.min(100, signals),\n    type: '돌파',\n    description: signals >= 70 ? '상승 돌파 신호' : null\n  };\n}\n\n// 3. 급락 후 반등 패턴 (Dead Cat Bounce vs Real Reversal)\nexport function detectReversalPattern(data, index) {\n  if (!data || index < 10) return { detected: false, confidence: 0 };\n  \n  const recent10 = data.slice(index - 9, index + 1);\n  const current = data[index];\n  \n  // 최근 급락 확인 (-10% 이상)\n  const highPoint = Math.max(...recent10.slice(0, 5).map(d => d.high));\n  const lowPoint = Math.min(...recent10.slice(5).map(d => d.low));\n  const dropRate = (lowPoint - highPoint) / highPoint;\n  \n  if (dropRate < -0.1) {\n    let signals = 0;\n    \n    // 오늘 반등\n    if (current.close > data[index-1].close * 1.03) signals += 30;\n    \n    // 기관 매수 전환\n    if ((current._flows?.기관합계 || 0) > 0 && \n        (data[index-1]._flows?.기관합계 || 0) <= 0) signals += 40;\n    \n    // 거래량 증가\n    if (current.volume > data[index-1].volume * 1.5) signals += 30;\n    \n    return {\n      detected: signals >= 60,\n      confidence: Math.min(100, signals),\n      type: '반등',\n      description: signals >= 60 ? '급락 후 반등 시작' : null,\n      warning: signals < 80 ? '데드캣 바운스 주의' : null\n    };\n  }\n  \n  return { detected: false, confidence: 0 };\n}\n\n// 4. 매도 타이밍 패턴\nexport function detectDistributionPattern(data, index) {\n  if (!data || index < 20) return { detected: false, confidence: 0 };\n  \n  const recent20 = data.slice(index - 19, index + 1);\n  const current = data[index];\n  let signals = 0;\n  \n  // 고점 부근에서 기관 매도\n  const high20 = Math.max(...recent20.map(d => d.high));\n  const nearHigh = current.close > high20 * 0.95;\n  const instSelling = (current._flows?.기관합계 || 0) < 0;\n  \n  if (nearHigh && instSelling) signals += 40;\n  \n  // 거래량 증가 + 가격 정체\n  const priceChange = (current.close - recent20[0].close) / recent20[0].close;\n  const volIncrease = current.volume > recent20[0].volume * 1.5;\n  \n  if (Math.abs(priceChange) < 0.02 && volIncrease && instSelling) signals += 30;\n  \n  // 개인 매수 폭증 (물량 떠넘기기)\n  const retailBuying = (current._flows?.개인 || 0) > 0;\n  const retailAmount = Math.abs(current._flows?.개인 || 0);\n  const avgRetail = recent20.slice(0, -1).reduce((sum, d) => \n    sum + Math.abs(d._flows?.개인 || 0), 0) / 19;\n  \n  if (retailBuying && retailAmount > avgRetail * 2 && instSelling) signals += 30;\n  \n  return {\n    detected: signals >= 60,\n    confidence: Math.min(100, signals),\n    type: '분산',\n    description: signals >= 60 ? '고점 분산 매도 진행' : null\n  };\n}\n\n// ============================\n// ENTRY/EXIT SIGNAL SYSTEM\n// ============================\n\nexport function generateTradingSignals(data, index) {\n  if (!data || index < 20) return null;\n  \n  const current = data[index];\n  const signals = [];\n  \n  // 패턴 체크\n  const accumulation = detectAccumulationPattern(data, index);\n  const breakout = detectBreakoutPattern(data, index);\n  const reversal = detectReversalPattern(data, index);\n  const distribution = detectDistributionPattern(data, index);\n  \n  // 기술적 지표\n  const tradingSignal = calculateInstitutionalTradingSignal(data, index);\n  const smartMoney = calculateInstitutionalSmartMoneyScore(data, index);\n  \n  // BUY SIGNALS\n  if (accumulation.detected && smartMoney.score > 55) {\n    signals.push({\n      type: 'BUY',\n      strength: 'STRONG',\n      entry: current.close,\n      stopLoss: current.close * 0.95,\n      target1: current.close * 1.05,\n      target2: current.close * 1.10,\n      target3: current.close * 1.20,\n      reason: '세력 매집 완료 + 스마트머니 유입',\n      confidence: (accumulation.confidence + smartMoney.score) / 2,\n      riskReward: 2.0\n    });\n  }\n  \n  if (breakout.detected && tradingSignal.signal > 50) {\n    signals.push({\n      type: 'BUY',\n      strength: 'STRONG',\n      entry: current.close,\n      stopLoss: current.close * 0.97,\n      target1: current.close * 1.08,\n      target2: current.close * 1.15,\n      target3: current.close * 1.30,\n      reason: '돌파 매수 신호',\n      confidence: breakout.confidence,\n      riskReward: 3.5\n    });\n  }\n  \n  if (reversal.detected && !reversal.warning) {\n    signals.push({\n      type: 'BUY',\n      strength: 'MODERATE',\n      entry: current.close,\n      stopLoss: current.close * 0.93,\n      target1: current.close * 1.07,\n      target2: current.close * 1.12,\n      reason: '급락 후 반등',\n      confidence: reversal.confidence,\n      riskReward: 1.7,\n      warning: '분할 매수 권장'\n    });\n  }\n  \n  // SELL SIGNALS\n  if (distribution.detected) {\n    signals.push({\n      type: 'SELL',\n      strength: 'STRONG',\n      exit: current.close,\n      reason: '기관 분산 매도',\n      confidence: distribution.confidence,\n      action: '전량 매도 또는 50% 이상 비중 축소'\n    });\n  }\n  \n  if (tradingSignal.signal < -50 && smartMoney.score < 40) {\n    signals.push({\n      type: 'SELL',\n      strength: 'STRONG',\n      exit: current.close,\n      reason: '종합 매도 신호 + 스마트머니 이탈',\n      confidence: 85,\n      action: '즉시 청산'\n    });\n  }\n  \n  // Default weak signals based on trend\n  if (signals.length === 0) {\n    // 기본 트렌드 신호 추가\n    if (smartMoney.score > 50) {\n      signals.push({\n        type: 'BUY',\n        strength: 'WEAK',\n        entry: current.close,\n        stopLoss: current.close * 0.97,\n        target1: current.close * 1.03,\n        target2: current.close * 1.05,\n        reason: '스마트머니 점수 양호',\n        confidence: smartMoney.score,\n        riskReward: 1.0\n      });\n    } else if (smartMoney.score < 50) {\n      signals.push({\n        type: 'SELL',\n        strength: 'WEAK',\n        exit: current.close,\n        reason: '스마트머니 점수 부진',\n        confidence: 100 - smartMoney.score,\n        action: '부분 익절 고려'\n      });\n    }\n  }\n  \n  // Risk Management\n  const volatility = calculateVolatility(data.slice(index - 19, index + 1));\n  const positionSize = calculateOptimalPositionSize(data, index);\n  \n  return {\n    signals,\n    bestSignal: signals.sort((a, b) => b.confidence - a.confidence)[0],\n    riskLevel: volatility > 0.03 ? 'HIGH' : volatility > 0.02 ? 'MEDIUM' : 'LOW',\n    suggestedPosition: positionSize,\n    summary: signals.length > 0 ? \n      `${signals.filter(s => s.type === 'BUY').length}개 매수, ${signals.filter(s => s.type === 'SELL').length}개 매도 신호` :\n      '관망'\n  };\n}\n\n// Advanced Backtesting with Realistic Execution\nexport function backtestSignalPerformance(data, lookback = 60) {\n  if (!data || data.length < Math.max(20, lookback)) return null;\n  \n  // 데이터가 적으면 lookback 조정\n  const adjustedLookback = Math.min(lookback, Math.max(20, data.length - 20));\n  \n  const trades = [];\n  let capital = 100000000; // 1억원 시작\n  let position = 0;\n  let entryPrice = 0;\n  \n  for (let i = adjustedLookback; i < data.length - 1; i++) {\n    const signals = generateTradingSignals(data, i);\n    \n    if (!signals || !signals.bestSignal) continue;\n    \n    const signal = signals.bestSignal;\n    const current = data[i];\n    const next = data[i + 1];\n    \n    // BUY 실행\n    if (signal.type === 'BUY' && position === 0) {\n      const shares = Math.floor((capital * 0.3) / next.open); // 30% 포지션\n      position = shares;\n      entryPrice = next.open;\n      capital -= shares * next.open * 1.003; // 수수료 0.3%\n      \n      trades.push({\n        date: next.date,\n        type: 'BUY',\n        price: next.open,\n        shares,\n        reason: signal.reason\n      });\n    }\n    \n    // SELL 실행 또는 손절/익절\n    if (position > 0) {\n      const currentPrice = next.close;\n      const profitRate = (currentPrice - entryPrice) / entryPrice;\n      \n      // 익절 체크 (10% 수익)\n      if (profitRate > 0.10) {\n        capital += position * currentPrice * 0.997; // 수수료 차감\n        trades.push({\n          date: next.date,\n          type: 'SELL',\n          price: currentPrice,\n          shares: position,\n          profit: profitRate * 100,\n          reason: '목표가 도달 (익절)'\n        });\n        position = 0;\n      }\n      // 손절 체크 (-5% 손실)\n      else if (profitRate < -0.05) {\n        capital += position * currentPrice * 0.997;\n        trades.push({\n          date: next.date,\n          type: 'SELL',\n          price: currentPrice,\n          shares: position,\n          profit: profitRate * 100,\n          reason: '손절'\n        });\n        position = 0;\n      }\n      // 매도 신호\n      else if (signal.type === 'SELL' && signal.strength === 'STRONG') {\n        capital += position * currentPrice * 0.997;\n        trades.push({\n          date: next.date,\n          type: 'SELL',\n          price: currentPrice,\n          shares: position,\n          profit: profitRate * 100,\n          reason: signal.reason\n        });\n        position = 0;\n      }\n    }\n  }\n  \n  // 최종 정산\n  if (position > 0) {\n    const lastPrice = data[data.length - 1].close;\n    capital += position * lastPrice * 0.997;\n  }\n  \n  // 성과 계산\n  const totalReturn = ((capital - 100000000) / 100000000) * 100;\n  const winTrades = trades.filter(t => t.type === 'SELL' && t.profit > 0);\n  const loseTrades = trades.filter(t => t.type === 'SELL' && t.profit <= 0);\n  const winRate = winTrades.length / (winTrades.length + loseTrades.length) * 100;\n  \n  const avgWin = winTrades.length > 0 ? \n    winTrades.reduce((sum, t) => sum + t.profit, 0) / winTrades.length : 0;\n  const avgLoss = loseTrades.length > 0 ?\n    Math.abs(loseTrades.reduce((sum, t) => sum + t.profit, 0) / loseTrades.length) : 0;\n  \n  // 최대 낙폭 계산\n  let maxCapital = 100000000;\n  let maxDrawdown = 0;\n  let runningCapital = 100000000;\n  \n  trades.forEach(trade => {\n    if (trade.type === 'SELL') {\n      runningCapital *= (1 + trade.profit / 100);\n      maxCapital = Math.max(maxCapital, runningCapital);\n      const drawdown = (maxCapital - runningCapital) / maxCapital;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n  });\n  \n  return {\n    totalReturn: totalReturn.toFixed(2),\n    totalTrades: trades.length,\n    winRate: winRate.toFixed(1),\n    avgWin: avgWin.toFixed(2),\n    avgLoss: avgLoss.toFixed(2),\n    profitFactor: avgLoss > 0 ? (avgWin / avgLoss).toFixed(2) : 'N/A',\n    maxDrawdown: (maxDrawdown * 100).toFixed(2),\n    sharpeRatio: calculateSharpeRatio(trades),\n    trades: trades.slice(-10), // 최근 10개 거래\n    finalCapital: capital\n  };\n}\n\n// Sharpe Ratio 계산\nfunction calculateSharpeRatio(trades) {\n  if (trades.length < 2) return 0;\n  \n  const returns = trades\n    .filter(t => t.type === 'SELL')\n    .map(t => t.profit / 100);\n  \n  if (returns.length === 0) return 0;\n  \n  const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n  const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\n  const stdDev = Math.sqrt(variance);\n  \n  return stdDev > 0 ? (avgReturn / stdDev * Math.sqrt(252)).toFixed(2) : 0;\n}\n\nconst institutionalAnalytics = {\n  calculateInstitutionalSmartMoneyScore,\n  calculateInstitutionalTradingSignal,\n  calculateEnhancedVWAP,\n  detectMarketRegime,\n  calculateOptimalPositionSize,\n  backtestSignalPerformance,\n  generateTradingSignals,\n  detectAccumulationPattern,\n  detectBreakoutPattern,\n  detectReversalPattern,\n  detectDistributionPattern\n};\n\nexport default institutionalAnalytics;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}