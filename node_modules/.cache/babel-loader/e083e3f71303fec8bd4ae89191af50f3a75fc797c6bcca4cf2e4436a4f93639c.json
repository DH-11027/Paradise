{"ast":null,"code":"// =============================\n// Data parsing and formatting utilities\n// =============================\nexport function parseCSV(text){// Minimal CSV parser (comma or tab). Expects header row.\n// Remove all possible BOM variants\nlet cleanText=text;// Remove various BOM encodings\ncleanText=cleanText.replace(/^\\uFEFF/,'');// UTF-16 BOM\ncleanText=cleanText.replace(/^\\xEF\\xBB\\xBF/,'');// UTF-8 BOM as hex\ncleanText=cleanText.replace(/^﻿/,'');// UTF-8 BOM as character\n// Remove BOM if it appears as actual character codes\nif(cleanText.charCodeAt(0)===0xFEFF||cleanText.charCodeAt(0)===65279){cleanText=cleanText.substring(1);}cleanText=cleanText.trim();console.log('CSV parsing - first 100 chars:',cleanText.substring(0,100));const lines=cleanText.split(/\\r?\\n/).filter(Boolean);if(lines.length<2){console.log('CSV parsing failed: not enough lines',lines.length);return[];}const sep=lines[0].includes(\"\\t\")?\"\\t\":\",\";const headers=lines[0].split(sep).map(h=>{// Clean each header\nlet cleaned=h.trim();cleaned=cleaned.replace(/^[\\uFEFF\\xEF\\xBB\\xBF]/,'');cleaned=cleaned.replace(/^\"(.*)\"$/,'$1');// Remove quotes if present\nreturn cleaned;});console.log('CSV headers detected:',headers);const data=lines.slice(1).map((line,idx)=>{const cols=line.split(sep);const row={};headers.forEach((h,i)=>{var _cols$i$trim,_cols$i,_cols$i$trim2;let value=(_cols$i$trim=(_cols$i=cols[i])===null||_cols$i===void 0?void 0:(_cols$i$trim2=_cols$i.trim)===null||_cols$i$trim2===void 0?void 0:_cols$i$trim2.call(_cols$i))!==null&&_cols$i$trim!==void 0?_cols$i$trim:\"\";value=value.replace(/^\"(.*)\"$/,'$1');// Remove quotes if present\nrow[h]=value;});if(idx<2)console.log(\"CSV row \".concat(idx,\":\"),row);return row;});console.log(\"CSV parsed \".concat(data.length,\" rows\"));return data;}export function toNum(v){if(typeof v===\"number\")return v;if(v===null||v===undefined)return 0;const s=String(v).trim();if(s===\"\"||s===\"-\")return 0;// Remove commas and KR units; support scientific notation (e.g., -1.1E+09)\nconst clean=s.replace(/,/g,\"\").replace(/원|주|%/g,\"\");const n=Number(clean);return Number.isFinite(n)?n:0;}export function fmtDate(d){if(!d)return\"\";// 문자열인 경우 다양한 형식 처리\nif(typeof d==='string'){// T가 포함된 ISO 형식이면 날짜 부분만 추출\nif(d.includes('T')){return d.split('T')[0];}// YYYY-MM-DD 또는 YYYY/MM/DD 형식 처리\nconst cleaned=d.trim().replace(/\\//g,'-');// YYYY-M-D 형식을 YYYY-MM-DD로 변환\nconst parts=cleaned.split('-');if(parts.length===3){const year=parts[0];const month=parts[1].padStart(2,'0');const day=parts[2].padStart(2,'0');return\"\".concat(year,\"-\").concat(month,\"-\").concat(day);}}// Date 객체로 파싱 시도\ntry{const t=new Date(d);if(!Number.isNaN(t.getTime())){return t.toISOString().slice(0,10);}}catch(e){// 파싱 실패\n}return String(d);// keep original if invalid\n}","map":{"version":3,"names":["parseCSV","text","cleanText","replace","charCodeAt","substring","trim","console","log","lines","split","filter","Boolean","length","sep","includes","headers","map","h","cleaned","data","slice","line","idx","cols","row","forEach","i","_cols$i$trim","_cols$i","_cols$i$trim2","value","call","concat","toNum","v","undefined","s","String","clean","n","Number","isFinite","fmtDate","d","parts","year","month","padStart","day","t","Date","isNaN","getTime","toISOString","e"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/dataUtils.js"],"sourcesContent":["// =============================\n// Data parsing and formatting utilities\n// =============================\n\nexport function parseCSV(text) {\n  // Minimal CSV parser (comma or tab). Expects header row.\n  // Remove all possible BOM variants\n  let cleanText = text;\n  \n  // Remove various BOM encodings\n  cleanText = cleanText.replace(/^\\uFEFF/, ''); // UTF-16 BOM\n  cleanText = cleanText.replace(/^\\xEF\\xBB\\xBF/, ''); // UTF-8 BOM as hex\n  cleanText = cleanText.replace(/^﻿/, ''); // UTF-8 BOM as character\n  \n  // Remove BOM if it appears as actual character codes\n  if (cleanText.charCodeAt(0) === 0xFEFF || cleanText.charCodeAt(0) === 65279) {\n    cleanText = cleanText.substring(1);\n  }\n  \n  cleanText = cleanText.trim();\n  \n  console.log('CSV parsing - first 100 chars:', cleanText.substring(0, 100));\n  \n  const lines = cleanText.split(/\\r?\\n/).filter(Boolean);\n  if (lines.length < 2) {\n    console.log('CSV parsing failed: not enough lines', lines.length);\n    return [];\n  }\n  \n  const sep = lines[0].includes(\"\\t\") ? \"\\t\" : \",\";\n  const headers = lines[0].split(sep).map((h) => {\n    // Clean each header\n    let cleaned = h.trim();\n    cleaned = cleaned.replace(/^[\\uFEFF\\xEF\\xBB\\xBF]/, '');\n    cleaned = cleaned.replace(/^\"(.*)\"$/, '$1'); // Remove quotes if present\n    return cleaned;\n  });\n  \n  console.log('CSV headers detected:', headers);\n  \n  const data = lines.slice(1).map((line, idx) => {\n    const cols = line.split(sep);\n    const row = {};\n    headers.forEach((h, i) => {\n      let value = cols[i]?.trim?.() ?? \"\";\n      value = value.replace(/^\"(.*)\"$/, '$1'); // Remove quotes if present\n      row[h] = value;\n    });\n    if (idx < 2) console.log(`CSV row ${idx}:`, row);\n    return row;\n  });\n  \n  console.log(`CSV parsed ${data.length} rows`);\n  return data;\n}\n\nexport function toNum(v) {\n  if (typeof v === \"number\") return v;\n  if (v === null || v === undefined) return 0;\n  const s = String(v).trim();\n  if (s === \"\" || s === \"-\") return 0;\n  // Remove commas and KR units; support scientific notation (e.g., -1.1E+09)\n  const clean = s.replace(/,/g, \"\").replace(/원|주|%/g, \"\");\n  const n = Number(clean);\n  return Number.isFinite(n) ? n : 0;\n}\n\nexport function fmtDate(d) {\n  if (!d) return \"\";\n  \n  // 문자열인 경우 다양한 형식 처리\n  if (typeof d === 'string') {\n    // T가 포함된 ISO 형식이면 날짜 부분만 추출\n    if (d.includes('T')) {\n      return d.split('T')[0];\n    }\n    \n    // YYYY-MM-DD 또는 YYYY/MM/DD 형식 처리\n    const cleaned = d.trim().replace(/\\//g, '-');\n    \n    // YYYY-M-D 형식을 YYYY-MM-DD로 변환\n    const parts = cleaned.split('-');\n    if (parts.length === 3) {\n      const year = parts[0];\n      const month = parts[1].padStart(2, '0');\n      const day = parts[2].padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n  }\n  \n  // Date 객체로 파싱 시도\n  try {\n    const t = new Date(d);\n    if (!Number.isNaN(t.getTime())) {\n      return t.toISOString().slice(0, 10);\n    }\n  } catch (e) {\n    // 파싱 실패\n  }\n  \n  return String(d); // keep original if invalid\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}