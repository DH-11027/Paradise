{"ast":null,"code":"// CSV 파싱 테스트 스크립트\n\nimport { parseCSV } from './utils/dataUtils';\nimport { parseInvestorFlowCSV } from './utils/investorUtils';\nimport { robustParseCSV, parseInvestorFlowData } from './utils/robustCSVParser';\n\n// 테스트 데이터 (실제 파일과 동일한 형식)\nconst testFlowCSV = `날짜,금융투자,보험,투신,사모,은행,기타금융,연기금,기타법인,개인,외국인,기타외국인,기관합계,전체\n2020-08-10,-1120696400,-333365000,-229195850,44312800,0,0,8486650,143419300,5094342700,-3617474800,10170600,-1487038500,0\n2020-08-11,615642250,137802200,930901300,28587900,0,0,0,206228400,-1418363250,-476630700,-24168100,1919162050,0`;\n\n// BOM이 포함된 테스트 데이터\nconst testFlowCSVWithBOM = '\\uFEFF' + testFlowCSV;\nexport function testParsing() {\n  console.log('=== CSV 파싱 테스트 시작 ===');\n\n  // 1. 일반 CSV 파싱 테스트\n  console.log('\\n1. 일반 parseCSV 테스트:');\n  const parsed1 = parseCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed1.length);\n  console.log('첫 번째 행:', parsed1[0]);\n\n  // 2. BOM 포함 CSV 파싱 테스트\n  console.log('\\n2. BOM 포함 parseCSV 테스트:');\n  const parsed2 = parseCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed2.length);\n  console.log('첫 번째 행:', parsed2[0]);\n\n  // 3. 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n3. parseInvestorFlowCSV 테스트:');\n  const parsed3 = parseInvestorFlowCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed3.length);\n  console.log('첫 번째 행:', parsed3[0]);\n\n  // 4. BOM 포함 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n4. BOM 포함 parseInvestorFlowCSV 테스트:');\n  const parsed4 = parseInvestorFlowCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed4.length);\n  console.log('첫 번째 행:', parsed4[0]);\n\n  // 5. 강력한 파서 테스트\n  console.log('\\n5. 강력한 파서 테스트:');\n  const parsed5 = parseInvestorFlowData(testFlowCSV);\n  console.log('파싱된 행 수:', parsed5.length);\n  console.log('첫 번째 행:', parsed5[0]);\n\n  // 6. BOM 포함 강력한 파서 테스트\n  console.log('\\n6. BOM 포함 강력한 파서 테스트:');\n  const parsed6 = parseInvestorFlowData(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed6.length);\n  console.log('첫 번째 행:', parsed6[0]);\n\n  // 7. 실제 파일 테스트\n  console.log('\\n7. 실제 파일 로드 테스트:');\n  fetch('/flows_data.csv').then(res => res.text()).then(text => {\n    console.log('파일 크기:', text.length);\n    console.log('첫 100자:', text.substring(0, 100));\n\n    // 강력한 파서로 테스트\n    const robustParsed = parseInvestorFlowData(text);\n    console.log('[강력한 파서] 파싱된 행 수:', robustParsed.length);\n    if (robustParsed.length > 0) {\n      console.log('[강력한 파서] 첫 번째 행:', robustParsed[0]);\n    }\n\n    // 기존 파서로도 테스트\n    const oldParsed = parseInvestorFlowCSV(text);\n    console.log('[기존 파서] 파싱된 행 수:', oldParsed.length);\n    if (oldParsed.length > 0) {\n      console.log('[기존 파서] 첫 번째 행:', oldParsed[0]);\n    }\n  }).catch(err => console.error('파일 로드 실패:', err));\n  console.log('=== 테스트 완료 ===');\n}\n\n// 자동 실행\nif (typeof window !== 'undefined') {\n  window.testCSVParsing = testParsing;\n  console.log('브라우저 콘솔에서 testCSVParsing()을 실행하세요.');\n}","map":{"version":3,"names":["parseCSV","parseInvestorFlowCSV","robustParseCSV","parseInvestorFlowData","testFlowCSV","testFlowCSVWithBOM","testParsing","console","log","parsed1","length","parsed2","parsed3","parsed4","parsed5","parsed6","fetch","then","res","text","substring","robustParsed","oldParsed","catch","err","error","window","testCSVParsing"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/testCSVParsing.js"],"sourcesContent":["// CSV 파싱 테스트 스크립트\n\nimport { parseCSV } from './utils/dataUtils';\nimport { parseInvestorFlowCSV } from './utils/investorUtils';\nimport { robustParseCSV, parseInvestorFlowData } from './utils/robustCSVParser';\n\n// 테스트 데이터 (실제 파일과 동일한 형식)\nconst testFlowCSV = `날짜,금융투자,보험,투신,사모,은행,기타금융,연기금,기타법인,개인,외국인,기타외국인,기관합계,전체\n2020-08-10,-1120696400,-333365000,-229195850,44312800,0,0,8486650,143419300,5094342700,-3617474800,10170600,-1487038500,0\n2020-08-11,615642250,137802200,930901300,28587900,0,0,0,206228400,-1418363250,-476630700,-24168100,1919162050,0`;\n\n// BOM이 포함된 테스트 데이터\nconst testFlowCSVWithBOM = '\\uFEFF' + testFlowCSV;\n\nexport function testParsing() {\n  console.log('=== CSV 파싱 테스트 시작 ===');\n  \n  // 1. 일반 CSV 파싱 테스트\n  console.log('\\n1. 일반 parseCSV 테스트:');\n  const parsed1 = parseCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed1.length);\n  console.log('첫 번째 행:', parsed1[0]);\n  \n  // 2. BOM 포함 CSV 파싱 테스트\n  console.log('\\n2. BOM 포함 parseCSV 테스트:');\n  const parsed2 = parseCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed2.length);\n  console.log('첫 번째 행:', parsed2[0]);\n  \n  // 3. 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n3. parseInvestorFlowCSV 테스트:');\n  const parsed3 = parseInvestorFlowCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed3.length);\n  console.log('첫 번째 행:', parsed3[0]);\n  \n  // 4. BOM 포함 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n4. BOM 포함 parseInvestorFlowCSV 테스트:');\n  const parsed4 = parseInvestorFlowCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed4.length);\n  console.log('첫 번째 행:', parsed4[0]);\n  \n  // 5. 강력한 파서 테스트\n  console.log('\\n5. 강력한 파서 테스트:');\n  const parsed5 = parseInvestorFlowData(testFlowCSV);\n  console.log('파싱된 행 수:', parsed5.length);\n  console.log('첫 번째 행:', parsed5[0]);\n  \n  // 6. BOM 포함 강력한 파서 테스트\n  console.log('\\n6. BOM 포함 강력한 파서 테스트:');\n  const parsed6 = parseInvestorFlowData(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed6.length);\n  console.log('첫 번째 행:', parsed6[0]);\n  \n  // 7. 실제 파일 테스트\n  console.log('\\n7. 실제 파일 로드 테스트:');\n  fetch('/flows_data.csv')\n    .then(res => res.text())\n    .then(text => {\n      console.log('파일 크기:', text.length);\n      console.log('첫 100자:', text.substring(0, 100));\n      \n      // 강력한 파서로 테스트\n      const robustParsed = parseInvestorFlowData(text);\n      console.log('[강력한 파서] 파싱된 행 수:', robustParsed.length);\n      if (robustParsed.length > 0) {\n        console.log('[강력한 파서] 첫 번째 행:', robustParsed[0]);\n      }\n      \n      // 기존 파서로도 테스트\n      const oldParsed = parseInvestorFlowCSV(text);\n      console.log('[기존 파서] 파싱된 행 수:', oldParsed.length);\n      if (oldParsed.length > 0) {\n        console.log('[기존 파서] 첫 번째 행:', oldParsed[0]);\n      }\n    })\n    .catch(err => console.error('파일 로드 실패:', err));\n    \n  console.log('=== 테스트 완료 ===');\n}\n\n// 자동 실행\nif (typeof window !== 'undefined') {\n  window.testCSVParsing = testParsing;\n  console.log('브라우저 콘솔에서 testCSVParsing()을 실행하세요.');\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}