{"ast":null,"code":"import{parseCSV,toNum}from'./dataUtils';// =============================\n// Investor mapping & parsing (KRX style, Korean headers)\n// =============================\nexport const INVESTOR_KEYS=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\"];export function normalizeInvestorRow(r){const get=function(k){let alts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const cand=[k,...alts];for(const key of cand){if(r[key]!==undefined)return toNum(r[key]);}return 0;};const out={date:r.date||r.Date||r[\"날짜\"],금융투자:get(\"금융투자\",[\"Securities\",\"FinancialInvestment\"]),보험:get(\"보험\",[\"Insurance\"]),투신:get(\"투신\",[\"InvestmentTrust\"]),사모:get(\"사모\",[\"PrivateEquity\",\"사모펀드\"]),은행:get(\"은행\",[\"Bank\"]),기타금융:get(\"기타금융\",[\"OtherFinance\"]),연기금:get(\"연기금\",[\"Pension\"]),기타법인:get(\"기타법인\",[\"OtherCorporation\"]),개인:get(\"개인\",[\"Individual\"]),외국인:get(\"외국인\",[\"Foreigner\",\"Foreign\"]),기타외국인:get(\"기타외국인\",[\"OtherForeigner\"]),기관합계:get(\"기관합계\",[\"기관\",\"InstitutionTotal\"])};// If 기관합계 not provided or zero, compute from parts (excluding 개인/외국인 계열)\nif(!out.기관합계){const parts=[\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\"];out.기관합계=parts.reduce((s,k)=>s+toNum(out[k]),0);}return out;}export function parseInvestorFlowCSV(text){// 1) 일반 CSV/TSV 시도\nlet raw=parseCSV(text);let parsed=raw.map(normalizeInvestorRow).filter(r=>r.date).sort((a,b)=>new Date(a.date)-new Date(b.date));// 2) 실패하면: 헤더에 탭/콤마가 없고 공백이 있으면 공백 기준 파싱\nif(parsed.length===0){const lines=text.trim().split(/\\r?\\n/);const head=lines[0]||\"\";const looksWS=!head.includes(\",\")&&!head.includes(\"\\t\")&&/\\s+/.test(head);if(looksWS){// 공백으로 구분된 데이터를 직접 파싱\nconst headers=head.trim().split(/\\s+/);const rows=lines.slice(1).map(line=>{const values=line.trim().split(/\\s+/);const row={};headers.forEach((h,i)=>{row[h]=values[i]||\"\";});return row;});parsed=rows.map(normalizeInvestorRow).filter(r=>r.date).sort((a,b)=>new Date(a.date)-new Date(b.date));}}return parsed;}","map":{"version":3,"names":["parseCSV","toNum","INVESTOR_KEYS","normalizeInvestorRow","r","get","k","alts","arguments","length","undefined","cand","key","out","date","Date","금융투자","보험","투신","사모","은행","기타금융","연기금","기타법인","개인","외국인","기타외국인","기관합계","parts","reduce","s","parseInvestorFlowCSV","text","raw","parsed","map","filter","sort","a","b","lines","trim","split","head","looksWS","includes","test","headers","rows","slice","line","values","row","forEach","h","i"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/investorUtils.js"],"sourcesContent":["import { parseCSV, toNum } from './dataUtils';\n\n// =============================\n// Investor mapping & parsing (KRX style, Korean headers)\n// =============================\nexport const INVESTOR_KEYS = [\n  \"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\",\"개인\",\"외국인\",\"기타외국인\",\"기관합계\"\n];\n\nexport function normalizeInvestorRow(r) {\n  const get = (k, alts=[]) => {\n    const cand = [k, ...alts];\n    for (const key of cand) {\n      if (r[key] !== undefined) return toNum(r[key]);\n    }\n    return 0;\n  };\n  const out = {\n    date: r.date || r.Date || r[\"날짜\"],\n    금융투자: get(\"금융투자\", [\"Securities\",\"FinancialInvestment\"]),\n    보험: get(\"보험\", [\"Insurance\"]),\n    투신: get(\"투신\", [\"InvestmentTrust\"]),\n    사모: get(\"사모\", [\"PrivateEquity\",\"사모펀드\"]),\n    은행: get(\"은행\", [\"Bank\"]),\n    기타금융: get(\"기타금융\", [\"OtherFinance\"]),\n    연기금: get(\"연기금\", [\"Pension\"]),\n    기타법인: get(\"기타법인\", [\"OtherCorporation\"]),\n    개인: get(\"개인\", [\"Individual\"]),\n    외국인: get(\"외국인\", [\"Foreigner\",\"Foreign\"]),\n    기타외국인: get(\"기타외국인\", [\"OtherForeigner\"]),\n    기관합계: get(\"기관합계\", [\"기관\", \"InstitutionTotal\"]),\n  };\n  // If 기관합계 not provided or zero, compute from parts (excluding 개인/외국인 계열)\n  if (!out.기관합계) {\n    const parts = [\"금융투자\",\"보험\",\"투신\",\"사모\",\"은행\",\"기타금융\",\"연기금\",\"기타법인\"];\n    out.기관합계 = parts.reduce((s,k)=>s+toNum(out[k]),0);\n  }\n  return out;\n}\n\nexport function parseInvestorFlowCSV(text) {\n  // 1) 일반 CSV/TSV 시도\n  let raw = parseCSV(text);\n  let parsed = raw\n    .map(normalizeInvestorRow)\n    .filter((r) => r.date)\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // 2) 실패하면: 헤더에 탭/콤마가 없고 공백이 있으면 공백 기준 파싱\n  if (parsed.length === 0) {\n    const lines = text.trim().split(/\\r?\\n/);\n    const head = lines[0] || \"\";\n    const looksWS = !head.includes(\",\") && !head.includes(\"\\t\") && /\\s+/.test(head);\n    if (looksWS) {\n      // 공백으로 구분된 데이터를 직접 파싱\n      const headers = head.trim().split(/\\s+/);\n      const rows = lines.slice(1).map(line => {\n        const values = line.trim().split(/\\s+/);\n        const row = {};\n        headers.forEach((h, i) => {\n          row[h] = values[i] || \"\";\n        });\n        return row;\n      });\n      parsed = rows\n        .map(normalizeInvestorRow)\n        .filter((r) => r.date)\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\n    }\n  }\n  return parsed;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}