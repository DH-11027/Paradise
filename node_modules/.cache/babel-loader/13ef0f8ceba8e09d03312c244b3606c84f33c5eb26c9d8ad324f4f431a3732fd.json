{"ast":null,"code":"import{useState,useCallback}from\"react\";import{parseCSV,toNum}from\"../utils/dataUtils\";import{parseInvestorFlowCSV}from\"../utils/investorUtils\";import{computeIndicators,mergeInvestorFlows}from\"../utils/indicatorUtils\";import{sampleOHLCV,sampleFlowBreakdown}from\"../constants/sampleData\";export function useSelfTest(){const[testLog,setTestLog]=useState([]);const runSelfTests=useCallback(()=>{const logs=[];try{// Test 1: parseCSV basic\nconst t1=parseCSV(\"Date,Open,High,Low,Close,Volume\\n2025-01-01,1,2,0.5,1.5,100\");if(t1.length!==1)throw new Error(\"parseCSV length mismatch\");logs.push(\"✓ parseCSV loads 1 row\");// Test 2: indicators range (MFI 0~100)\nconst{data:ind}=computeIndicators(sampleOHLCV,0);const mfiVals=ind.map(d=>d.mfi14).filter(v=>v!=null);if(mfiVals.some(v=>v<0||v>100))throw new Error(\"MFI out of range\");logs.push(\"✓ MFI(14) within 0-100\");// Test 3: mergeInvestorFlows cumulative consistency (skip if no sample data)\nif(sampleOHLCV.length>0&&sampleFlowBreakdown.length>0){const mergedTest=mergeInvestorFlows(sampleOHLCV,sampleFlowBreakdown);const last=mergedTest[mergedTest.length-1];const sumForeign=sampleFlowBreakdown.reduce((a,b)=>a+toNum(b.외국인||0)+toNum(b.기타외국인||0),0);const sumInst=sampleFlowBreakdown.reduce((a,b)=>a+toNum(b.기관합계||0),0);if(last.cumForeign!==sumForeign||last.cumInst!==sumInst)throw new Error(\"Cumulative flow mismatch\");logs.push(\"✓ Cumulative totals (외국인합계/기관합계) match\");}else{logs.push(\"⚠️ Skipped cumulative test (no sample data)\");}// Test 4: KRX-style row with scientific notation + 기관합계 auto-sum\nconst krxLine=\"날짜\\t금융투자\\t보험\\t투신\\t사모\\t은행\\t기타금융\\t연기금\\t기타법인\\t개인\\t외국인\\t기타외국인\\t기관합계\\n2020-08-10\\t-1.1E+09\\t-3.3E+08\\t-2.3E+08\\t44312800\\t0\\t0\\t8486650\\t143419300\\t5094342700\\t-3.6E+09\\t10170600\\t\";const parsedKRX=parseInvestorFlowCSV(krxLine);if(parsedKRX.length!==1)throw new Error(\"KRX parse failed\");const row=parsedKRX[0];const parts=row.금융투자+row.보험+row.투신+row.사모+row.은행+row.기타금융+row.연기금+row.기타법인;if(Math.abs(row.기관합계-parts)>1)throw new Error(\"기관합계 autosum mismatch\");logs.push(\"✓ KRX row parse + autosum OK\");// Test: space-delimited KRX sample (user's format)\nconst spaceHeader=\"날짜 금융투자 보험 투신 사모 은행 기타금융 연기금 기타법인 개인 외국인 기타외국인 기관합계\";const spaceRow=\"2020-08-10 -1120696400 -333365000 -229195850 44312800 0 0 8486650 143419300 5094342700 -3617474800 10170600 -1487038500\";const parsedSpace=parseInvestorFlowCSV(\"\".concat(spaceHeader,\"\\n\").concat(spaceRow));if(parsedSpace.length!==1||typeof parsedSpace[0].기관합계!==\"number\"){throw new Error(\"Space-delimited parse failed\");}logs.push(\"✓ Space-delimited KRX CSV parsed (기관합계 recognized)\");setTestLog(logs);}catch(err){logs.push(\"\\u2717 Test failed: \".concat(err.message));setTestLog(logs);}},[]);return{testLog,runSelfTests};}","map":{"version":3,"names":["useState","useCallback","parseCSV","toNum","parseInvestorFlowCSV","computeIndicators","mergeInvestorFlows","sampleOHLCV","sampleFlowBreakdown","useSelfTest","testLog","setTestLog","runSelfTests","logs","t1","length","Error","push","data","ind","mfiVals","map","d","mfi14","filter","v","some","mergedTest","last","sumForeign","reduce","a","b","외국인","기타외국인","sumInst","기관합계","cumForeign","cumInst","krxLine","parsedKRX","row","parts","금융투자","보험","투신","사모","은행","기타금융","연기금","기타법인","Math","abs","spaceHeader","spaceRow","parsedSpace","concat","err","message"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/hooks/useSelfTest.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { parseCSV, toNum } from \"../utils/dataUtils\";\nimport { parseInvestorFlowCSV } from \"../utils/investorUtils\";\nimport { computeIndicators, mergeInvestorFlows } from \"../utils/indicatorUtils\";\nimport { sampleOHLCV, sampleFlowBreakdown } from \"../constants/sampleData\";\n\nexport function useSelfTest() {\n  const [testLog, setTestLog] = useState([]);\n\n  const runSelfTests = useCallback(() => {\n    const logs = [];\n    try {\n      // Test 1: parseCSV basic\n      const t1 = parseCSV(\"Date,Open,High,Low,Close,Volume\\n2025-01-01,1,2,0.5,1.5,100\");\n      if (t1.length !== 1) throw new Error(\"parseCSV length mismatch\");\n      logs.push(\"✓ parseCSV loads 1 row\");\n\n      // Test 2: indicators range (MFI 0~100)\n      const { data: ind } = computeIndicators(sampleOHLCV, 0);\n      const mfiVals = ind.map((d) => d.mfi14).filter((v) => v != null);\n      if (mfiVals.some((v) => v < 0 || v > 100)) throw new Error(\"MFI out of range\");\n      logs.push(\"✓ MFI(14) within 0-100\");\n\n      // Test 3: mergeInvestorFlows cumulative consistency (skip if no sample data)\n      if (sampleOHLCV.length > 0 && sampleFlowBreakdown.length > 0) {\n        const mergedTest = mergeInvestorFlows(sampleOHLCV, sampleFlowBreakdown);\n        const last = mergedTest[mergedTest.length - 1];\n        const sumForeign = sampleFlowBreakdown.reduce((a, b) => a + toNum(b.외국인 || 0) + toNum(b.기타외국인 || 0), 0);\n        const sumInst = sampleFlowBreakdown.reduce((a, b) => a + toNum(b.기관합계 || 0), 0);\n        if (last.cumForeign !== sumForeign || last.cumInst !== sumInst) throw new Error(\"Cumulative flow mismatch\");\n        logs.push(\"✓ Cumulative totals (외국인합계/기관합계) match\");\n      } else {\n        logs.push(\"⚠️ Skipped cumulative test (no sample data)\");\n      }\n\n      // Test 4: KRX-style row with scientific notation + 기관합계 auto-sum\n      const krxLine = \"날짜\\t금융투자\\t보험\\t투신\\t사모\\t은행\\t기타금융\\t연기금\\t기타법인\\t개인\\t외국인\\t기타외국인\\t기관합계\\n2020-08-10\\t-1.1E+09\\t-3.3E+08\\t-2.3E+08\\t44312800\\t0\\t0\\t8486650\\t143419300\\t5094342700\\t-3.6E+09\\t10170600\\t\";\n      const parsedKRX = parseInvestorFlowCSV(krxLine);\n      if (parsedKRX.length !== 1) throw new Error(\"KRX parse failed\");\n      const row = parsedKRX[0];\n      const parts = row.금융투자 + row.보험 + row.투신 + row.사모 + row.은행 + row.기타금융 + row.연기금 + row.기타법인;\n      if (Math.abs(row.기관합계 - parts) > 1) throw new Error(\"기관합계 autosum mismatch\");\n      logs.push(\"✓ KRX row parse + autosum OK\");\n\n      // Test: space-delimited KRX sample (user's format)\n      const spaceHeader = \"날짜 금융투자 보험 투신 사모 은행 기타금융 연기금 기타법인 개인 외국인 기타외국인 기관합계\";\n      const spaceRow = \"2020-08-10 -1120696400 -333365000 -229195850 44312800 0 0 8486650 143419300 5094342700 -3617474800 10170600 -1487038500\";\n      const parsedSpace = parseInvestorFlowCSV(`${spaceHeader}\\n${spaceRow}`);\n      if (parsedSpace.length !== 1 || typeof parsedSpace[0].기관합계 !== \"number\") {\n        throw new Error(\"Space-delimited parse failed\");\n      }\n      logs.push(\"✓ Space-delimited KRX CSV parsed (기관합계 recognized)\");\n\n      setTestLog(logs);\n    } catch (err) {\n      logs.push(`✗ Test failed: ${err.message}`);\n      setTestLog(logs);\n    }\n  }, []);\n\n  return { testLog, runSelfTests };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}