{"ast":null,"code":"// 기술적 지표 계산 함수들\n\n// 단순 이동평균 계산\nexport function calculateSMA(data, period, key = 'close') {\n  const result = [];\n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      result.push(null);\n    } else {\n      const sum = data.slice(i - period + 1, i + 1).reduce((acc, d) => acc + (d[key] || 0), 0);\n      result.push(sum / period);\n    }\n  }\n  return result;\n}\n\n// 볼린저 밴드 계산\nexport function calculateBollingerBands(data, period = 20, stdDev = 2) {\n  const sma = calculateSMA(data, period);\n  const bands = [];\n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      bands.push({\n        upper: null,\n        middle: null,\n        lower: null\n      });\n    } else {\n      const slice = data.slice(i - period + 1, i + 1);\n      const mean = sma[i];\n      const variance = slice.reduce((acc, d) => acc + Math.pow(d.close - mean, 2), 0) / period;\n      const std = Math.sqrt(variance);\n      bands.push({\n        upper: mean + stdDev * std,\n        middle: mean,\n        lower: mean - stdDev * std\n      });\n    }\n  }\n  return bands;\n}\n\n// RSI 계산\nexport function calculateRSI(data, period = 14) {\n  const changes = [];\n  const gains = [];\n  const losses = [];\n\n  // 가격 변화 계산\n  for (let i = 1; i < data.length; i++) {\n    const change = data[i].close - data[i - 1].close;\n    changes.push(change);\n    gains.push(change > 0 ? change : 0);\n    losses.push(change < 0 ? Math.abs(change) : 0);\n  }\n  const rsi = [null]; // 첫 번째 값은 null\n\n  // 첫 번째 평균 계산\n  let avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;\n  let avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;\n  for (let i = period; i < data.length; i++) {\n    if (i === period) {\n      const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n      rsi.push(100 - 100 / (1 + rs));\n    } else {\n      avgGain = (avgGain * (period - 1) + gains[i - 1]) / period;\n      avgLoss = (avgLoss * (period - 1) + losses[i - 1]) / period;\n      const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n      rsi.push(100 - 100 / (1 + rs));\n    }\n  }\n\n  // 처음 period 개의 null 값 추가\n  while (rsi.length < data.length) {\n    rsi.unshift(null);\n  }\n  return rsi;\n}\n\n// MACD 계산\nexport function calculateMACD(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n  const emaFast = calculateEMA(data, fastPeriod);\n  const emaSlow = calculateEMA(data, slowPeriod);\n  const macd = [];\n  const signal = [];\n  const histogram = [];\n\n  // MACD 라인 계산\n  for (let i = 0; i < data.length; i++) {\n    if (i < slowPeriod - 1) {\n      macd.push(null);\n    } else {\n      macd.push(emaFast[i] - emaSlow[i]);\n    }\n  }\n\n  // Signal 라인 계산 (MACD의 EMA)\n  const macdData = macd.filter(v => v !== null).map(v => ({\n    close: v\n  }));\n  const signalEMA = calculateEMA(macdData, signalPeriod);\n  let signalIndex = 0;\n  for (let i = 0; i < data.length; i++) {\n    if (macd[i] === null) {\n      signal.push(null);\n      histogram.push(null);\n    } else if (signalIndex < signalPeriod - 1) {\n      signal.push(null);\n      histogram.push(null);\n      signalIndex++;\n    } else {\n      signal.push(signalEMA[signalIndex - signalPeriod + 1]);\n      histogram.push(macd[i] - signal[i]);\n      signalIndex++;\n    }\n  }\n  return {\n    macd,\n    signal,\n    histogram\n  };\n}\n\n// 지수 이동평균 계산\nexport function calculateEMA(data, period) {\n  const multiplier = 2 / (period + 1);\n  const ema = [];\n\n  // 첫 번째 EMA는 SMA로 시작\n  const firstSMA = data.slice(0, period).reduce((acc, d) => acc + d.close, 0) / period;\n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      ema.push(null);\n    } else if (i === period - 1) {\n      ema.push(firstSMA);\n    } else {\n      ema.push((data[i].close - ema[i - 1]) * multiplier + ema[i - 1]);\n    }\n  }\n  return ema;\n}\n\n// 매수/매도 신호 점수 계산\nexport function calculateSignalScore(data, index) {\n  var _current$_flows, _current$_flows2;\n  if (!data || index < 60 || index >= data.length) return {\n    score: 0,\n    signals: []\n  };\n  const current = data[index];\n  const signals = [];\n  let score = 0;\n\n  // 1. 이동평균선 배열 (20 < 60 < 120)\n  if (current.ma20 && current.ma60 && current.ma120) {\n    if (current.ma20 > current.ma60 && current.ma60 > current.ma120) {\n      score += 20;\n      signals.push({\n        name: \"정배열\",\n        type: \"bullish\",\n        weight: 20\n      });\n    } else if (current.ma20 < current.ma60 && current.ma60 < current.ma120) {\n      score -= 20;\n      signals.push({\n        name: \"역배열\",\n        type: \"bearish\",\n        weight: -20\n      });\n    }\n  }\n\n  // 2. 가격 vs 이동평균선\n  if (current.ma20) {\n    if (current.close > current.ma20) {\n      score += 10;\n      signals.push({\n        name: \"20일선 위\",\n        type: \"bullish\",\n        weight: 10\n      });\n    } else {\n      score -= 10;\n      signals.push({\n        name: \"20일선 아래\",\n        type: \"bearish\",\n        weight: -10\n      });\n    }\n  }\n\n  // 3. 볼린저 밴드 위치\n  if (current.close > current.bbUpper) {\n    score -= 15; // 과매수\n    signals.push({\n      name: \"BB 상단 돌파\",\n      type: \"bearish\",\n      weight: -15\n    });\n  } else if (current.close < current.bbLower) {\n    score += 15; // 과매도\n    signals.push({\n      name: \"BB 하단 돌파\",\n      type: \"bullish\",\n      weight: 15\n    });\n  }\n\n  // 4. RSI\n  if (current.rsi14 > 70) {\n    score -= 15;\n    signals.push({\n      name: \"RSI 과매수\",\n      type: \"bearish\",\n      weight: -15\n    });\n  } else if (current.rsi14 < 30) {\n    score += 15;\n    signals.push({\n      name: \"RSI 과매도\",\n      type: \"bullish\",\n      weight: 15\n    });\n  }\n\n  // 5. MFI\n  if (current.mfi14 > 80) {\n    score -= 10;\n    signals.push({\n      name: \"MFI 과매수\",\n      type: \"bearish\",\n      weight: -10\n    });\n  } else if (current.mfi14 < 20) {\n    score += 10;\n    signals.push({\n      name: \"MFI 과매도\",\n      type: \"bullish\",\n      weight: 10\n    });\n  }\n\n  // 6. 거래량\n  const avgVolume = data.slice(index - 20, index).reduce((acc, d) => acc + d.volume, 0) / 20;\n  if (current.volume > avgVolume * 1.5 && current.close > data[index - 1].close) {\n    score += 10;\n    signals.push({\n      name: \"거래량 급증(상승)\",\n      type: \"bullish\",\n      weight: 10\n    });\n  } else if (current.volume > avgVolume * 1.5 && current.close < data[index - 1].close) {\n    score -= 10;\n    signals.push({\n      name: \"거래량 급증(하락)\",\n      type: \"bearish\",\n      weight: -10\n    });\n  }\n\n  // 7. 수급 (외국인 + 기관)\n  const smartMoney = (((_current$_flows = current._flows) === null || _current$_flows === void 0 ? void 0 : _current$_flows.외국인) || 0) + (((_current$_flows2 = current._flows) === null || _current$_flows2 === void 0 ? void 0 : _current$_flows2.기관합계) || 0);\n  if (smartMoney > 0) {\n    score += 20;\n    signals.push({\n      name: \"스마트머니 매수\",\n      type: \"bullish\",\n      weight: 20\n    });\n  } else if (smartMoney < 0) {\n    score -= 20;\n    signals.push({\n      name: \"스마트머니 매도\",\n      type: \"bearish\",\n      weight: -20\n    });\n  }\n  return {\n    score,\n    signals\n  };\n}","map":{"version":3,"names":["calculateSMA","data","period","key","result","i","length","push","sum","slice","reduce","acc","d","calculateBollingerBands","stdDev","sma","bands","upper","middle","lower","mean","variance","Math","pow","close","std","sqrt","calculateRSI","changes","gains","losses","change","abs","rsi","avgGain","a","b","avgLoss","rs","unshift","calculateMACD","fastPeriod","slowPeriod","signalPeriod","emaFast","calculateEMA","emaSlow","macd","signal","histogram","macdData","filter","v","map","signalEMA","signalIndex","multiplier","ema","firstSMA","calculateSignalScore","index","_current$_flows","_current$_flows2","score","signals","current","ma20","ma60","ma120","name","type","weight","bbUpper","bbLower","rsi14","mfi14","avgVolume","volume","smartMoney","_flows","외국인","기관합계"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/technicalIndicators.js"],"sourcesContent":["// 기술적 지표 계산 함수들\n\n// 단순 이동평균 계산\nexport function calculateSMA(data, period, key = 'close') {\n  const result = [];\n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      result.push(null);\n    } else {\n      const sum = data.slice(i - period + 1, i + 1).reduce((acc, d) => acc + (d[key] || 0), 0);\n      result.push(sum / period);\n    }\n  }\n  return result;\n}\n\n// 볼린저 밴드 계산\nexport function calculateBollingerBands(data, period = 20, stdDev = 2) {\n  const sma = calculateSMA(data, period);\n  const bands = [];\n  \n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      bands.push({ upper: null, middle: null, lower: null });\n    } else {\n      const slice = data.slice(i - period + 1, i + 1);\n      const mean = sma[i];\n      const variance = slice.reduce((acc, d) => acc + Math.pow(d.close - mean, 2), 0) / period;\n      const std = Math.sqrt(variance);\n      \n      bands.push({\n        upper: mean + (stdDev * std),\n        middle: mean,\n        lower: mean - (stdDev * std)\n      });\n    }\n  }\n  return bands;\n}\n\n// RSI 계산\nexport function calculateRSI(data, period = 14) {\n  const changes = [];\n  const gains = [];\n  const losses = [];\n  \n  // 가격 변화 계산\n  for (let i = 1; i < data.length; i++) {\n    const change = data[i].close - data[i - 1].close;\n    changes.push(change);\n    gains.push(change > 0 ? change : 0);\n    losses.push(change < 0 ? Math.abs(change) : 0);\n  }\n  \n  const rsi = [null]; // 첫 번째 값은 null\n  \n  // 첫 번째 평균 계산\n  let avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;\n  let avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;\n  \n  for (let i = period; i < data.length; i++) {\n    if (i === period) {\n      const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n      rsi.push(100 - (100 / (1 + rs)));\n    } else {\n      avgGain = (avgGain * (period - 1) + gains[i - 1]) / period;\n      avgLoss = (avgLoss * (period - 1) + losses[i - 1]) / period;\n      const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n      rsi.push(100 - (100 / (1 + rs)));\n    }\n  }\n  \n  // 처음 period 개의 null 값 추가\n  while (rsi.length < data.length) {\n    rsi.unshift(null);\n  }\n  \n  return rsi;\n}\n\n// MACD 계산\nexport function calculateMACD(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n  const emaFast = calculateEMA(data, fastPeriod);\n  const emaSlow = calculateEMA(data, slowPeriod);\n  \n  const macd = [];\n  const signal = [];\n  const histogram = [];\n  \n  // MACD 라인 계산\n  for (let i = 0; i < data.length; i++) {\n    if (i < slowPeriod - 1) {\n      macd.push(null);\n    } else {\n      macd.push(emaFast[i] - emaSlow[i]);\n    }\n  }\n  \n  // Signal 라인 계산 (MACD의 EMA)\n  const macdData = macd.filter(v => v !== null).map(v => ({ close: v }));\n  const signalEMA = calculateEMA(macdData, signalPeriod);\n  \n  let signalIndex = 0;\n  for (let i = 0; i < data.length; i++) {\n    if (macd[i] === null) {\n      signal.push(null);\n      histogram.push(null);\n    } else if (signalIndex < signalPeriod - 1) {\n      signal.push(null);\n      histogram.push(null);\n      signalIndex++;\n    } else {\n      signal.push(signalEMA[signalIndex - signalPeriod + 1]);\n      histogram.push(macd[i] - signal[i]);\n      signalIndex++;\n    }\n  }\n  \n  return { macd, signal, histogram };\n}\n\n// 지수 이동평균 계산\nexport function calculateEMA(data, period) {\n  const multiplier = 2 / (period + 1);\n  const ema = [];\n  \n  // 첫 번째 EMA는 SMA로 시작\n  const firstSMA = data.slice(0, period).reduce((acc, d) => acc + d.close, 0) / period;\n  \n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      ema.push(null);\n    } else if (i === period - 1) {\n      ema.push(firstSMA);\n    } else {\n      ema.push((data[i].close - ema[i - 1]) * multiplier + ema[i - 1]);\n    }\n  }\n  \n  return ema;\n}\n\n// 매수/매도 신호 점수 계산\nexport function calculateSignalScore(data, index) {\n  if (!data || index < 60 || index >= data.length) return { score: 0, signals: [] };\n  \n  const current = data[index];\n  const signals = [];\n  let score = 0;\n  \n  // 1. 이동평균선 배열 (20 < 60 < 120)\n  if (current.ma20 && current.ma60 && current.ma120) {\n    if (current.ma20 > current.ma60 && current.ma60 > current.ma120) {\n      score += 20;\n      signals.push({ name: \"정배열\", type: \"bullish\", weight: 20 });\n    } else if (current.ma20 < current.ma60 && current.ma60 < current.ma120) {\n      score -= 20;\n      signals.push({ name: \"역배열\", type: \"bearish\", weight: -20 });\n    }\n  }\n  \n  // 2. 가격 vs 이동평균선\n  if (current.ma20) {\n    if (current.close > current.ma20) {\n      score += 10;\n      signals.push({ name: \"20일선 위\", type: \"bullish\", weight: 10 });\n    } else {\n      score -= 10;\n      signals.push({ name: \"20일선 아래\", type: \"bearish\", weight: -10 });\n    }\n  }\n  \n  // 3. 볼린저 밴드 위치\n  if (current.close > current.bbUpper) {\n    score -= 15; // 과매수\n    signals.push({ name: \"BB 상단 돌파\", type: \"bearish\", weight: -15 });\n  } else if (current.close < current.bbLower) {\n    score += 15; // 과매도\n    signals.push({ name: \"BB 하단 돌파\", type: \"bullish\", weight: 15 });\n  }\n  \n  // 4. RSI\n  if (current.rsi14 > 70) {\n    score -= 15;\n    signals.push({ name: \"RSI 과매수\", type: \"bearish\", weight: -15 });\n  } else if (current.rsi14 < 30) {\n    score += 15;\n    signals.push({ name: \"RSI 과매도\", type: \"bullish\", weight: 15 });\n  }\n  \n  // 5. MFI\n  if (current.mfi14 > 80) {\n    score -= 10;\n    signals.push({ name: \"MFI 과매수\", type: \"bearish\", weight: -10 });\n  } else if (current.mfi14 < 20) {\n    score += 10;\n    signals.push({ name: \"MFI 과매도\", type: \"bullish\", weight: 10 });\n  }\n  \n  // 6. 거래량\n  const avgVolume = data.slice(index - 20, index).reduce((acc, d) => acc + d.volume, 0) / 20;\n  if (current.volume > avgVolume * 1.5 && current.close > data[index - 1].close) {\n    score += 10;\n    signals.push({ name: \"거래량 급증(상승)\", type: \"bullish\", weight: 10 });\n  } else if (current.volume > avgVolume * 1.5 && current.close < data[index - 1].close) {\n    score -= 10;\n    signals.push({ name: \"거래량 급증(하락)\", type: \"bearish\", weight: -10 });\n  }\n  \n  // 7. 수급 (외국인 + 기관)\n  const smartMoney = (current._flows?.외국인 || 0) + (current._flows?.기관합계 || 0);\n  if (smartMoney > 0) {\n    score += 20;\n    signals.push({ name: \"스마트머니 매수\", type: \"bullish\", weight: 20 });\n  } else if (smartMoney < 0) {\n    score -= 20;\n    signals.push({ name: \"스마트머니 매도\", type: \"bearish\", weight: -20 });\n  }\n  \n  return { score, signals };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}