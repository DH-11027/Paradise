{"ast":null,"code":"// =============================\n// Data parsing and formatting utilities\n// =============================\n\nexport function parseCSV(text) {\n  // Minimal CSV parser (comma or tab). Expects header row.\n  const lines = text.trim().split(/\\r?\\n/).filter(Boolean);\n  if (lines.length < 2) return [];\n  const sep = lines[0].includes(\"\\t\") ? \"\\t\" : \",\";\n  const headers = lines[0].split(sep).map(h => h.trim());\n  return lines.slice(1).map(line => {\n    const cols = line.split(sep);\n    const row = {};\n    headers.forEach((h, i) => {\n      var _cols$i$trim, _cols$i, _cols$i$trim2;\n      return row[h] = (_cols$i$trim = (_cols$i = cols[i]) === null || _cols$i === void 0 ? void 0 : (_cols$i$trim2 = _cols$i.trim) === null || _cols$i$trim2 === void 0 ? void 0 : _cols$i$trim2.call(_cols$i)) !== null && _cols$i$trim !== void 0 ? _cols$i$trim : \"\";\n    });\n    return row;\n  });\n}\nexport function toNum(v) {\n  if (typeof v === \"number\") return v;\n  if (v === null || v === undefined) return 0;\n  const s = String(v).trim();\n  if (s === \"\" || s === \"-\") return 0;\n  // Remove commas and KR units; support scientific notation (e.g., -1.1E+09)\n  const clean = s.replace(/,/g, \"\").replace(/원|주|%/g, \"\");\n  const n = Number(clean);\n  return Number.isFinite(n) ? n : 0;\n}\nexport function fmtDate(d) {\n  if (!d) return \"\";\n\n  // 문자열인 경우 다양한 형식 처리\n  if (typeof d === 'string') {\n    // YYYY-MM-DD 또는 YYYY/MM/DD 형식 처리\n    const cleaned = d.trim().replace(/\\//g, '-');\n\n    // YYYY-M-D 형식을 YYYY-MM-DD로 변환\n    const parts = cleaned.split('-');\n    if (parts.length === 3) {\n      const year = parts[0];\n      const month = parts[1].padStart(2, '0');\n      const day = parts[2].padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n  }\n  const t = new Date(d);\n  if (Number.isNaN(t.getTime())) return String(d); // keep original if invalid\n  return t.toISOString().slice(0, 10);\n}","map":{"version":3,"names":["parseCSV","text","lines","trim","split","filter","Boolean","length","sep","includes","headers","map","h","slice","line","cols","row","forEach","i","_cols$i$trim","_cols$i","_cols$i$trim2","call","toNum","v","undefined","s","String","clean","replace","n","Number","isFinite","fmtDate","d","cleaned","parts","year","month","padStart","day","t","Date","isNaN","getTime","toISOString"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/dataUtils.js"],"sourcesContent":["// =============================\n// Data parsing and formatting utilities\n// =============================\n\nexport function parseCSV(text) {\n  // Minimal CSV parser (comma or tab). Expects header row.\n  const lines = text.trim().split(/\\r?\\n/).filter(Boolean);\n  if (lines.length < 2) return [];\n  const sep = lines[0].includes(\"\\t\") ? \"\\t\" : \",\";\n  const headers = lines[0].split(sep).map((h) => h.trim());\n  return lines.slice(1).map((line) => {\n    const cols = line.split(sep);\n    const row = {};\n    headers.forEach((h, i) => (row[h] = cols[i]?.trim?.() ?? \"\"));\n    return row;\n  });\n}\n\nexport function toNum(v) {\n  if (typeof v === \"number\") return v;\n  if (v === null || v === undefined) return 0;\n  const s = String(v).trim();\n  if (s === \"\" || s === \"-\") return 0;\n  // Remove commas and KR units; support scientific notation (e.g., -1.1E+09)\n  const clean = s.replace(/,/g, \"\").replace(/원|주|%/g, \"\");\n  const n = Number(clean);\n  return Number.isFinite(n) ? n : 0;\n}\n\nexport function fmtDate(d) {\n  if (!d) return \"\";\n  \n  // 문자열인 경우 다양한 형식 처리\n  if (typeof d === 'string') {\n    // YYYY-MM-DD 또는 YYYY/MM/DD 형식 처리\n    const cleaned = d.trim().replace(/\\//g, '-');\n    \n    // YYYY-M-D 형식을 YYYY-MM-DD로 변환\n    const parts = cleaned.split('-');\n    if (parts.length === 3) {\n      const year = parts[0];\n      const month = parts[1].padStart(2, '0');\n      const day = parts[2].padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n  }\n  \n  const t = new Date(d);\n  if (Number.isNaN(t.getTime())) return String(d); // keep original if invalid\n  return t.toISOString().slice(0, 10);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}