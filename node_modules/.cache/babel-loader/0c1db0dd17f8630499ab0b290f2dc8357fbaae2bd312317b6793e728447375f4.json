{"ast":null,"code":"// 강력한 CSV 파서 - BOM과 한글 처리 최적화\nexport function robustParseCSV(text){if(!text)return[];// 1. 모든 종류의 BOM 제거\nlet cleanText=text;// UTF-8 BOM\nif(cleanText.charCodeAt(0)===0xFEFF){cleanText=cleanText.substring(1);}// 다른 형태의 BOM들\ncleanText=cleanText.replace(/^\\uFEFF/,'');cleanText=cleanText.replace(/^\\xEF\\xBB\\xBF/,'');cleanText=cleanText.replace(/^﻿/,'');// 앞뒤 공백 제거\ncleanText=cleanText.trim();// 2. 줄 단위로 분리\nconst lines=cleanText.split(/\\r?\\n/).filter(line=>line.trim().length>0);if(lines.length<2){console.warn('CSV has less than 2 lines');return[];}// 3. 구분자 감지 (콤마 또는 탭)\nconst firstLine=lines[0];let separator=',';if(firstLine.includes('\\t')){separator='\\t';}// 4. 헤더 파싱\nconst headers=parseLine(firstLine,separator).map(h=>{// 헤더에서도 BOM 제거\nlet clean=h.trim();clean=clean.replace(/^\\uFEFF/,'');clean=clean.replace(/^\\xEF\\xBB\\xBF/,'');clean=clean.replace(/^﻿/,'');return clean;});console.log('Parsed headers:',headers);// 5. 데이터 행 파싱\nconst data=[];for(let i=1;i<lines.length;i++){const values=parseLine(lines[i],separator);const row={};headers.forEach((header,index)=>{row[header]=values[index]||'';});data.push(row);}return data;}// CSV 라인 파싱 (따옴표 처리 포함)\nfunction parseLine(line,separator){const result=[];let current='';let inQuotes=false;for(let i=0;i<line.length;i++){const char=line[i];const nextChar=line[i+1];if(char==='\"'){if(inQuotes&&nextChar==='\"'){// 이중 따옴표는 하나의 따옴표로\ncurrent+='\"';i++;// 다음 따옴표 건너뛰기\n}else{// 따옴표 모드 토글\ninQuotes=!inQuotes;}}else if(char===separator&&!inQuotes){// 구분자를 만났고 따옴표 안이 아니면 필드 구분\nresult.push(current.trim());current='';}else{current+=char;}}// 마지막 필드 추가\nresult.push(current.trim());return result;}// 투자자 수급 데이터 전용 파서\nexport function parseInvestorFlowData(text){const rows=robustParseCSV(text);if(rows.length===0){console.warn('No rows parsed from investor flow data');return[];}// 헤더 확인\nconst firstRow=rows[0];const headers=Object.keys(firstRow);console.log('Investor flow headers:',headers);// 날짜 필드 찾기\nconst dateField=headers.find(h=>h==='날짜'||h==='date'||h==='Date'||h.includes('날짜'));if(!dateField){console.warn('No date field found, using first column');}// 데이터 정규화\nreturn rows.map((row,idx)=>{const normalized={};// 날짜\nnormalized.date=row[dateField]||row[headers[0]]||'';// 투자자별 수급 (한글 키 그대로 사용)\nconst investorKeys=['금융투자','보험','투신','사모','은행','기타금융','연기금','기타법인','개인','외국인','기타외국인','기관합계'];investorKeys.forEach(key=>{const value=row[key];normalized[key]=parseNumber(value);});if(idx===0){console.log('First normalized row:',normalized);}// 기관합계가 없으면 계산\nif(!normalized['기관합계']||normalized['기관합계']===0){const institutionKeys=['금융투자','보험','투신','사모','은행','기타금융','연기금','기타법인'];normalized['기관합계']=institutionKeys.reduce((sum,key)=>sum+(normalized[key]||0),0);}// 외국인합계 계산\nnormalized['외국인합계']=(normalized['외국인']||0)+(normalized['기타외국인']||0);return normalized;}).filter(row=>row.date);// 날짜가 있는 행만 반환\n}// 숫자 파싱 헬퍼\nfunction parseNumber(value){if(typeof value==='number')return value;if(!value)return 0;const str=String(value).trim();if(str===''||str==='-')return 0;// 콤마 제거\nconst cleaned=str.replace(/,/g,'');// 숫자로 변환\nconst num=Number(cleaned);return isFinite(num)?num:0;}export default{robustParseCSV,parseInvestorFlowData};","map":{"version":3,"names":["robustParseCSV","text","cleanText","charCodeAt","substring","replace","trim","lines","split","filter","line","length","console","warn","firstLine","separator","includes","headers","parseLine","map","h","clean","log","data","i","values","row","forEach","header","index","push","result","current","inQuotes","char","nextChar","parseInvestorFlowData","rows","firstRow","Object","keys","dateField","find","idx","normalized","date","investorKeys","key","value","parseNumber","institutionKeys","reduce","sum","str","String","cleaned","num","Number","isFinite"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/utils/robustCSVParser.js"],"sourcesContent":["// 강력한 CSV 파서 - BOM과 한글 처리 최적화\n\nexport function robustParseCSV(text) {\n  if (!text) return [];\n  \n  // 1. 모든 종류의 BOM 제거\n  let cleanText = text;\n  \n  // UTF-8 BOM\n  if (cleanText.charCodeAt(0) === 0xFEFF) {\n    cleanText = cleanText.substring(1);\n  }\n  \n  // 다른 형태의 BOM들\n  cleanText = cleanText.replace(/^\\uFEFF/, '');\n  cleanText = cleanText.replace(/^\\xEF\\xBB\\xBF/, '');\n  cleanText = cleanText.replace(/^﻿/, '');\n  \n  // 앞뒤 공백 제거\n  cleanText = cleanText.trim();\n  \n  // 2. 줄 단위로 분리\n  const lines = cleanText.split(/\\r?\\n/).filter(line => line.trim().length > 0);\n  \n  if (lines.length < 2) {\n    console.warn('CSV has less than 2 lines');\n    return [];\n  }\n  \n  // 3. 구분자 감지 (콤마 또는 탭)\n  const firstLine = lines[0];\n  let separator = ',';\n  \n  if (firstLine.includes('\\t')) {\n    separator = '\\t';\n  }\n  \n  // 4. 헤더 파싱\n  const headers = parseLine(firstLine, separator).map(h => {\n    // 헤더에서도 BOM 제거\n    let clean = h.trim();\n    clean = clean.replace(/^\\uFEFF/, '');\n    clean = clean.replace(/^\\xEF\\xBB\\xBF/, '');\n    clean = clean.replace(/^﻿/, '');\n    return clean;\n  });\n  \n  console.log('Parsed headers:', headers);\n  \n  // 5. 데이터 행 파싱\n  const data = [];\n  for (let i = 1; i < lines.length; i++) {\n    const values = parseLine(lines[i], separator);\n    const row = {};\n    \n    headers.forEach((header, index) => {\n      row[header] = values[index] || '';\n    });\n    \n    data.push(row);\n  }\n  \n  return data;\n}\n\n// CSV 라인 파싱 (따옴표 처리 포함)\nfunction parseLine(line, separator) {\n  const result = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    const nextChar = line[i + 1];\n    \n    if (char === '\"') {\n      if (inQuotes && nextChar === '\"') {\n        // 이중 따옴표는 하나의 따옴표로\n        current += '\"';\n        i++; // 다음 따옴표 건너뛰기\n      } else {\n        // 따옴표 모드 토글\n        inQuotes = !inQuotes;\n      }\n    } else if (char === separator && !inQuotes) {\n      // 구분자를 만났고 따옴표 안이 아니면 필드 구분\n      result.push(current.trim());\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  // 마지막 필드 추가\n  result.push(current.trim());\n  \n  return result;\n}\n\n// 투자자 수급 데이터 전용 파서\nexport function parseInvestorFlowData(text) {\n  const rows = robustParseCSV(text);\n  \n  if (rows.length === 0) {\n    console.warn('No rows parsed from investor flow data');\n    return [];\n  }\n  \n  // 헤더 확인\n  const firstRow = rows[0];\n  const headers = Object.keys(firstRow);\n  console.log('Investor flow headers:', headers);\n  \n  // 날짜 필드 찾기\n  const dateField = headers.find(h => \n    h === '날짜' || \n    h === 'date' || \n    h === 'Date' || \n    h.includes('날짜')\n  );\n  \n  if (!dateField) {\n    console.warn('No date field found, using first column');\n  }\n  \n  // 데이터 정규화\n  return rows.map((row, idx) => {\n    const normalized = {};\n    \n    // 날짜\n    normalized.date = row[dateField] || row[headers[0]] || '';\n    \n    // 투자자별 수급 (한글 키 그대로 사용)\n    const investorKeys = [\n      '금융투자', '보험', '투신', '사모', '은행', \n      '기타금융', '연기금', '기타법인', '개인', \n      '외국인', '기타외국인', '기관합계'\n    ];\n    \n    investorKeys.forEach(key => {\n      const value = row[key];\n      normalized[key] = parseNumber(value);\n    });\n    \n    if (idx === 0) {\n      console.log('First normalized row:', normalized);\n    }\n    \n    // 기관합계가 없으면 계산\n    if (!normalized['기관합계'] || normalized['기관합계'] === 0) {\n      const institutionKeys = [\n        '금융투자', '보험', '투신', '사모', '은행', \n        '기타금융', '연기금', '기타법인'\n      ];\n      normalized['기관합계'] = institutionKeys.reduce((sum, key) => \n        sum + (normalized[key] || 0), 0\n      );\n    }\n    \n    // 외국인합계 계산\n    normalized['외국인합계'] = (normalized['외국인'] || 0) + (normalized['기타외국인'] || 0);\n    \n    return normalized;\n  }).filter(row => row.date); // 날짜가 있는 행만 반환\n}\n\n// 숫자 파싱 헬퍼\nfunction parseNumber(value) {\n  if (typeof value === 'number') return value;\n  if (!value) return 0;\n  \n  const str = String(value).trim();\n  if (str === '' || str === '-') return 0;\n  \n  // 콤마 제거\n  const cleaned = str.replace(/,/g, '');\n  \n  // 숫자로 변환\n  const num = Number(cleaned);\n  return isFinite(num) ? num : 0;\n}\n\nexport default {\n  robustParseCSV,\n  parseInvestorFlowData\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}