{"ast":null,"code":"// CSV 파싱 테스트 스크립트\nimport{parseCSV}from'./utils/dataUtils';import{parseInvestorFlowCSV}from'./utils/investorUtils';import{robustParseCSV,parseInvestorFlowData}from'./utils/robustCSVParser';// 테스트 데이터 (실제 파일과 동일한 형식)\nconst testFlowCSV=\"\\uB0A0\\uC9DC,\\uAE08\\uC735\\uD22C\\uC790,\\uBCF4\\uD5D8,\\uD22C\\uC2E0,\\uC0AC\\uBAA8,\\uC740\\uD589,\\uAE30\\uD0C0\\uAE08\\uC735,\\uC5F0\\uAE30\\uAE08,\\uAE30\\uD0C0\\uBC95\\uC778,\\uAC1C\\uC778,\\uC678\\uAD6D\\uC778,\\uAE30\\uD0C0\\uC678\\uAD6D\\uC778,\\uAE30\\uAD00\\uD569\\uACC4,\\uC804\\uCCB4\\n2020-08-10,-1120696400,-333365000,-229195850,44312800,0,0,8486650,143419300,5094342700,-3617474800,10170600,-1487038500,0\\n2020-08-11,615642250,137802200,930901300,28587900,0,0,0,206228400,-1418363250,-476630700,-24168100,1919162050,0\";// BOM이 포함된 테스트 데이터\nconst testFlowCSVWithBOM='\\uFEFF'+testFlowCSV;export function testParsing(){console.log('=== CSV 파싱 테스트 시작 ===');// 1. 일반 CSV 파싱 테스트\nconsole.log('\\n1. 일반 parseCSV 테스트:');const parsed1=parseCSV(testFlowCSV);console.log('파싱된 행 수:',parsed1.length);console.log('첫 번째 행:',parsed1[0]);// 2. BOM 포함 CSV 파싱 테스트\nconsole.log('\\n2. BOM 포함 parseCSV 테스트:');const parsed2=parseCSV(testFlowCSVWithBOM);console.log('파싱된 행 수:',parsed2.length);console.log('첫 번째 행:',parsed2[0]);// 3. 투자자 플로우 CSV 파싱 테스트\nconsole.log('\\n3. parseInvestorFlowCSV 테스트:');const parsed3=parseInvestorFlowCSV(testFlowCSV);console.log('파싱된 행 수:',parsed3.length);console.log('첫 번째 행:',parsed3[0]);// 4. BOM 포함 투자자 플로우 CSV 파싱 테스트\nconsole.log('\\n4. BOM 포함 parseInvestorFlowCSV 테스트:');const parsed4=parseInvestorFlowCSV(testFlowCSVWithBOM);console.log('파싱된 행 수:',parsed4.length);console.log('첫 번째 행:',parsed4[0]);// 5. 강력한 파서 테스트\nconsole.log('\\n5. 강력한 파서 테스트:');const parsed5=parseInvestorFlowData(testFlowCSV);console.log('파싱된 행 수:',parsed5.length);console.log('첫 번째 행:',parsed5[0]);// 6. BOM 포함 강력한 파서 테스트\nconsole.log('\\n6. BOM 포함 강력한 파서 테스트:');const parsed6=parseInvestorFlowData(testFlowCSVWithBOM);console.log('파싱된 행 수:',parsed6.length);console.log('첫 번째 행:',parsed6[0]);// 7. 실제 파일 테스트\nconsole.log('\\n7. 실제 파일 로드 테스트:');fetch('/flows_data.csv').then(res=>res.text()).then(text=>{console.log('파일 크기:',text.length);console.log('첫 100자:',text.substring(0,100));// 강력한 파서로 테스트\nconst robustParsed=parseInvestorFlowData(text);console.log('[강력한 파서] 파싱된 행 수:',robustParsed.length);if(robustParsed.length>0){console.log('[강력한 파서] 첫 번째 행:',robustParsed[0]);}// 기존 파서로도 테스트\nconst oldParsed=parseInvestorFlowCSV(text);console.log('[기존 파서] 파싱된 행 수:',oldParsed.length);if(oldParsed.length>0){console.log('[기존 파서] 첫 번째 행:',oldParsed[0]);}}).catch(err=>console.error('파일 로드 실패:',err));console.log('=== 테스트 완료 ===');}// 자동 실행\nif(typeof window!=='undefined'){window.testCSVParsing=testParsing;console.log('브라우저 콘솔에서 testCSVParsing()을 실행하세요.');}","map":{"version":3,"names":["parseCSV","parseInvestorFlowCSV","robustParseCSV","parseInvestorFlowData","testFlowCSV","testFlowCSVWithBOM","testParsing","console","log","parsed1","length","parsed2","parsed3","parsed4","parsed5","parsed6","fetch","then","res","text","substring","robustParsed","oldParsed","catch","err","error","window","testCSVParsing"],"sources":["C:/Users/kloud/OneDrive/Desktop/Paradise/src/testCSVParsing.js"],"sourcesContent":["// CSV 파싱 테스트 스크립트\n\nimport { parseCSV } from './utils/dataUtils';\nimport { parseInvestorFlowCSV } from './utils/investorUtils';\nimport { robustParseCSV, parseInvestorFlowData } from './utils/robustCSVParser';\n\n// 테스트 데이터 (실제 파일과 동일한 형식)\nconst testFlowCSV = `날짜,금융투자,보험,투신,사모,은행,기타금융,연기금,기타법인,개인,외국인,기타외국인,기관합계,전체\n2020-08-10,-1120696400,-333365000,-229195850,44312800,0,0,8486650,143419300,5094342700,-3617474800,10170600,-1487038500,0\n2020-08-11,615642250,137802200,930901300,28587900,0,0,0,206228400,-1418363250,-476630700,-24168100,1919162050,0`;\n\n// BOM이 포함된 테스트 데이터\nconst testFlowCSVWithBOM = '\\uFEFF' + testFlowCSV;\n\nexport function testParsing() {\n  console.log('=== CSV 파싱 테스트 시작 ===');\n  \n  // 1. 일반 CSV 파싱 테스트\n  console.log('\\n1. 일반 parseCSV 테스트:');\n  const parsed1 = parseCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed1.length);\n  console.log('첫 번째 행:', parsed1[0]);\n  \n  // 2. BOM 포함 CSV 파싱 테스트\n  console.log('\\n2. BOM 포함 parseCSV 테스트:');\n  const parsed2 = parseCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed2.length);\n  console.log('첫 번째 행:', parsed2[0]);\n  \n  // 3. 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n3. parseInvestorFlowCSV 테스트:');\n  const parsed3 = parseInvestorFlowCSV(testFlowCSV);\n  console.log('파싱된 행 수:', parsed3.length);\n  console.log('첫 번째 행:', parsed3[0]);\n  \n  // 4. BOM 포함 투자자 플로우 CSV 파싱 테스트\n  console.log('\\n4. BOM 포함 parseInvestorFlowCSV 테스트:');\n  const parsed4 = parseInvestorFlowCSV(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed4.length);\n  console.log('첫 번째 행:', parsed4[0]);\n  \n  // 5. 강력한 파서 테스트\n  console.log('\\n5. 강력한 파서 테스트:');\n  const parsed5 = parseInvestorFlowData(testFlowCSV);\n  console.log('파싱된 행 수:', parsed5.length);\n  console.log('첫 번째 행:', parsed5[0]);\n  \n  // 6. BOM 포함 강력한 파서 테스트\n  console.log('\\n6. BOM 포함 강력한 파서 테스트:');\n  const parsed6 = parseInvestorFlowData(testFlowCSVWithBOM);\n  console.log('파싱된 행 수:', parsed6.length);\n  console.log('첫 번째 행:', parsed6[0]);\n  \n  // 7. 실제 파일 테스트\n  console.log('\\n7. 실제 파일 로드 테스트:');\n  fetch('/flows_data.csv')\n    .then(res => res.text())\n    .then(text => {\n      console.log('파일 크기:', text.length);\n      console.log('첫 100자:', text.substring(0, 100));\n      \n      // 강력한 파서로 테스트\n      const robustParsed = parseInvestorFlowData(text);\n      console.log('[강력한 파서] 파싱된 행 수:', robustParsed.length);\n      if (robustParsed.length > 0) {\n        console.log('[강력한 파서] 첫 번째 행:', robustParsed[0]);\n      }\n      \n      // 기존 파서로도 테스트\n      const oldParsed = parseInvestorFlowCSV(text);\n      console.log('[기존 파서] 파싱된 행 수:', oldParsed.length);\n      if (oldParsed.length > 0) {\n        console.log('[기존 파서] 첫 번째 행:', oldParsed[0]);\n      }\n    })\n    .catch(err => console.error('파일 로드 실패:', err));\n    \n  console.log('=== 테스트 완료 ===');\n}\n\n// 자동 실행\nif (typeof window !== 'undefined') {\n  window.testCSVParsing = testParsing;\n  console.log('브라우저 콘솔에서 testCSVParsing()을 실행하세요.');\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}